<head>
    <title>Anime Rumble</title>
    <script src="/js/vue.js"></script>
    <script src="/js/socket.io.js"></script>
    <link type="text/css" rel="stylesheet" href="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.css" />
    <link rel="stylesheet" href="/css/style.css" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/1da8aad990302731afea05d49285274a.css">
    <link rel="stylesheet" href="/css/animation.css" crossorigin="anonymous">
    <script src="/js/vue-resource@1.5.0.js"></script>
    <script src="//unpkg.com/babel-polyfill@latest/dist/polyfill.min.js"></script>
    <script src="//unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.js"></script>
</head>

<body>

    <div id="app">
        <div class="d-flex flex-row w-100 justify-content-between h-100 selection--bg">
            <% include selection/character.ejs %>
                <% include selection/challenge.ejs %>
                    <modal v-if="showModal" @close="showModal = false" v-bind:char="modalData">
        </div>

    </div>

    <% include components/modal.ejs %>

        <script>
            const setCookie = (name, value, days = 7, path = '/') => {
                const expires = new Date(Date.now() + days * 864e5).toGMTString()
                document.cookie = name + '=' + encodeURIComponent(value) + '; expires=' + expires + '; path=' + path
            }

            const getCookie = (name) => {
                return document.cookie.split('; ').reduce((r, v) => {
                    const parts = v.split('=')
                    return parts[0] === name ? decodeURIComponent(parts[1]) : r
                }, '')
            }

            const deleteCookie = (name, path) => {
                setCookie(name, '', -1, path)
            }

            let token = getCookie('token')
            var socket = io('/lobby', {
                query: {
                    token: token
                }
            });

            let app = new Vue({
                el: '#app',
                data: {
                    seen: false,
                    username: '',
                    players: [],
                    challenge: {
                        seen: false,
                        challenger: '',
                        char: ''
                    },
                    lineup: [],
                    characters: [],
                    showModal: false,
                    tabIndex: 0,
                    matchMaking: false,
                },
                methods: {
                    linkClass(idx) {
                        if (this.tabIndex === idx) {
                            return ['selection--tab', 'l--primary']
                        } else {
                            return ['selection--tab', 'l--secondary']
                        }
                    },
                    onShowModal: function (payload) {
                        console.log(payload)
                        this.modalData = payload
                        this.showModal = true
                    },
                    login: function (payload) {
                        console.log(this.username)
                        socket.emit('log', {
                            name: this.username
                        })
                    },
                    onChallenge: function (payload, event) {
                        console.log(event)
                        socket.emit('challenge', {
                            from: this.username,
                            to: payload,
                            char: this.lineup
                        })
                    },
                    onAccept: function (payload) {
                        socket.emit('accept', {
                            from: this.username,
                            to: payload,
                            challengerChar: this.challenge.char,
                            acceptChar: this.lineup
                        })
                        // window.location.replace("/game/"+payload+this.username)
                    },
                    selectCharacter: function (payload) {
                        console.log(payload)
                        console.log(this.lineup.some(x => x === payload))
                        if (this.lineup.some(x => x === payload)) {
                            this.lineup = this.lineup.filter(x => x !== payload)
                        }
                        else {
                            this.lineup.push(payload)
                        }
                        console.log(this.lineup)
                    },
                    deselectCharacter: function (payload) {
                        this.lineup = this.lineup.filter(x => x !== payload)
                    },
                    findMatch: function (payload) {
                        this.matchMaking = true
                        socket.emit('matchMaking', {
                            char: this.lineup
                        })
                    },
                    cancelMatch: function () {
                        this.matchMaking = false
                        socket.emit('cancelMatch', {})
                    }
                }
            })

            socket.emit('connectLobby', {
                token: token
            })
            socket.on('logged', payload => {
                app.seen = true
                app.username = payload.user
                app.characters = payload.character
                console.log(payload)
                console.log('logged in')
                setCookie('token', payload.token)
                setCookie('username', payload.user)
            })
            socket.on('exist', payload => {
                console.log('exist')
            })

            socket.on('challenge', payload => {
                document.title = "(!)Challenged - Anime Rumble"
                app.challenge.seen = true
                app.challenge.challenger = payload.challenger
                app.challenge.char = payload.char
            })

            socket.on('accepted', payload => {
                let url = "/game/" + payload
                window.location.replace(url);
                // newwindow = window.open(url, 'Game', '_blank');
                // if (window.focus) { newwindow.focus() }
                // window.location.replace()
            })

            socket.on('users', payload => {
                console.log('USERS', payload)
                // app.players = payload.filter(x => x[3] === 'online')
                app.players = payload
            })
        </script>
</body>