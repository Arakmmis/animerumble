<head>
    <!-- SEO -->
    <title>Anime Rumble - Naruto Arena Styled Game</title>
    <meta name="description" content="Playable Now. With many Animes (Naruto, OnePiece, DBZ, and More) available on Android, iOS, and Web."
    />
    <meta name="keywords" content="naruto arena, soul arena, warofninja, naruto boards, soul boards, naruto-arena.com, soul-arena.com, warofninja.com, anime, turn based game, web games"
    />
    <meta name="author" content="metatags generator">
    <meta name="robots" content="index, follow">
    <meta name="revisit-after" content="3 month">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">

    <!-- Script -->
    <script src="/js/vue.js"></script>
    <script src="/js/v-tooltip.min.js"></script>
    <script src="/js/socket.io.js"></script>
    <script src="/js/autosize.js"></script>
    <script src="/js/lodash.min.js"></script>
    <link rel="stylesheet" href="/css/create.css" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/1da8aad990302731afea05d49285274a.css">
    <script src="/js/axios.min.js"></script>
    <script src="/js/html2canvas.min.js"></script>
    <script type="text/javascript" src="/js/FileSaver.js"></script>

    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-119900570-1"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'UA-119900570-1');
    </script>
</head>

<body>
    <div id="app">
        <div class="create d-flex flex-column align-items-center">
            <div class="create--nav">
                <p>
                    <a href="/">
                        <i class="icon-prev"></i> Back to Anime Rumble
                    </a>
                </p>
            </div>
            <div class="create--sandbox d-flex flex-column align-items-center" id="capture">

                <!-- Name -->
                <div class="create--box w-75">
                    <div class="d-flex flex-row align-items-end create--skill-name">
                        <input placeholder="Name" class="create--name l--main" v-model="profile.name"></input>
                        <i @click="appearances('border','profile')" class="icon-palette"></i>
                    </div>
                    <div class="l--body">
                        <div :class="profile.appearances.border ? 'l--img l--border' : 'l--img'" @click="uploadPicture('profile')">
                            <img :src="profile.picture !== '' ? profile.picture : '/assets/create/placeholder.jpg'" class="l--img-upload">
                        </div>
                        <editable :content="profile.description" ref="profile" @update="profile.description = $event"></editable>
                    </div>
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-row w-50 align-items-end">
                            <p class="l--credit">Author</p>
                            <input placeholder="Your Name" class="create--name l--credit" v-model="profile.author"></input>
                        </div>
                        <div class="d-flex flex-row w-50 align-items-end">
                            <p class="l--credit">Pictures</p>
                            <input placeholder="Your Name" class="create--name l--credit" v-model="profile.pictures"></input>
                        </div>
                    </div>
                </div>

                <!-- Skills -->
                <div class="d-flex flex-row flex-wrap w-100">
                    <div class="create--box w-50 p-1" v-for="(item, i) in skills">
                        <div class="d-flex flex-row align-items-end create--skill-name">
                            <p class="l--label mr-1">Skill:</p>
                            <input placeholder="Skill Name" class="create--name l--main" v-model="item.name"></input>
                            <i @click="appearances('border','skills',i)" class="icon-palette"></i>
                            <i @click="removeSkill(i)" class="icon-cancel-circled"></i>
                        </div>
                        <div class="l--body">
                            <div :class="item.appearances.border ? 'l--img l--border' : 'l--img'" @click="uploadPicture('skills', i)">
                                <img :src="item.picture !== '' ? item.picture : '/assets/create/placeholder.jpg'" class="l--img-upload">
                            </div>
                            <editable :content="skills[i].text" ref="skills" @update="skills[i].text = $event"></editable>
                        </div>
                        <div class="d-flex flex-row align-items-end justify-content-between align-items-center">
                            <div class="d-flex flex-row">
                                <p class="l--label p-1">
                                    <u>Cooldown:</u> {{item.cooldown === 0 ? 'None' : item.cooldown}}
                                    <i @click="item.cooldown += 1" class="icon-plus-circle l--icon"></i>
                                    <i @click="item.cooldown > 0 ? item.cooldown -= 1 : null" class="icon-minus-circle l--icon"></i>
                                </p>
                            </div>
                            <div class="d-flex flex-row">
                                <p class="l--label d-flex flex-row justify-content-between align-items-center" @click="openModal(i)">
                                    <i class="icon-plus-circle l--icon"></i>
                                    <u class="cursor p-1">Energy:</u>
                                    <span v-if="(item.energy.a+item.energy.s+item.energy.i+item.energy.w+item.energy.r) === 0">None</span>
                                    <img src="/assets/energy/energy_0.gif" v-if="item.energy.a > 0" v-for="n in item.energy.a" class="l--energy">
                                    <img src="/assets/energy/energy_1.gif" v-if="item.energy.i > 0" v-for="n in item.energy.i" class="l--energy">
                                    <img src="/assets/energy/energy_2.gif" v-if="item.energy.s > 0" v-for="n in item.energy.s" class="l--energy">
                                    <img src="/assets/energy/energy_3.gif" v-if="item.energy.w > 0" v-for="n in item.energy.w" class="l--energy">
                                    <img src="/assets/energy/energy_random.gif" v-if="item.energy.r > 0" v-for="n in item.energy.r" class="l--energy">
                                </p>
                            </div>
                        </div>
                        <div class="d-flex flex-row align-items-end">
                            <p class="l--sublabel">Classes:</p>
                            <v-popover offset="0" placement="bottom" trigger="click">
                                <input placeholder="Enter classes here" class="create--name l--sublabel" v-model="item.classes"></input>
                                <template slot="popover">
                                    <div class="create--popover d-flex flex-row flex-wrap">
                                        <p @click="addClass('Instant', i)">Instant</p>
                                        <p @click="addClass('Action', i)">Action</p>
                                        <p @click="addClass('Control', i)">Control</p>
                                        <p @click="addClass('Melee', i)">Melee</p>
                                        <p @click="addClass('Ranged', i)">Ranged</p>
                                        <p @click="addClass('Physical', i)">Physical</p>
                                        <p @click="addClass('Affliction', i)">Affliction</p>
                                        <p @click="addClass('Mental', i)">Mental</p>
                                        <p @click="addClass('Energy', i)">Energy</p>
                                        <p @click="addClass('Strategic', i)">Strategic</p>
                                    </div>
                                </template>
                            </v-popover>
                        </div>
                    </div>
                </div>

                <div class="d-flex flex-row mt-4" data-html2canvas-ignore="true">
                    <p @click="addSkill" class="create--options">
                        <i class="icon-plus-circle"></i> Add Skill</p>
                    <p @click="download" class="create--options">
                        <i class="icon-picture"></i> Download</p>
                    <p @click="save" class="create--options">
                        <i class="icon-floppy"></i> Save Character</p>
                    <p @click="load" class="create--options">
                        <i class="icon-up-circled"></i> Load Character
                    </p>
                </div>
                <p class="create--shortcut" data-html2canvas-ignore="true">
                    <i>Styling Shortcut (Chrome Only): Bold - ctrl+b/cmd+b, Italic - ctrl+i/cmd+i, Underline - ctrl+u</i>
                </p>
                <div class="d-flex flex-row">
                    <form enctype="multipart/form-data">
                        <input type="file" ref="loadFile" @change="onLoadFile($event)" name="progress" class="create--load"></input>
                    </form>
                    <form enctype="multipart/form-data">
                        <input type="file" ref="uploadPicture" @change="onFileChanged($event, selection.type, selection.id)" name="avatar" class="create--load"></input>
                    </form>
                </div>
                <p class="create--credit">Created on AnimeRumble.com</p>
            </div>
        </div>

        <modal v-if="showModal" :energy="skills[sendSkill].energy" @close="closeModal"></modal>
    </div>

    <% include create/modal.ejs %>

        <script>
            function skill() {
                return {
                    name: '',
                    picture: '',
                    text: '',
                    cooldown: 0,
                    energy: {
                        a: 0,
                        i: 0,
                        s: 0,
                        w: 0,
                        r: 0
                    },
                    classes: '',
                    appearances: {
                        border: true
                    }
                }
            }

            Vue.component('editable', {
                template: '<div contenteditable="true" placeholder="Enter text here..." class="create--editable" @input="update"></div>',
                props: ['content'],
                mounted: function () {
                    this.$el.innerHTML = this.content;
                },
                methods: {
                    rerender: function (payload) {
                        this.$el.innerHTML = payload;
                    },
                    update: function (event) {
                        this.$emit('update', event.target.innerHTML);
                    }
                }
            })
            Vue.use(VTooltip);
            let app = new Vue({
                el: '#app',
                data: {
                    showModal: false,
                    sendSkill: 0,
                    profile: {
                        name: '',
                        picture: '',
                        pictures: '',
                        author: '',
                        description: '',
                        appearances: {
                            border: true
                        }
                    },
                    skills: [
                        _.cloneDeep(skill()),
                        _.cloneDeep(skill()),
                        _.cloneDeep(skill()),
                        _.cloneDeep(skill()),
                    ],
                    selection: {
                        type: null,
                        id: null
                    }
                },
                methods: {
                    appearances(subject, type, id) {
                        if (type === 'skills') {
                            this.skills[id].appearances.border = !this.skills[id].appearances.border
                        } else if (type === 'profile') {
                            this.profile.appearances.border = !this.profile.appearances.border
                        }
                    },
                    uploadPicture(type, id) {
                        this.selection.type = type
                        this.selection.id = id
                        this.$refs.uploadPicture.click()
                    },
                    onFileChanged(event, type, index) {
                        let file = event.target.files[0]
                        if ((file.type === 'image/png' || file.type === 'image/jpg' || file.type === 'image/jpeg') && (file.size / 1000 / 1000 <= 10)) {
                            //Loading
                            if (type === 'skills') {
                                this.skills[index].picture = '/assets/create/loading.png'
                            } else if (type === 'profile') {
                                this.profile.picture = '/assets/create/loading.png'
                            }

                            //Upload                            
                            const formData = new FormData()
                            formData.append('avatar', file, file.name)
                            axios.post('/create/upload', formData,
                                {
                                    headers: {
                                        'Content-Type': 'multipart/form-data'
                                    }
                                }).then(res => {
                                    console.log(res.data.link)
                                    if (type === 'skills') {
                                        this.skills[index].picture = res.data.link
                                    } else if (type === 'profile') {
                                        this.profile.picture = res.data.link
                                    }
                                })
                        }
                    },
                    onLoadFile(event) {
                        //Load                        
                        let file = event.target.files[0]
                        let extension = file.name.split('.')
                        extension = extension[extension.length - 1]
                        let self = this
                        if (extension === 'ar' && (file.size / 1000 / 1000 <= 10)) {
                            var reader = new FileReader();
                            let test = reader.readAsText(file)
                            reader.onload = function (event) {
                                let decode = atob(event.target.result)
                                let result = JSON.parse(decode);

                                //Legacy Convert
                                if (result.profile.appearances === undefined) {
                                    result.profile.appearances = {
                                        border: true
                                    }
                                }
                                result.skills.forEach(x => {
                                    if (x.appearances === undefined) {
                                        x.appearances = {
                                            border: true
                                        }
                                    }
                                })

                                //Load
                                self.profile = result.profile
                                self.skills = result.skills

                                //Rerender
                                self.$refs.profile.rerender(result.profile.description)
                                result.skills.forEach((x, i) => {
                                    if (self.$refs.skills[i] !== undefined) {
                                        self.$refs.skills[i].rerender(x.text)
                                    }
                                })


                                // setTimeout(() => {
                                //     autosize.destroy(document.querySelectorAll('textarea'));
                                //     autosize(document.querySelectorAll('textarea'));
                                // }, 100)
                            }
                        }
                    },
                    addSkill() {
                        this.skills.push(skill())
                        setTimeout(() => {
                            autosize(document.querySelectorAll('textarea'));
                        }, 100)
                    },
                    removeSkill(i) {
                        console.log(i)
                        let skills = this.skills
                        this.skills.splice(i, 1);
                    },
                    openModal(skill) {
                        this.sendSkill = skill
                        this.showModal = true
                    },
                    closeModal(e) {
                        console.log(e)
                        let packet = e;
                        this.skills[this.sendSkill].energy = packet
                        console.log(this.skills[this.sendSkill].energy)
                        this.showModal = false
                    },
                    download() {
                        let name = this.profile.name !== '' ? this.profile.name : 'AnimeRumble'
                        let fileName = name + ".png"
                        let capture = document.getElementById('capture');
                        // capture.style.fontFeatureSettings = '"liga" 0';
                        html2canvas(capture, { useCORS: true, scale: 2 }).then(canvas => {
                            canvas.toBlob(function (blob) {
                                saveAs(blob, fileName);
                            });
                        });
                    },
                    save() {
                        let name = this.profile.name !== '' ? this.profile.name : 'AnimeRumble'
                        let fileName = name + ".ar"
                        let packet = {
                            profile: this.profile,
                            skills: this.skills
                        }
                        let json = JSON.stringify(packet)
                        let encode = btoa(json)
                        let file = new File([encode], fileName, { type: "text/animerumble" });
                        saveAs(file, fileName);
                    },
                    load() {
                        this.$refs.loadFile.click()
                    },
                    addClass(payload, i) {
                        let classes = this.skills[i].classes
                        console.log(classes)
                        let result = payload
                        if (classes !== '') {
                            result = classes + ', ' + payload
                        }
                        this.skills[i].classes = result
                    }
                }
            })

            // autosize(document.querySelectorAll('textarea'));
        </script>
</body>