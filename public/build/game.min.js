"use strict";

var socket = io("/game");
var chat = io("/chat");
"use strict";

Vue.use(VTooltip);
var app = new Vue({
  el: "#app",
  data: {
    mode: "game",
    chat: [],
    lobbychat: [],
    chatSend: "",
    chatChannel: "ingame",
    chatNotif: {
      lobby: false,
      ingame: false
    },
    source: {
      energy: {
        ally: {}
      },
      meta: {}
    },
    packet: [],
    state: {
      skill: {
        offense: null,
        skill: null,
        skillId: null,
        skillName: null,
        target: null,
        aim: null,
        heroIndex: null
      },
      timer: {
        turn: 100
      },
      onSkill: false,
      button: {},
      description: null,
      winner: {
        state: false,
        name: ""
      },
      energy: {
        modal: false,
        random: 0
      },
      exchange: {
        modal: false,
        used: false,
        energy: {},
        val: ""
      }
    },
    showModal: true
  },
  methods: {
    onSurrender: function onSurrender() {
      console.log("surrender");
      socket.emit("surrender", {
        room: this.source.room
      });
    },
    onChat: function onChat() {
      var channel = this.chatChannel === "ingame" ? "ingame" : "lobby";
      var packet = {
        channel: channel,
        room: this.source.room,
        message: this.chatSend
      };
      chat.emit("chat", packet);
      this.chatSend = "";
    },
    scrollChat: function (_scrollChat) {
      function scrollChat() {
        return _scrollChat.apply(this, arguments);
      }

      scrollChat.toString = function () {
        return _scrollChat.toString();
      };

      return scrollChat;
    }(function () {
      setTimeout(function () {
        scrollChat();
      }, 100);
    }),
    onExchange: function onExchange(e) {
      //Sound
      this.$refs.soundClick.play();
      var state = this.state;
      this.source.energy.ally = e.energy;
      this.source.energy.ally.r = this.source.energy.ally.r - this.state.energy.random;
      state.exchange.energy = e.cost;
      state.exchange.modal = false;
      state.exchange.used = true;
      state.exchange.val = e.exchange;
      state.button.ally.forEach(function (x, xi) {
        if (x.onSkill === false) {
          console.log(x.name);
          x.skill.forEach(function (s, si) {
            var energy = energyManagement({
              heroIndex: xi,
              skill: si
            }, "check");
            s.button = s.disabled || energy ? true : false;
            console.log(energy, s.disabled, s.button);
          });
        }
      }); //Clean Skill Buffer

      if (state.skill.offense !== null && state.skill.target === null) {
        //Switch Choice
        //Button Management
        buttonManagement(state.skill, "onCancel"); //Clean Buffer

        state.skill = {
          offense: null,
          skill: null,
          skillId: null,
          skillName: null,
          target: null,
          aim: null,
          heroIndex: null
        };
      }
    },
    onDone: function onDone(e) {
      console.log(e);
      app.source.myTurn = false; //Sound

      this.$refs.soundEndTurn.play(); //Define

      var state = this.state;
      var packet = e.packet; //Organize

      state.energy.modal = false;
      packet = packet.filter(function (x) {
        return x.skill !== null && x.skillId !== null && x.skillName !== null && x.offense !== null && x.target !== null && x.aim !== null && x.heroIndex !== null;
      });
      packet.unshift(e.energy);

      if (state.exchange.used === true) {
        packet.unshift({
          msg: "exchange",
          val: state.exchange.val
        }, state.exchange.energy);
        state.exchange.used = false;
      } //Send


      socket.emit("sequence", {
        packet: packet,
        room: this.source.room
      }); //Reset

      state.energy.random = 0;
      this.packet = [];
      state.skill = {
        offense: null,
        skill: null,
        skillId: null,
        skillName: null,
        target: null,
        aim: null,
        heroIndex: null
      };
    },
    onSkill: function onSkill(payload) {
      //Define and Switch State
      var state = this.state;
      var skill = this.source.ally[payload.heroIndex].skill[payload.skillIndex];
      var marking = skill.marking;
      var skillName = skill.name;
      var temporary = {
        offense: payload.name,
        skill: payload.skillIndex,
        skillId: payload.skillId,
        skillName: skillName,
        target: null,
        aim: payload.target,
        heroIndex: payload.heroIndex,
        marking: marking
      }; //Is Skill Chosen?

      var isOnSkill = state.button.ally[temporary.heroIndex].onSkill;

      if (isOnSkill === false && state.skill.offense === null && state.skill.target === null) {
        //First Choice
        //Buffer Skill
        state.skill = temporary; //Button Management

        buttonManagement(temporary, "onSkill");
      } else if (isOnSkill === false && state.skill.offense !== null && state.skill.target === null) {
        //Switch Choice
        //Button Management
        buttonManagement(state.skill, "onCancel");
        setTimeout(function () {
          buttonManagement(temporary, "onSkill");
        }, 100); //Buffer Skill

        state.skill = temporary;
      } else if (isOnSkill === true) {
        //Cancel Choice
        energyManagement(temporary, "add"); //Button Management

        buttonManagement(state.skill, "onCancel");
        buttonManagement(temporary, "onSelf");
        this.packet = this.packet.filter(function (x) {
          return x.offense !== temporary.offense;
        }); //Clean Skill Buffer

        state.skill = {
          offense: null,
          skill: null,
          skillId: null,
          skillName: null,
          target: null,
          aim: null,
          heroIndex: null
        }; //State Management

        state.button.ally[temporary.heroIndex].onSkill = false;
      }
    },
    onTarget: function onTarget(payload) {
      //Sound
      this.$refs.soundClick.play(); //Define State

      var state = this.state; //Buffer Skill

      if (state.skill.aim === "allenemy" || state.skill.aim === "randomenemy") {
        console.log(state.button.enemy);
        state.skill.target = state.button.enemy.filter(function (x) {
          return x.button !== true && x.name !== payload.name;
        }).map(function (x) {
          return x.name;
        });
        state.skill.target.unshift(payload.name);
      } else if (state.skill.aim === "allally") {
        state.skill.target = state.button.ally.map(function (x) {
          return x.name;
        });
      } else if (state.skill.aim === "allenemyallally") {
        state.skill.target = state.button.enemy.filter(function (x) {
          return x.button !== true && x.name !== payload.name;
        }).map(function (x) {
          return x.name;
        });
        state.skill.target.unshift(payload.name);
        var ally = state.button.ally.map(function (x) {
          return x.name;
        });
        state.skill.target = state.skill.target.concat(ally);
      } else if (state.skill.aim === "allotherally") {
        state.skill.target = state.button.ally.filter(function (x) {
          return x.name !== state.skill.offense;
        }).map(function (x) {
          return x.name;
        });
      } else {
        state.skill.target = [payload.name];
      } //Register Skill


      this.packet.push(this.state.skill); //Energy Management

      energyManagement(state.skill, "substract"); //Button Management
      // buttonManagement(state.skill, "onSkill");

      buttonManagement(state.skill, "onTarget"); //State Management

      state.button.ally[state.skill.heroIndex].onSkill = true; //Clean Skill Buffer

      state.skill = {
        offense: null,
        skill: null,
        skillId: null,
        skillName: null,
        target: null,
        aim: null,
        heroIndex: null
      };
    },
    onAttack: function onAttack(payload) {
      //Sound
      this.$refs.soundClick.play();
      this.state.energy.modal = true;
    },
    onDescription: function onDescription(payload) {
      var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (option === undefined) {
        option = "ally";
      } //Sound


      this.$refs.soundClick.play(); //Define

      var owner = this.source[option][payload.heroIndex];
      var skillIndex = owner.skill.findIndex(function (x) {
        return x.id === payload.skillId;
      });
      var config = {
        nameId: payload.nameId,
        skill: skillIndex,
        skillId: payload.skillId,
        heroIndex: payload.heroIndex,
        option: option
      };
      var skill = owner.skill[config.skill]; //Map Description

      var map = {
        name: skill.name,
        energy: {
          a: skill.energy.a,
          i: skill.energy.i,
          s: skill.energy.s,
          w: skill.energy.w,
          r: skill.energy.r,
          total: skill.energy.a + skill.energy.i + skill.energy.s + skill.energy.w + skill.energy.r
        },
        description: skill.description,
        classes: skill.classes,
        cooldown: skill.cooldown
      };
      var alt = skill.alt !== false ? skill.alt : false; //Buffer Description

      var state = this.state;
      state.description = {
        nameId: config.nameId,
        skill: config.skillId,
        heroIndex: config.heroIndex,
        map: map,
        alt: alt,
        option: option
      };
    },
    onStatus: function onStatus(payload) {
      console.log(payload);

      var status = _.concat(payload.onAttack, payload.onReceive, payload.onState, payload.onSelf);

      console.log(status);

      var group = _.groupBy(status, "nameId");

      console.log(group);

      var subgroup = _.toArray(group).map(function (x) {
        return _.toArray(_.groupBy(x, "skillIndex"));
      });

      var prep = subgroup.map(function (x) {
        return x[0];
      });
      var final = prep.map(function (x) {
        console.log(x[0]);
        var info = x[0];
        return {
          nameId: info.nameId,
          status: info.skillIndex,
          val: x
        };
      });
      console.log(prep);
      console.log(final);
      return final; // let subgroup = group.map(x => _.groupBy(x, "skillIndex"));
    },
    onGetImage: function onGetImage(payload, option) {
      if (option === "packet") {
        var index = this.source.ally.findIndex(function (x) {
          return x.name === payload.offense;
        });
        var nameId = this.source.ally[index].nameId;
        return "/assets/character/" + nameId.slice(0, -1) + "/skill" + (payload.skill + 1) + "/avatar.jpg";
      } else if (option === "char") {
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/avatar.jpg";
      } else if (option === "skill") {
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/skill" + (payload.skill + 1) + "/avatar.jpg";
      } else if (option === "status") {
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/skill" + payload.skill + "/avatar.jpg";
      } else if (option === "targeting") {
        var _index = this.packet.findIndex(function (x) {
          return x.offense === payload.name;
        });

        var skillId = this.packet[_index].skillId;
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/skill" + (skillId + 1) + "/avatar.jpg";
      }
    },
    targetingCue: function targetingCue(payload, nameId) {
      var name = payload;
      var index = this.packet.findIndex(function (x) {
        return x.offense === payload;
      });
      var packet = this.packet[index];
      var result = {
        name: name,
        skillIndex: packet.skill,
        skillId: packet.skillId,
        heroIndex: packet.heroIndex,
        target: packet.target
      };

      if (nameId) {
        result.nameId = nameId;
      }

      console.log(result);
      return result;
    },
    onHP: function onHP(hp) {
      if (hp > 70) {
        return "l--hp-full";
      } else if (hp <= 70 && hp >= 40) {
        return "l--hp-mid";
      } else {
        return "l--hp-low";
      }
    }
  }
});
"use strict";

function energyManagement(temporary, option) {
  var energy = temporary.energy ? temporary.energy : app.source.energy.ally;
  var skill = temporary.skillBind ? temporary.skillBind : app.source.ally[temporary.heroIndex].skill[temporary.skill].energy;
  var total = {
    energy: energy.a + energy.i + energy.s + energy.w,
    skill: skill.a + skill.i + skill.s + skill.w
  };

  if (option === "substract") {
    if (skill.a > 0) {
      energy.a -= skill.a;
      energy.r -= skill.a;
    }

    if (skill.i > 0) {
      energy.i -= skill.i;
      energy.r -= skill.i;
    }

    if (skill.s > 0) {
      energy.s -= skill.s;
      energy.r -= skill.s;
    }

    if (skill.w > 0) {
      energy.w -= skill.w;
      energy.r -= skill.w;
    }

    if (skill.r > 0) {
      energy.r -= skill.r;
      app.state.energy.random += skill.r;
    }
  } else if (option === "add") {
    if (skill.a > 0) {
      energy.a += skill.a;
      energy.r += skill.a;
    }

    if (skill.i > 0) {
      energy.i += skill.i;
      energy.r += skill.i;
    }

    if (skill.s > 0) {
      energy.s += skill.s;
      energy.r += skill.s;
    }

    if (skill.w > 0) {
      energy.w += skill.w;
      energy.r += skill.w;
    }

    if (skill.r > 0) {
      energy.r += skill.r;
      app.state.energy.random -= skill.r;
    }
  } else if (option === "check") {
    var active = true;

    if (total.energy >= total.skill) {
      var count = [true, true, true, true, true];

      if (skill.a >= 0) {
        count[0] = energy.a >= skill.a ? false : true;
      }

      if (skill.i >= 0) {
        count[1] = energy.i >= skill.i ? false : true;
      }

      if (skill.s >= 0) {
        count[2] = energy.s >= skill.s ? false : true;
      }

      if (skill.w >= 0) {
        count[3] = energy.w >= skill.w ? false : true;
      }

      if (skill.r >= 0) {
        count[4] = energy.r >= total.skill + skill.r ? false : true;
      }

      if (count.filter(function (x) {
        return x === false;
      }).length === 5) {
        active = false;
      } else {
        active = true;
      }
    }

    return active;
  }
}

function buttonManagement(payload, option) {
  //Target Button
  if (option !== "onSelf") {
    if (payload.aim === "enemy") {
      app.state.button.enemy.forEach(function (x) {
        //Define
        var skill = app.source.ally[payload.heroIndex].skill[payload.skill];
        var enemyStatus = app.source.enemy[x.index].status; //Invulnerability

        var state = enemyStatus.onState;
        var invulnerable = invulnerableManagement(state, skill); //Disable

        x.button = x.disabled || invulnerable ? true : !x.button; //Ignore

        var ignore = ignoreManagement(state, skill);
        console.log(ignore); //Prevent Invulnerability

        if (option === "onSkill" && enemyStatus.onState.some(function (x) {
          return x.type === "disableDrIv";
        }) && ignore === false) {
          console.log("hi");
          x.button = false;
        }

        console.log(x.button); //Marking

        if (payload.marking === true) {
          var skillName = skill.name;
          var marking = enemyStatus.onReceive.some(function (x) {
            return x.name === skillName;
          }) || enemyStatus.onState.some(function (x) {
            return x.name === skillName;
          });

          if (marking === true) {
            x.button = true;
          }
        }
      });
    } else if (payload.aim === "enemylock") {
      app.state.button.enemy.forEach(function (x) {
        //Define
        var skill = app.source.ally[payload.heroIndex].skill[payload.skill];
        var enemyStatus = app.source.enemy[x.index].status;
        var lock = enemyStatus.onState.some(function (x) {
          return x.type === "lock" && x.info === skill.name;
        });

        if (lock === true) {
          //Invulnerability
          var state = enemyStatus.onState;
          var invulnerable = invulnerableManagement(state, skill); //Disable

          x.button = x.disabled || invulnerable ? true : !x.button; //Ignore

          var ignore = ignoreManagement(state, skill);
          console.log(invulnerable); //Prevent Invulnerability

          if (option === "onSkill" && enemyStatus.onState.some(function (x) {
            return x.type === "disableDrIv";
          }) && ignore === false) {
            x.button = false;
          } //Marking


          if (payload.marking === true) {
            var skillName = skill.name;
            var marking = enemyStatus.onReceive.some(function (x) {
              return x.name === skillName;
            }) || enemyStatus.onState.some(function (x) {
              return x.name === skillName;
            });

            if (marking === true) {
              x.button = true;
            }
          }
        }
      });
    } else if (payload.aim === "allenemy" || payload.aim === "randomenemy" || payload.aim === "allenemyallally") {
      app.state.button.enemy.forEach(function (x) {
        //Define
        var skill = app.source.ally[payload.heroIndex].skill[payload.skill];
        var enemyStatus = app.source.enemy[x.index].status; //Invulnerability

        var state = enemyStatus.onState;
        var invulnerable = invulnerableManagement(state, skill); //Disable

        x.button = x.disabled || invulnerable ? true : !x.button; //Prevent Invulnerability

        if (option === "onSkill" && enemyStatus.onState.some(function (x) {
          return x.type === "disableDrIv";
        })) {
          x.button = false;
        }
      });
    } else if (payload.aim === "ally" || payload.aim === "allally") {
      app.state.button.ally.forEach(function (x) {
        return x.button = x.disabled ? true : !x.button;
      });
    } else if (payload.aim === "otherally" || payload.aim === "allotherally") {
      app.state.button.ally.forEach(function (x) {
        var name = app.state.button.ally[payload.heroIndex].name;

        if (x.name !== name) {
          x.button = x.disabled ? true : !x.button;
        }
      });
    } else if (payload.aim === "self") {
      var ally = app.state.button.ally[payload.heroIndex];
      ally.button = ally.disabled ? true : !ally.button;
    }
  } //Skill Button


  if (option === "onTarget") {
    console.log("onSkill");
    app.state.button.ally.forEach(function (x) {
      if (x.onSkill === false) {
        x.skill.forEach(function (s) {
          s.button = true;

          if (x.name === payload.offense && s.name === app.source.ally[payload.heroIndex].skill[payload.skill].name) {
            s.button = false;
          }
        });
      }
    });
  }

  if (option === "onCancel") {
    console.log("onCancel");
    app.state.button.ally.forEach(function (x) {
      if (x.onSkill === false || x.name === payload.offense) {
        x.skill.forEach(function (s) {
          s.button = s.disabled ? true : false;

          if (x.name === payload.offense && s.name === app.source.ally[payload.heroIndex].skill[payload.skill].name) {
            s.button = false;
          }
        });
      }
    });
  } else if (option === "onTarget") {
    console.log("onTarget");
    app.state.button.ally.forEach(function (x) {
      var index = app.packet.findIndex(function (s) {
        return s.offense === x.name;
      });

      if (index < 0) {
        x.skill.forEach(function (s) {
          s.button = s.disabled ? true : false;
        });
      }
    });
  } else if (option === "onSelf") {
    console.log("onSelf");
    app.state.button.ally[payload.heroIndex].skill.forEach(function (s) {
      s.button = s.disabled ? true : false;
    });
  } //Energy Management


  if (option !== "onSkill") {
    app.state.button.ally.forEach(function (x, xi) {
      if (x.onSkill === false && x.name !== payload.offense) {
        console.log(x.name);
        console.log(option);
        x.skill.forEach(function (s, si) {
          var energy = energyManagement({
            heroIndex: xi,
            skill: si
          }, "check");
          s.button = s.disabled || energy ? true : false;

          if (x.name === payload.offense && s.name === app.source.ally[payload.heroIndex].skill[payload.skill].name) {
            s.button = false;
          }
        });
      }

      if ((option === "onSelf" || option === "onCancel") && x.name === payload.offense) {
        x.skill.forEach(function (s, si) {
          var energy = energyManagement({
            heroIndex: xi,
            skill: si
          }, "check");
          s.button = s.disabled || energy ? true : false;
        });
      }
    });
  }
}

function stunManagement(onState, skill) {
  var stun = onState.map(function (x) {
    if (x.type === "stun") {
      var ignore = ignoreManagement(onState, x);

      var intersect = _.intersection(x.comprise, skill.classes);

      var evaluate;

      if (x.info === "inclusive") {
        evaluate = intersect.length > 0 ? true : false;
      } else if (x.info === "declusive") {
        evaluate = intersect.length === 0 ? true : false;
      }

      if (evaluate && !ignore) {
        return true;
      } else {
        return false;
      }
    }
  });

  if (stun.filter(function (x) {
    return x === true;
  }).length > 0) {
    return true;
  } else {
    return false;
  }
}

function invulnerableManagement(onState, skill) {
  var invulnerable = onState.map(function (x) {
    if (x.type === "invulnerable") {
      var ignoreInvul = skill.ignoreInvul;

      var intersect = _.intersection(x.comprise, skill.classes);

      var evaluate;

      if (x.info === "inclusive") {
        evaluate = intersect.length > 0 ? true : false;
      } else if (x.info === "declusive") {
        evaluate = intersect.length === 0 ? true : false;
      }

      if (evaluate && !ignoreInvul) {
        return true;
      } else {
        return false;
      }
    }
  });

  if (invulnerable.filter(function (x) {
    return x === true;
  }).length > 0) {
    return true;
  } else {
    return false;
  }
}

function ignoreManagement(onState, skill) {
  var ignore = onState.map(function (x) {
    if (x.type === "ignore") {
      var intersect = _.intersection(x.comprise, skill.classes);

      var evaluate;

      if (x.info === "inclusive") {
        evaluate = intersect.length > 0 ? true : false;
      } else if (x.info === "declusive") {
        evaluate = intersect.length === 0 ? true : false;
      }

      if (evaluate) {
        return true;
      } else {
        return false;
      }
    }
  });

  if (ignore.filter(function (x) {
    return x === true;
  }).length > 0) {
    return true;
  } else {
    return false;
  }
}
"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function vueBind(payload) {
  var username = getCookie("username");
  console.log(payload);
  var ally = payload.team.teamEven === username ? "teamEven" : "teamOdd";
  var enemy = payload.team.teamEven === username ? "teamOdd" : "teamEven";
  var turnVal = ally === "teamEven" ? 0 : 1;
  var myTurn = payload.turn % 2 === turnVal ? true : false;

  if (payload.team.teamEven !== username && payload.team.teamOdd !== username) {
    console.log("spectate");
    app.mode = "spectate";
    myTurn = false; // return;
  }

  if (myTurn === true) {
    app.$refs.soundStartTurn.play();
  } //Time


  var timeDiff = (Date.now() - payload.timestamp) / 1000;
  var timeCalc = Math.floor(60 - timeDiff);
  var remaining = 100 * (timeCalc / 60);
  console.log(payload.timestamp, timeDiff, timeCalc, remaining);

  if (remaining < 0) {
    remaining = 0;
  }

  app.state.timer.turn = remaining; // if (payload.winner.state === true && payload.winner.name === username) {
  // } else if (
  //   payload.winner.state === true &&
  //   payload.winner.name !== username
  // ) {
  //   app.$refs.soundLose.play();
  // }

  var store = {
    energy: {
      ally: payload.energy[ally],
      enemy: payload.energy[enemy]
    },
    ally: payload[ally].map(function (x) {
      return _objectSpread({}, x, {
        skill: app.mode === "game" ? x.skill : x.skill.sort(function (a, b) {
          return a.id - b.id;
        }),
        indicator: statusView(x.name, x.status, turnVal)
      });
    }),
    enemy: payload[enemy].map(function (x) {
      return _objectSpread({}, x, {
        skill: x.skill.sort(function (a, b) {
          return a.id - b.id;
        }),
        indicator: statusView(x.name, x.status, turnVal)
      });
    }),
    turn: payload.turn,
    myTurn: myTurn,
    turnVal: turnVal,
    room: payload.room,
    meta: {
      myName: payload.team[ally],
      theirName: payload.team[enemy]
    },
    timestamp: payload.timestamp
  };
  store.energy.ally.r = store.energy.ally.a + store.energy.ally.i + store.energy.ally.s + store.energy.ally.w;
  console.log(store);
  var button = {
    ally: store.ally.map(function (x) {
      // let disabled = x.status.onState.findIndex(x => x.type === 'stun') > -1 || x.hp <= 0 ? true : false
      var disabled = x.hp <= 0 ? true : false; // let stun = x.status.onState.some(x => x.type === "stun") ? true : false;

      return {
        name: x.name,
        button: true,
        onSkill: false,
        disabled: disabled,
        skill: x.skill.map(function (s) {
          // console.log(s.type);
          var energy = energyManagement({
            energy: store.energy.ally,
            skillBind: s.energy
          }, "check");
          var stun = stunManagement(x.status.onState, s); // let disableDrVr =
          //   s.type === "invulnerable" &&
          //   x.status.onState.some(x => x.type === "disableDrIv")
          //     ? true
          //     : false;

          var disabled = stun || s.required || s.state === "cooldown" || myTurn === false || x.hp <= 0 ? true : false;
          return {
            name: s.name,
            disabled: disabled,
            button: disabled || energy ? true : false
          };
        })
      };
    }),
    enemy: store.enemy.map(function (x, i) {
      // let disabled =
      //   x.status.onState.some(x => x.type === "invulnerable") || x.hp <= 0
      //     ? true
      //     : false;
      var disabled = x.hp <= 0 ? true : false;
      return {
        name: x.name,
        index: i,
        disabled: disabled,
        button: true
      };
    })
  };
  app.source = store;
  app.state.button = button;
  app.state.winner = payload.winner;
  app.state.exchange.modal = false;
}

function statusView(name, payload, turnVal) {
  console.log(name.slice(-1), payload);

  var status = _.concat(payload.onAttack, payload.onReceive, payload.onState, payload.onSelf);

  console.log("invisible", turnVal, name.slice(-1));
  status = status.filter(function (x) {
    return x.isInvisible === false || x.isInvisible !== false && Number(x.nameId.slice(-1)) === turnVal;
  }); // if (turnVal === Number(name.slice(-1))) {
  //   status = status.filter(
  //     x => x.isInvisible === false || x.isInvisible !== false && Number(x.nameId.slice(-1)) === turnVal
  //   );
  // } else {
  //   status = status.filter(
  //     x => x.isInvisible === false || x.isInvisible !== false && Number(x.nameId.slice(-1)) === turnVal
  //   );
  // }

  var groupByNameId = _.groupBy(status, "nameId");

  var valuesByNameId = _.values(groupByNameId);

  var groupBySkillIndex = valuesByNameId.map(function (x) {
    return _.groupBy(x, "skillIndex");
  });

  var valuesBySkillIndex = _.values(groupBySkillIndex);

  var concatValues = [];
  valuesBySkillIndex.forEach(function (x) {
    concatValues = concatValues.concat(_.values(x));
  });
  var final = concatValues.map(function (x) {
    var info = x[0];
    return {
      name: info.name,
      nameId: info.nameId,
      skillIndex: info.skillIndex,
      active: info.active,
      val: x
    };
  });
  return final;
}
"use strict";

function initiate() {
  var url = window.location.href.split("/");
  var room = url[url.length - 1];

  if (room !== "") {
    socket.emit("initiate", {
      room: room
    });
    chat.emit("gameInitiate", {
      room: room
    });
    chat.emit("lobbyInitiate");
  } else {// window.location.replace('/');
  }
}

initiate();
setInterval(function () {
  if (app.source.turn == undefined || app.state.winner.state !== false) {
    return;
  }

  if (app.state.timer.turn > 0) {
    var timer = app.state.timer.turn - 1.66;

    if (timer < 0) {
      timer = 0;
    }

    app.state.timer.turn = timer;
  } else if (app.state.timer.turn <= 0 && app.source.myTurn === true) {
    var timeDiff = (Date.now() - app.source.timestamp) / 1000;
    var timeCalc = 60 - timeDiff;
    var remaining = 100 * (timeCalc / 60); // console.log(app.source.timestamp, timeDiff, timeCalc, remaining);

    if (remaining <= 0 && app.state.timer.turn <= 0 && app.source.myTurn === true) {
      var payload = {
        energy: {
          a: 0,
          i: 0,
          s: 0,
          w: 0
        },
        packet: []
      };
      app.onDone(payload);
      app.source.myTurn = false;
    }
  }
}, 1000);

window.onfocus = function () {
  document.title = "Anime Rumble";
};

function scrollChat() {
  var container = app.$el.querySelector("#chat");
  container.scrollTop = container.scrollHeight;
}
"use strict";

socket.on("apply", function (payload) {
  document.title = "(!) Anime Rumble";
  vueBind(payload);
});
socket.on("noMatch", function (payload) {
  console.log("none");
  window.location.replace("/");
});
chat.on("chat", function (payload) {
  if (payload.channel === "ingame") {
    app.chat.push(payload.message);

    if (app.chatChannel !== "ingame") {
      app.chatNotif.ingame = true;
    } else {
      scrollChat();
    }
  } else if (payload.channel === "lobby") {
    app.lobbychat.push(payload.message);

    if (app.chatChannel !== "lobby") {
      app.chatNotif.lobby = true;
    } else {
      scrollChat();
    }
  }
});
chat.on("gameInitiate", function (payload) {
  app.chat = payload;
  setTimeout(function () {
    scrollChat();
  }, 100);
});
chat.on("lobbyInitiate", function (payload) {
  app.lobbychat = payload;
});
"use strict";

function getParameterName(name, url) {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, "\\$&");
  var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
      results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return "";
  return decodeURIComponent(results[2].replace(/\+/g, " "));
}

var setCookie = function setCookie(name, value) {
  var days = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "/";
  var expires = new Date(Date.now() + days * 864e5).toGMTString();
  document.cookie = name + "=" + encodeURIComponent(value) + "; expires=" + expires + "; path=" + path;
};

var getCookie = function getCookie(name) {
  return document.cookie.split("; ").reduce(function (r, v) {
    var parts = v.split("=");
    return parts[0] === name ? decodeURIComponent(parts[1]) : r;
  }, "");
};

var deleteCookie = function deleteCookie(name, path) {
  setCookie(name, "", -1, path);
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
