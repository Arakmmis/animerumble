let socket = io();
Vue.use(VTooltip);
let app = new Vue({
  el: "#app",
  data: {
    message: "Hello Vuee.js!",
    source: {
      energy: {
        ally: {}
      }
    },
    packet: [],
    state: {
      skill: {
        offense: "",
        skill: null,
        target: "",
        aim: ""
      },
      timer: {
        turn: 100
      },
      onSkill: false,
      button: {},
      description: null,
      winner: {
        state: false,
        name: ""
      },
      energy: {
        modal: false,
        random: 0
      },
      exchange: {
        modal: false,
        used: false,
        energy: {},
        val: ""
      }
    },
    showModal: true
  },
  methods: {
    onExchange: function(e) {
      console.log(e);
      this.source.energy.ally = e.energy;
      this.state.exchange.energy = e.cost;
      this.state.exchange.modal = false;
      this.state.exchange.used = true;
      this.state.exchange.val = e.exchange;

      this.state.button.ally.forEach((x, xi) => {
        if (x.onSkill === false) {
          console.log(x.name);
          x.skill.forEach((s, si) => {
            let energy = energyManagement(
              { heroIndex: xi, skill: si },
              "check"
            );
            s.button = s.disabled || energy ? true : false;
            console.log(energy, s.disabled, s.button);
          });
        }
      });
    },
    onDone: function(e) {
      this.state.energy.modal = false;
      console.log(e.packet);
      let packet = e.packet;
      packet = packet.filter(
        x =>
          x.skill !== null &&
          x.offense !== "" &&
          x.target !== "" &&
          x.aim !== "" &&
          x.heroIndex !== null
      );
      packet.unshift(e.energy);
      if (this.state.exchange.used === true) {
        packet.unshift(
          { msg: "exchange", val: this.state.exchange.val },
          this.state.exchange.energy
        );
        this.state.exchange.used = false;
      }
      // this.packet = this.packet.filter(x => x.skill !== null && x.offense !== '' && x.target !== '' && x.aim !== '' && x.heroIndex !== null)
      // this.packet.unshift(e.energy)
      console.log(packet);
      socket.emit("sequence", {
        packet: packet,
        room: this.source.room
      });
      this.state.energy.random = 0;
      this.packet = [];
      console.log(e);
    },
    onSkill: function(payload) {
      //Define and Switch State
      let state = this.state;
      let marking = this.source.ally[payload.heroIndex].skill[
        payload.skillIndex
      ].marking;
      console.log(marking);
      let temporary = {
        offense: payload.name,
        skill: payload.skillIndex,
        skillId: payload.skillId,
        target: "",
        aim: payload.target,
        heroIndex: payload.heroIndex,
        marking: marking
      };
      console.log(state);
      console.log(payload);

      if (state.button.ally[temporary.heroIndex].onSkill === false) {
        //Buffer Skill
        state.skill = temporary;
        energyManagement(temporary, "substract");
        //Button Management
        buttonManagement(temporary, "onSkill");
      } else {
        energyManagement(temporary, "add");
        //Button Management
        if (
          state.button.ally[temporary.heroIndex].onSkill &&
          state.skill.heroIndex === null
        ) {
          buttonManagement(temporary, "onSelf");
        } else if (
          state.button.ally[temporary.heroIndex].onSkill &&
          state.skill.heroIndex !== null
        ) {
          buttonManagement(temporary, "onCancel");
        }
        // else {
        //     buttonManagement(temporary, 'onSkill')
        // }
        this.packet = this.packet.filter(x => x.offense !== temporary.offense);
        //Clean Skill Buffer
        state.skill = {
          offense: "",
          skill: null,
          skillId: null,
          target: "",
          aim: "",
          heroIndex: null
        };
      }

      //State Management
      state.button.ally[temporary.heroIndex].onSkill = !state.button.ally[
        temporary.heroIndex
      ].onSkill;
    },
    onTarget: function(payload) {
      //Define State
      let state = this.state;
      //Buffer Skill
      if (state.skill.aim === "allenemy" || state.skill.aim === "randomenemy") {
        state.skill.target = state.button.enemy
          .filter(x => x.disabled !== true && x.name !== payload.name)
          .map(x => x.name);
        state.skill.target.unshift(payload.name);
        console.log(state.skill.target);
      } else if (state.skill.aim === "allally") {
        state.skill.target = state.button.ally.map(x => x.name);
      } else if (state.skill.aim === "allenemyallally") {
        state.skill.target = state.button.enemy
          .filter(x => x.disabled !== true && x.name !== payload.name)
          .map(x => x.name);
        state.skill.target.unshift(payload.name);
        let ally = state.button.ally.map(x => x.name);
        state.skill.target = state.skill.target.concat(ally);
        console.log(state.skill.target);
      } else if (state.skill.aim === "otherally") {
        state.skill.target = state.button.ally
          .filter(x => x.name !== state.skill.offense)
          .map(x => x.name);
      } else {
        state.skill.target = [payload.name];
      }
      //Register Skill
      this.packet.push(this.state.skill);

      //Button Management
      buttonManagement(state.skill, "onTarget");

      //Clean Skill Buffer
      state.skill = {
        offense: "",
        skill: null,
        skillId: null,
        target: "",
        aim: "",
        heroIndex: null
      };
    },
    onAttack: function(payload) {
      this.state.energy.modal = true;
    },
    onDescription: function(payload) {
      let state = this.state;
      let temporary = {
        offense: payload.name,
        skill: payload.skillIndex,
        target: "",
        aim: payload.target,
        heroIndex: payload.heroIndex
      };

      //Buffer Skill
      state.description = {
        skill: temporary.skill,
        heroIndex: temporary.heroIndex
      };
    },
    onGetImage: function(payload, option) {
      if (option === "packet") {
        let index = this.source.ally.findIndex(x => x.name === payload.offense);
        let nameId = this.source.ally[index].nameId;

        return (
          "/assets/character/" +
          nameId +
          "/skill" +
          (payload.skill + 1) +
          "/avatar.jpg"
        );
      } else if (option === "char") {
        return "/assets/character/" + payload.nameId + "/avatar.jpg";
      } else if (option === "skill") {
        return (
          "/assets/character/" +
          payload.nameId +
          "/skill" +
          (payload.skill + 1) +
          "/avatar.jpg"
        );
      } else if (option === "status") {
        return (
          "/assets/character/" +
          payload.nameId +
          "/skill" +
          payload.skill +
          "/avatar.jpg"
        );
      }
    }
  }
});

function energyManagement(temporary, option) {
  let energy = temporary.energy ? temporary.energy : app.source.energy.ally;
  let skill = temporary.skillBind
    ? temporary.skillBind
    : app.source.ally[temporary.heroIndex].skill[temporary.skill].energy;
  let total = {
    energy: energy.a + energy.i + energy.s + energy.w,
    skill: skill.a + skill.i + skill.s + skill.w
  };

  if (option === "substract") {
    if (skill.a > 0) {
      energy.a -= skill.a;
      energy.r -= skill.a;
    }
    if (skill.i > 0) {
      energy.i -= skill.i;
      energy.r -= skill.i;
    }
    if (skill.s > 0) {
      energy.s -= skill.s;
      energy.r -= skill.s;
    }
    if (skill.w > 0) {
      energy.w -= skill.w;
      energy.r -= skill.w;
    }
    if (skill.r > 0) {
      energy.r -= skill.r;
      app.state.energy.random += skill.r;
    }
  } else if (option === "add") {
    if (skill.a > 0) {
      energy.a += skill.a;
      energy.r += skill.a;
    }
    if (skill.i > 0) {
      energy.i += skill.i;
      energy.r += skill.i;
    }
    if (skill.s > 0) {
      energy.s += skill.s;
      energy.r += skill.s;
    }
    if (skill.w > 0) {
      energy.w += skill.w;
      energy.r += skill.w;
    }
    if (skill.r > 0) {
      energy.r += skill.r;
      app.state.energy.random -= skill.r;
    }
  } else if (option === "check") {
    let active = true;
    if (total.energy >= total.skill) {
      let count = [true, true, true, true, true];
      if (skill.a >= 0) {
        count[0] = energy.a >= skill.a ? false : true;
      }
      if (skill.i >= 0) {
        count[1] = energy.i >= skill.i ? false : true;
      }
      if (skill.s >= 0) {
        count[2] = energy.s >= skill.s ? false : true;
      }
      if (skill.w >= 0) {
        count[3] = energy.w >= skill.w ? false : true;
      }
      if (skill.r >= 0) {
        count[4] = energy.r >= total.skill + skill.r ? false : true;
      }

      if (count.filter(x => x === false).length === 5) {
        active = false;
      } else {
        active = true;
      }
    }
    return active;
  }
}

function buttonManagement(payload, option) {
  //Target Button
  if (option !== "onSelf") {
    if (payload.aim === "enemy") {
      app.state.button.enemy.forEach(x => {
        x.button = x.disabled ? true : !x.button;

        //Prevent Invulnerability
        if (
          option === "onSkill" &&          
          app.source.enemy[x.index].status.onState.some(
            x => x.type === "disableDrIv"
          )
        ) {
          console.log('booop', option)
          x.button = false;
        }

        //Marking
        if (payload.marking === true) {
          let skillName =
            app.source.ally[payload.heroIndex].skill[payload.skill].name;
          let marking =
            app.source.enemy[x.index].status.onReceive.some(
              x => x.name === skillName
            ) ||
            app.source.enemy[x.index].status.onState.some(
              x => x.name === skillName
            );
          if (marking === true) {
            x.button = true;
          }
        }
      });
    } else if (
      payload.aim === "allenemy" ||
      payload.aim === "randomenemy" ||
      payload.aim === "allenemyallally"
    ) {
      app.state.button.enemy.forEach(x => {
        x.button = x.disabled ? true : !x.button;

        //Prevent Invulnerability
        if (
          option !== "onCancel" &&
          option !== "onSelf" &&
          app.source.enemy[x.index].status.onState.some(
            x => x.type === "disableDrIv"
          )
        ) {
          x.button = false;
        }
      });
    } else if (payload.aim === "ally" || payload.aim === "allally") {
      app.state.button.ally.forEach(
        x => (x.button = x.disabled ? true : !x.button)
      );
    } else if (payload.aim === "otherally") {
      app.state.button.ally.forEach(x => {
        let name = app.state.button.ally[payload.heroIndex].name;
        if (x.name !== name) {
          x.button = x.disabled ? true : !x.button;
        }
      });
    } else if (payload.aim === "self") {
      app.state.button.ally[payload.heroIndex].button = app.state.button.ally[
        payload.heroIndex
      ].disabled
        ? true
        : !app.state.button.ally[payload.heroIndex].button;
    }
  }

  //Skill Button
  if (option === "onSkill") {
    console.log("onSkill");
    app.state.button.ally.forEach(x => {
      if (x.onSkill === false) {
        x.skill.forEach(s => {
          s.button = true;
          if (
            x.name === payload.offense &&
            s.name ===
              app.source.ally[payload.heroIndex].skill[payload.skill].name
          ) {
            s.button = false;
          }
        });
      }
    });
  }
  if (option === "onCancel") {
    console.log("onCancel");
    app.state.button.ally.forEach(x => {
      if (x.onSkill === false || x.name === payload.offense) {
        x.skill.forEach(s => {
          s.button = s.disabled ? true : false;
          if (
            x.name === payload.offense &&
            s.name ===
              app.source.ally[payload.heroIndex].skill[payload.skill].name
          ) {
            s.button = false;
          }
        });
      }
    });
  } else if (option === "onTarget") {
    console.log("onTarget");
    app.state.button.ally.forEach(x => {
      let index = app.packet.findIndex(s => s.offense === x.name);
      if (index < 0) {
        x.skill.forEach(s => {
          s.button = s.disabled ? true : false;
        });
      }
    });
  } else if (option === "onSelf") {
    console.log("onSelf");
    app.state.button.ally[payload.heroIndex].skill.forEach(s => {
      s.button = s.disabled ? true : false;
    });
  }

  //Energy Management
  if (option !== "onSkill") {
    app.state.button.ally.forEach((x, xi) => {
      if (x.onSkill === false && x.name !== payload.offense) {
        console.log(x.name);
        console.log(option);
        x.skill.forEach((s, si) => {
          let energy = energyManagement({ heroIndex: xi, skill: si }, "check");
          s.button = s.disabled || energy ? true : false;
          if (
            x.name === payload.offense &&
            s.name ===
              app.source.ally[payload.heroIndex].skill[payload.skill].name
          ) {
            s.button = false;
          }
        });
      }

      if (
        (option === "onSelf" || option === "onCancel") &&
        x.name === payload.offense
      ) {
        x.skill.forEach((s, si) => {
          let energy = energyManagement({ heroIndex: xi, skill: si }, "check");
          s.button = s.disabled || energy ? true : false;
        });
      }
    });
  }
}

function vueBind(payload) {  
  let username = getCookie("username");
  if (payload.team.teamEven !== username && payload.team.teamOdd !== username) {
    return;
  }
  console.log(payload);
  let ally = payload.team.teamEven === username ? "teamEven" : "teamOdd";
  let enemy = payload.team.teamEven === username ? "teamOdd" : "teamEven";
  let turn = ally === "teamEven" ? 1 : 0;
  let myTurn = payload.turn % 2 === turn ? true : false;
  let store = {
    energy: {
      ally: payload.energy[ally],
      enemy: payload.energy[enemy]
    },
    ally: payload[ally],
    enemy: payload[enemy],
    turn: payload.turn,
    myTurn: myTurn,
    room: payload.room
  };
  store.energy.ally.r =
    store.energy.ally.a +
    store.energy.ally.i +
    store.energy.ally.s +
    store.energy.ally.w;
  console.log(store);  
  let button = {
    ally: store.ally.map(x => {
      // let disabled = x.status.onState.findIndex(x => x.type === 'stun') > -1 || x.hp <= 0 ? true : false
      let disabled = x.hp <= 0 ? true : false;
      let stun =
        x.status.onState.some(x => x.type === "stun") ? true : false;
      return {
        name: x.name,
        button: true,
        onSkill: false,
        disabled: disabled,
        skill: x.skill.map(s => {
          console.log(s.type)
          let energy = energyManagement(
            { energy: store.energy.ally, skillBind: s.energy },
            "check"
          );
          let disableDrVr =
            s.type === "invulnerable" &&
            x.status.onState.some(x => x.type === "disableDrIv")
              ? true
              : false;
          let disabled =
            stun ||
            disableDrVr ||
            s.required ||
            s.state === "cooldown" ||
            !myTurn === false ||
            x.hp <= 0
              ? true
              : false;
          return {
            name: s.name,
            disabled: disabled,
            button: disabled || energy ? true : false
          };
        })
      };
    }),
    enemy: store.enemy.map((x, i) => {
      let disabled =
        x.status.onState.some(x => x.type === "invulnerable") || x.hp <= 0
          ? true
          : false;
      return {
        name: x.name,
        index: i,
        disabled: disabled,
        button: true
      };
    })
  };
  app.source = store;
  app.state.button = button;
  app.state.timer.turn = 100;
  app.state.winner = payload.winner;
}

function initiate() {
  let url = window.location.href.split("/");
  let room = url[url.length - 1];
  if (room !== "") {
    socket.emit("initiate", {
      room: room
    });
  } else {
    // window.location.replace('/');
  }
}

initiate();

setInterval(() => {
  if (app.source.turn == undefined || app.state.winner.state !== false) {
    return;
  }
  if (app.state.timer.turn > 0) {
    app.state.timer.turn -= 3.3;
  } else if (app.state.timer.turn <= 0 && app.source.myTurn === true) {
    // app.packet = app.packet.filter(x => x.skill !== null && x.offense !== '' && x.target !== '' && x.aim !== '' && x.heroIndex !== null)
    // socket.emit('sequence', {
    //     packet: app.packet,
    //     room: app.source.room
    // })
    // app.packet = []
  }
}, 1000);

window.onfocus = function() {
  document.title = "Anime Rumble";
};

socket.on("apply", payload => {
  document.title = "(!) Anime Rumble";
  vueBind(payload);
});

socket.on("noMatch", payload => {
  console.log("none");
  window.location.replace("/");
});

function getParameterName(name, url) {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, "\\$&");
  var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
    results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return "";
  return decodeURIComponent(results[2].replace(/\+/g, " "));
}

const setCookie = (name, value, days = 7, path = "/") => {
  const expires = new Date(Date.now() + days * 864e5).toGMTString();
  document.cookie =
    name +
    "=" +
    encodeURIComponent(value) +
    "; expires=" +
    expires +
    "; path=" +
    path;
};

const getCookie = name => {
  return document.cookie.split("; ").reduce((r, v) => {
    const parts = v.split("=");
    return parts[0] === name ? decodeURIComponent(parts[1]) : r;
  }, "");
};

const deleteCookie = (name, path) => {
  setCookie(name, "", -1, path);
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
