"use strict";

var socket = io("/game");
var chat = io("/chat");
"use strict";

Vue.use(VTooltip);
var app = new Vue({
  el: "#app",
  data: {
    chat: [],
    lobbychat: [],
    chatSend: "",
    chatChannel: "ingame",
    chatNotif: {
      lobby: false,
      ingame: false
    },
    source: {
      energy: {
        ally: {}
      },
      meta: {}
    },
    packet: [],
    state: {
      skill: {
        offense: null,
        skill: null,
        target: null,
        aim: null
      },
      timer: {
        turn: 100
      },
      onSkill: false,
      button: {},
      description: null,
      winner: {
        state: false,
        name: ""
      },
      energy: {
        modal: false,
        random: 0
      },
      exchange: {
        modal: false,
        used: false,
        energy: {},
        val: ""
      }
    },
    showModal: true
  },
  methods: {
    onSurrender: function onSurrender() {
      console.log("surrender");
      socket.emit("surrender", {
        room: this.source.room
      });
    },
    scrollChat: function (_scrollChat) {
      function scrollChat() {
        return _scrollChat.apply(this, arguments);
      }

      scrollChat.toString = function () {
        return _scrollChat.toString();
      };

      return scrollChat;
    }(function () {
      setTimeout(function () {
        scrollChat();
      }, 100);
    }),
    onChat: function onChat() {
      var channel = this.chatChannel === "ingame" ? "ingame" : "lobby";
      var packet = {
        channel: channel,
        room: this.source.room,
        message: this.chatSend
      };
      chat.emit("chat", packet);
      this.chatSend = "";
    },
    onExchange: function onExchange(e) {
      //Sound
      this.$refs.soundClick.play();
      var state = this.state;
      this.source.energy.ally = e.energy;
      this.source.energy.ally.r = this.source.energy.ally.r - this.state.energy.random;
      state.exchange.energy = e.cost;
      state.exchange.modal = false;
      state.exchange.used = true;
      state.exchange.val = e.exchange;
      state.button.ally.forEach(function (x, xi) {
        if (x.onSkill === false) {
          console.log(x.name);
          x.skill.forEach(function (s, si) {
            var energy = energyManagement({
              heroIndex: xi,
              skill: si
            }, "check");
            s.button = s.disabled || energy ? true : false;
            console.log(energy, s.disabled, s.button);
          });
        }
      }); //Clean Skill Buffer

      if (state.skill.offense !== null && state.skill.target === null) {
        //Switch Choice
        //Button Management
        buttonManagement(state.skill, "onCancel"); //Clean Buffer

        state.skill = {
          offense: null,
          skill: null,
          skillId: null,
          target: null,
          aim: null,
          heroIndex: null
        };
      }
    },
    onDone: function onDone(e) {
      //Sound
      this.$refs.soundEndTurn.play(); //Define

      var state = this.state;
      var packet = e.packet; //Organize

      state.energy.modal = false;
      packet = packet.filter(function (x) {
        return x.skill !== null && x.offense !== null && x.target !== null && x.aim !== null && x.heroIndex !== null;
      });
      packet.unshift(e.energy);

      if (state.exchange.used === true) {
        packet.unshift({
          msg: "exchange",
          val: state.exchange.val
        }, state.exchange.energy);
        state.exchange.used = false;
      } //Send


      socket.emit("sequence", {
        packet: packet,
        room: this.source.room
      }); //Reset

      state.energy.random = 0;
      this.packet = [];
      state.skill = {
        offense: null,
        skill: null,
        skillId: null,
        target: null,
        aim: null,
        heroIndex: null
      };
    },
    onSkill: function onSkill(payload) {
      //Define and Switch State
      var state = this.state;
      var marking = this.source.ally[payload.heroIndex].skill[payload.skillIndex].marking;
      var temporary = {
        offense: payload.name,
        skill: payload.skillIndex,
        skillId: payload.skillId,
        target: null,
        aim: payload.target,
        heroIndex: payload.heroIndex,
        marking: marking
      }; //Is Skill Chosen?

      var isOnSkill = state.button.ally[temporary.heroIndex].onSkill;

      if (isOnSkill === false && state.skill.offense === null && state.skill.target === null) {
        //First Choice
        //Buffer Skill
        state.skill = temporary; //Button Management

        buttonManagement(temporary, "onSkill");
      } else if (isOnSkill === false && state.skill.offense !== null && state.skill.target === null) {
        //Switch Choice
        //Button Management
        buttonManagement(state.skill, "onCancel");
        setTimeout(function () {
          buttonManagement(temporary, "onSkill");
        }, 100); //Buffer Skill

        state.skill = temporary;
      } else if (isOnSkill === true) {
        //Cancel Choice
        energyManagement(temporary, "add"); //Button Management

        buttonManagement(state.skill, "onCancel");
        buttonManagement(temporary, "onSelf");
        this.packet = this.packet.filter(function (x) {
          return x.offense !== temporary.offense;
        }); //Clean Skill Buffer

        state.skill = {
          offense: null,
          skill: null,
          skillId: null,
          target: null,
          aim: null,
          heroIndex: null
        }; //State Management

        state.button.ally[temporary.heroIndex].onSkill = false;
      }
    },
    onTarget: function onTarget(payload) {
      //Sound
      this.$refs.soundClick.play(); //Define State

      var state = this.state; //Buffer Skill

      if (state.skill.aim === "allenemy" || state.skill.aim === "randomenemy") {
        console.log(state.button.enemy);
        state.skill.target = state.button.enemy.filter(function (x) {
          return x.button !== true && x.name !== payload.name;
        }).map(function (x) {
          return x.name;
        });
        state.skill.target.unshift(payload.name);
      } else if (state.skill.aim === "allally") {
        state.skill.target = state.button.ally.map(function (x) {
          return x.name;
        });
      } else if (state.skill.aim === "allenemyallally") {
        state.skill.target = state.button.enemy.filter(function (x) {
          return x.button !== true && x.name !== payload.name;
        }).map(function (x) {
          return x.name;
        });
        state.skill.target.unshift(payload.name);
        var ally = state.button.ally.map(function (x) {
          return x.name;
        });
        state.skill.target = state.skill.target.concat(ally);
      } else if (state.skill.aim === "otherally") {
        state.skill.target = state.button.ally.filter(function (x) {
          return x.name !== state.skill.offense;
        }).map(function (x) {
          return x.name;
        });
      } else {
        state.skill.target = [payload.name];
      } //Register Skill


      this.packet.push(this.state.skill); //Energy Management

      energyManagement(state.skill, "substract"); //Button Management
      // buttonManagement(state.skill, "onSkill");

      buttonManagement(state.skill, "onTarget"); //State Management

      state.button.ally[state.skill.heroIndex].onSkill = true; //Clean Skill Buffer

      state.skill = {
        offense: null,
        skill: null,
        skillId: null,
        target: null,
        aim: null,
        heroIndex: null
      };
    },
    onAttack: function onAttack(payload) {
      //Sound
      this.$refs.soundClick.play();
      this.state.energy.modal = true;
    },
    onDescription: function onDescription(payload) {
      var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (option === undefined) {
        option = "ally";
      } //Sound


      this.$refs.soundClick.play(); //Define

      var config = {
        nameId: payload.nameId,
        skill: payload.skillIndex,
        heroIndex: payload.heroIndex,
        option: option
      };
      var skill = this.source[config.option][config.heroIndex].skill[config.skill]; //Map Description

      var map = {
        name: skill.name,
        energy: {
          a: skill.energy.a,
          i: skill.energy.i,
          s: skill.energy.s,
          w: skill.energy.w,
          r: skill.energy.r,
          total: skill.energy.a + skill.energy.i + skill.energy.s + skill.energy.w + skill.energy.r
        },
        description: skill.description,
        classes: skill.classes,
        cooldown: skill.cooldown
      }; //Buffer Description

      var state = this.state;
      state.description = {
        nameId: config.nameId,
        skill: config.skill,
        heroIndex: config.heroIndex,
        map: map
      };
    },
    onStatus: function onStatus(payload) {
      console.log(payload);

      var status = _.concat(payload.onAttack, payload.onReceive, payload.onState, payload.onSelf);

      console.log(status);

      var group = _.groupBy(status, "nameId");

      console.log(group);

      var subgroup = _.toArray(group).map(function (x) {
        return _.toArray(_.groupBy(x, "skillIndex"));
      });

      var prep = subgroup.map(function (x) {
        return x[0];
      });
      var final = prep.map(function (x) {
        console.log(x[0]);
        var info = x[0];
        return {
          nameId: info.nameId,
          status: info.skillIndex,
          val: x
        };
      });
      console.log(prep);
      console.log(final);
      return final; // let subgroup = group.map(x => _.groupBy(x, "skillIndex"));
    },
    onGetImage: function onGetImage(payload, option) {
      if (option === "packet") {
        var index = this.source.ally.findIndex(function (x) {
          return x.name === payload.offense;
        });
        var nameId = this.source.ally[index].nameId;
        return "/assets/character/" + nameId.slice(0, -1) + "/skill" + (payload.skill + 1) + "/avatar.jpg";
      } else if (option === "char") {
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/avatar.jpg";
      } else if (option === "skill") {
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/skill" + (payload.skill + 1) + "/avatar.jpg";
      } else if (option === "status") {
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/skill" + payload.skill + "/avatar.jpg";
      } else if (option === "targeting") {
        var _index = this.packet.findIndex(function (x) {
          return x.offense === payload.name;
        });

        var skillId = this.packet[_index].skillId;
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/skill" + (skillId + 1) + "/avatar.jpg";
      }
    },
    targetingCue: function targetingCue(payload, nameId) {
      var name = payload;
      var index = this.packet.findIndex(function (x) {
        return x.offense === payload;
      });
      var packet = this.packet[index];
      var result = {
        name: name,
        skillIndex: packet.skill,
        skillId: packet.skillId,
        heroIndex: packet.heroIndex,
        target: packet.target
      };

      if (nameId) {
        result.nameId = nameId;
      }

      console.log(result);
      return result;
    }
  }
});
"use strict";

function energyManagement(temporary, option) {
  var energy = temporary.energy ? temporary.energy : app.source.energy.ally;
  var skill = temporary.skillBind ? temporary.skillBind : app.source.ally[temporary.heroIndex].skill[temporary.skill].energy;
  var total = {
    energy: energy.a + energy.i + energy.s + energy.w,
    skill: skill.a + skill.i + skill.s + skill.w
  };

  if (option === "substract") {
    if (skill.a > 0) {
      energy.a -= skill.a;
      energy.r -= skill.a;
    }

    if (skill.i > 0) {
      energy.i -= skill.i;
      energy.r -= skill.i;
    }

    if (skill.s > 0) {
      energy.s -= skill.s;
      energy.r -= skill.s;
    }

    if (skill.w > 0) {
      energy.w -= skill.w;
      energy.r -= skill.w;
    }

    if (skill.r > 0) {
      energy.r -= skill.r;
      app.state.energy.random += skill.r;
    }
  } else if (option === "add") {
    if (skill.a > 0) {
      energy.a += skill.a;
      energy.r += skill.a;
    }

    if (skill.i > 0) {
      energy.i += skill.i;
      energy.r += skill.i;
    }

    if (skill.s > 0) {
      energy.s += skill.s;
      energy.r += skill.s;
    }

    if (skill.w > 0) {
      energy.w += skill.w;
      energy.r += skill.w;
    }

    if (skill.r > 0) {
      energy.r += skill.r;
      app.state.energy.random -= skill.r;
    }
  } else if (option === "check") {
    var active = true;

    if (total.energy >= total.skill) {
      var count = [true, true, true, true, true];

      if (skill.a >= 0) {
        count[0] = energy.a >= skill.a ? false : true;
      }

      if (skill.i >= 0) {
        count[1] = energy.i >= skill.i ? false : true;
      }

      if (skill.s >= 0) {
        count[2] = energy.s >= skill.s ? false : true;
      }

      if (skill.w >= 0) {
        count[3] = energy.w >= skill.w ? false : true;
      }

      if (skill.r >= 0) {
        count[4] = energy.r >= total.skill + skill.r ? false : true;
      }

      if (count.filter(function (x) {
        return x === false;
      }).length === 5) {
        active = false;
      } else {
        active = true;
      }
    }

    return active;
  }
}

function buttonManagement(payload, option) {
  //Target Button
  if (option !== "onSelf") {
    if (payload.aim === "enemy") {
      app.state.button.enemy.forEach(function (x) {
        //Define
        var skill = app.source.ally[payload.heroIndex].skill[payload.skill];
        var enemyStatus = app.source.enemy[x.index].status; //Invulnerability

        var state = enemyStatus.onState;
        var invulnerable = invulnerableManagement(state, skill); //Disable

        x.button = x.disabled || invulnerable ? true : !x.button; //Ignore

        var ignore = ignoreManagement(state, skill);
        console.log(ignore); //Prevent Invulnerability

        if (option === "onSkill" && enemyStatus.onState.some(function (x) {
          return x.type === "disableDrIv";
        }) && ignore === false) {
          x.button = false;
        } //Marking


        if (payload.marking === true) {
          var skillName = skill.name;
          var marking = enemyStatus.onReceive.some(function (x) {
            return x.name === skillName;
          }) || enemyStatus.onState.some(function (x) {
            return x.name === skillName;
          });

          if (marking === true) {
            x.button = true;
          }
        }
      });
    } else if (payload.aim === "enemylock") {
      app.state.button.enemy.forEach(function (x) {
        //Define
        var skill = app.source.ally[payload.heroIndex].skill[payload.skill];
        var enemyStatus = app.source.enemy[x.index].status;
        var lock = enemyStatus.onState.some(function (x) {
          return x.type === "state" && x.info === skill.name;
        });

        if (lock === true) {
          //Invulnerability
          var state = enemyStatus.onState;
          var invulnerable = invulnerableManagement(state, skill); //Disable

          x.button = x.disabled || invulnerable ? true : !x.button; //Ignore

          var ignore = ignoreManagement(state, skill);
          console.log(invulnerable); //Prevent Invulnerability

          if (option === "onSkill" && enemyStatus.onState.some(function (x) {
            return x.type === "disableDrIv";
          }) && ignore === false) {
            x.button = false;
          } //Marking


          if (payload.marking === true) {
            var skillName = skill.name;
            var marking = enemyStatus.onReceive.some(function (x) {
              return x.name === skillName;
            }) || enemyStatus.onState.some(function (x) {
              return x.name === skillName;
            });

            if (marking === true) {
              x.button = true;
            }
          }
        }
      });
    } else if (payload.aim === "allenemy" || payload.aim === "randomenemy" || payload.aim === "allenemyallally") {
      app.state.button.enemy.forEach(function (x) {
        //Define
        var skill = app.source.ally[payload.heroIndex].skill[payload.skill];
        var enemyStatus = app.source.enemy[x.index].status; //Invulnerability

        var state = enemyStatus.onState;
        var invulnerable = invulnerableManagement(state, skill); //Disable

        x.button = x.disabled || invulnerable ? true : !x.button; //Prevent Invulnerability

        if (option === "onSkill" && enemyStatus.onState.some(function (x) {
          return x.type === "disableDrIv";
        })) {
          x.button = false;
        }
      });
    } else if (payload.aim === "ally" || payload.aim === "allally") {
      app.state.button.ally.forEach(function (x) {
        return x.button = x.disabled ? true : !x.button;
      });
    } else if (payload.aim === "otherally") {
      app.state.button.ally.forEach(function (x) {
        var name = app.state.button.ally[payload.heroIndex].name;

        if (x.name !== name) {
          x.button = x.disabled ? true : !x.button;
        }
      });
    } else if (payload.aim === "self") {
      var ally = app.state.button.ally[payload.heroIndex];
      ally.button = ally.disabled ? true : !ally.button;
    }
  } //Skill Button


  if (option === "onTarget") {
    console.log("onSkill");
    app.state.button.ally.forEach(function (x) {
      if (x.onSkill === false) {
        x.skill.forEach(function (s) {
          s.button = true;

          if (x.name === payload.offense && s.name === app.source.ally[payload.heroIndex].skill[payload.skill].name) {
            s.button = false;
          }
        });
      }
    });
  }

  if (option === "onCancel") {
    console.log("onCancel");
    app.state.button.ally.forEach(function (x) {
      if (x.onSkill === false || x.name === payload.offense) {
        x.skill.forEach(function (s) {
          s.button = s.disabled ? true : false;

          if (x.name === payload.offense && s.name === app.source.ally[payload.heroIndex].skill[payload.skill].name) {
            s.button = false;
          }
        });
      }
    });
  } else if (option === "onTarget") {
    console.log("onTarget");
    app.state.button.ally.forEach(function (x) {
      var index = app.packet.findIndex(function (s) {
        return s.offense === x.name;
      });

      if (index < 0) {
        x.skill.forEach(function (s) {
          s.button = s.disabled ? true : false;
        });
      }
    });
  } else if (option === "onSelf") {
    console.log("onSelf");
    app.state.button.ally[payload.heroIndex].skill.forEach(function (s) {
      s.button = s.disabled ? true : false;
    });
  } //Energy Management


  if (option !== "onSkill") {
    app.state.button.ally.forEach(function (x, xi) {
      if (x.onSkill === false && x.name !== payload.offense) {
        console.log(x.name);
        console.log(option);
        x.skill.forEach(function (s, si) {
          var energy = energyManagement({
            heroIndex: xi,
            skill: si
          }, "check");
          s.button = s.disabled || energy ? true : false;

          if (x.name === payload.offense && s.name === app.source.ally[payload.heroIndex].skill[payload.skill].name) {
            s.button = false;
          }
        });
      }

      if ((option === "onSelf" || option === "onCancel") && x.name === payload.offense) {
        x.skill.forEach(function (s, si) {
          var energy = energyManagement({
            heroIndex: xi,
            skill: si
          }, "check");
          s.button = s.disabled || energy ? true : false;
        });
      }
    });
  }
}

function stunManagement(onState, skill) {
  var stun = onState.map(function (x) {
    if (x.type === "stun") {
      var ignore = ignoreManagement(onState, x);

      var intersect = _.intersection(x.classes, skill.classes);

      var evaluate;

      if (x.info === "inclusive") {
        evaluate = intersect.length > 0 ? true : false;
      } else if (x.info === "declusive") {
        evaluate = intersect.length === 0 ? true : false;
      }

      if (evaluate && !ignore) {
        return true;
      } else {
        return false;
      }
    }
  });

  if (stun.filter(function (x) {
    return x === true;
  }).length > 0) {
    return true;
  } else {
    return false;
  }
}

function invulnerableManagement(onState, skill) {
  var invulnerable = onState.map(function (x) {
    if (x.type === "invulnerable") {
      var ignoreInvul = skill.ignoreInvul;

      var intersect = _.intersection(x.classes, skill.classes);

      var evaluate;

      if (x.info === "inclusive") {
        evaluate = intersect.length > 0 ? true : false;
      } else if (x.info === "declusive") {
        evaluate = intersect.length === 0 ? true : false;
      }

      if (evaluate && !ignoreInvul) {
        return true;
      } else {
        return false;
      }
    }
  });

  if (invulnerable.filter(function (x) {
    return x === true;
  }).length > 0) {
    return true;
  } else {
    return false;
  }
}

function ignoreManagement(onState, skill) {
  var ignore = onState.map(function (x) {
    if (x.type === "ignore") {
      var intersect = _.intersection(x.classes, skill.classes);

      var evaluate;

      if (x.info === "inclusive") {
        evaluate = intersect.length > 0 ? true : false;
      } else if (x.info === "declusive") {
        evaluate = intersect.length === 0 ? true : false;
      }

      if (evaluate) {
        return true;
      } else {
        return false;
      }
    }
  });

  if (ignore.filter(function (x) {
    return x === true;
  }).length > 0) {
    return true;
  } else {
    return false;
  }
}
"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function vueBind(payload) {
  var username = getCookie("username");

  if (payload.team.teamEven !== username && payload.team.teamOdd !== username) {
    console.log(payload.team);
    return;
  }

  console.log(payload);
  var ally = payload.team.teamEven === username ? "teamEven" : "teamOdd";
  var enemy = payload.team.teamEven === username ? "teamOdd" : "teamEven";
  var turn = ally === "teamEven" ? 0 : 1;
  var myTurn = payload.turn % 2 === turn ? true : false;

  if (myTurn === true) {
    app.$refs.soundStartTurn.play();
  } // if (payload.winner.state === true && payload.winner.name === username) {
  // } else if (
  //   payload.winner.state === true &&
  //   payload.winner.name !== username
  // ) {
  //   app.$refs.soundLose.play();
  // }


  var store = {
    energy: {
      ally: payload.energy[ally],
      enemy: payload.energy[enemy]
    },
    ally: payload[ally].map(function (x) {
      return _objectSpread({}, x, {
        indicator: statusView(x.name, x.status)
      });
    }),
    enemy: payload[enemy].map(function (x) {
      return _objectSpread({}, x, {
        indicator: statusView(x.name, x.status)
      });
    }),
    turn: payload.turn,
    myTurn: myTurn,
    room: payload.room,
    meta: {
      myName: payload.team[ally],
      theirName: payload.team[enemy]
    }
  };
  store.energy.ally.r = store.energy.ally.a + store.energy.ally.i + store.energy.ally.s + store.energy.ally.w;
  console.log(store);
  var button = {
    ally: store.ally.map(function (x) {
      // let disabled = x.status.onState.findIndex(x => x.type === 'stun') > -1 || x.hp <= 0 ? true : false
      var disabled = x.hp <= 0 ? true : false; // let stun = x.status.onState.some(x => x.type === "stun") ? true : false;

      return {
        name: x.name,
        button: true,
        onSkill: false,
        disabled: disabled,
        skill: x.skill.map(function (s) {
          // console.log(s.type);
          var energy = energyManagement({
            energy: store.energy.ally,
            skillBind: s.energy
          }, "check");
          var stun = stunManagement(x.status.onState, s); // let disableDrVr =
          //   s.type === "invulnerable" &&
          //   x.status.onState.some(x => x.type === "disableDrIv")
          //     ? true
          //     : false;

          var disabled = stun || s.required || s.state === "cooldown" || myTurn === false || x.hp <= 0 ? true : false;
          return {
            name: s.name,
            disabled: disabled,
            button: disabled || energy ? true : false
          };
        })
      };
    }),
    enemy: store.enemy.map(function (x, i) {
      // let disabled =
      //   x.status.onState.some(x => x.type === "invulnerable") || x.hp <= 0
      //     ? true
      //     : false;
      var disabled = x.hp <= 0 ? true : false;
      return {
        name: x.name,
        index: i,
        disabled: disabled,
        button: true
      };
    })
  };
  app.source = store;
  app.state.button = button;
  app.state.timer.turn = 100;
  app.state.winner = payload.winner;
}

function statusView(name, payload) {
  // console.log(name, payload);
  var status = _.concat(payload.onAttack, payload.onReceive, payload.onState, payload.onSelf);

  var groupByNameId = _.groupBy(status, "nameId");

  var valuesByNameId = _.values(groupByNameId);

  var groupBySkillIndex = valuesByNameId.map(function (x) {
    return _.groupBy(x, "skillIndex");
  });

  var valuesBySkillIndex = _.values(groupBySkillIndex);

  var concatValues = [];
  valuesBySkillIndex.forEach(function (x) {
    concatValues = concatValues.concat(_.values(x));
  });
  var final = concatValues.map(function (x) {
    var info = x[0];
    return {
      name: info.name,
      nameId: info.nameId,
      skillIndex: info.skillIndex,
      active: info.active,
      val: x
    };
  });
  return final;
}
"use strict";

function initiate() {
  var url = window.location.href.split("/");
  var room = url[url.length - 1];

  if (room !== "") {
    socket.emit("initiate", {
      room: room
    });
    chat.emit("gameInitiate", {
      room: room
    });
  } else {// window.location.replace('/');
  }
}

initiate();
setInterval(function () {
  if (app.source.turn == undefined || app.state.winner.state !== false) {
    return;
  }

  if (app.state.timer.turn > 0) {
    app.state.timer.turn -= 2.2;
  } else if (app.state.timer.turn <= 0 && app.source.myTurn === true) {// app.packet = app.packet.filter(x => x.skill !== null && x.offense !== '' && x.target !== '' && x.aim !== '' && x.heroIndex !== null)
    // socket.emit('sequence', {
    //     packet: app.packet,
    //     room: app.source.room
    // })
    // app.packet = []
  }
}, 1000);

window.onfocus = function () {
  document.title = "Anime Rumble";
};

function scrollChat() {
  var container = app.$el.querySelector("#chat");
  container.scrollTop = container.scrollHeight;
}
"use strict";

socket.on("apply", function (payload) {
  document.title = "(!) Anime Rumble";
  vueBind(payload);
});
socket.on("noMatch", function (payload) {
  console.log("none");
  window.location.replace("/");
});
chat.on("chat", function (payload) {
  if (payload.channel === "ingame") {
    app.chat.push(payload.message);

    if (app.chatChannel !== "ingame") {
      app.chatNotif.ingame = true;
    } else {
      scrollChat();
    }
  } else if (payload.channel === "lobby") {
    app.lobbychat.push(payload.message);

    if (app.chatChannel !== "lobby") {
      app.chatNotif.lobby = true;
    } else {
      scrollChat();
    }
  }
});
"use strict";

function getParameterName(name, url) {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, "\\$&");
  var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
      results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return "";
  return decodeURIComponent(results[2].replace(/\+/g, " "));
}

var setCookie = function setCookie(name, value) {
  var days = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "/";
  var expires = new Date(Date.now() + days * 864e5).toGMTString();
  document.cookie = name + "=" + encodeURIComponent(value) + "; expires=" + expires + "; path=" + path;
};

var getCookie = function getCookie(name) {
  return document.cookie.split("; ").reduce(function (r, v) {
    var parts = v.split("=");
    return parts[0] === name ? decodeURIComponent(parts[1]) : r;
  }, "");
};

var deleteCookie = function deleteCookie(name, path) {
  setCookie(name, "", -1, path);
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwLmpzIiwidnVlLmpzIiwibWFuYWdlbWVudC5qcyIsInJlbmRlcmVyLmpzIiwiZ2VuZXJhbC5qcyIsInNvY2tldC5qcyIsImhlbHBlci5qcyJdLCJuYW1lcyI6WyJzb2NrZXQiLCJpbyIsImNoYXQiLCJWdWUiLCJ1c2UiLCJWVG9vbHRpcCIsImFwcCIsImVsIiwiZGF0YSIsImxvYmJ5Y2hhdCIsImNoYXRTZW5kIiwiY2hhdENoYW5uZWwiLCJjaGF0Tm90aWYiLCJsb2JieSIsImluZ2FtZSIsInNvdXJjZSIsImVuZXJneSIsImFsbHkiLCJtZXRhIiwicGFja2V0Iiwic3RhdGUiLCJza2lsbCIsIm9mZmVuc2UiLCJ0YXJnZXQiLCJhaW0iLCJ0aW1lciIsInR1cm4iLCJvblNraWxsIiwiYnV0dG9uIiwiZGVzY3JpcHRpb24iLCJ3aW5uZXIiLCJuYW1lIiwibW9kYWwiLCJyYW5kb20iLCJleGNoYW5nZSIsInVzZWQiLCJ2YWwiLCJzaG93TW9kYWwiLCJtZXRob2RzIiwib25TdXJyZW5kZXIiLCJjb25zb2xlIiwibG9nIiwiZW1pdCIsInJvb20iLCJzY3JvbGxDaGF0Iiwic2V0VGltZW91dCIsIm9uQ2hhdCIsImNoYW5uZWwiLCJtZXNzYWdlIiwib25FeGNoYW5nZSIsImUiLCIkcmVmcyIsInNvdW5kQ2xpY2siLCJwbGF5IiwiciIsImNvc3QiLCJmb3JFYWNoIiwieCIsInhpIiwicyIsInNpIiwiZW5lcmd5TWFuYWdlbWVudCIsImhlcm9JbmRleCIsImRpc2FibGVkIiwiYnV0dG9uTWFuYWdlbWVudCIsInNraWxsSWQiLCJvbkRvbmUiLCJzb3VuZEVuZFR1cm4iLCJmaWx0ZXIiLCJ1bnNoaWZ0IiwibXNnIiwicGF5bG9hZCIsIm1hcmtpbmciLCJza2lsbEluZGV4IiwidGVtcG9yYXJ5IiwiaXNPblNraWxsIiwib25UYXJnZXQiLCJlbmVteSIsIm1hcCIsImNvbmNhdCIsInB1c2giLCJvbkF0dGFjayIsIm9uRGVzY3JpcHRpb24iLCJvcHRpb24iLCJ1bmRlZmluZWQiLCJjb25maWciLCJuYW1lSWQiLCJhIiwiaSIsInciLCJ0b3RhbCIsImNsYXNzZXMiLCJjb29sZG93biIsIm9uU3RhdHVzIiwic3RhdHVzIiwiXyIsIm9uUmVjZWl2ZSIsIm9uU3RhdGUiLCJvblNlbGYiLCJncm91cCIsImdyb3VwQnkiLCJzdWJncm91cCIsInRvQXJyYXkiLCJwcmVwIiwiZmluYWwiLCJpbmZvIiwib25HZXRJbWFnZSIsImluZGV4IiwiZmluZEluZGV4Iiwic2xpY2UiLCJ0YXJnZXRpbmdDdWUiLCJyZXN1bHQiLCJza2lsbEJpbmQiLCJhY3RpdmUiLCJjb3VudCIsImxlbmd0aCIsImVuZW15U3RhdHVzIiwiaW52dWxuZXJhYmxlIiwiaW52dWxuZXJhYmxlTWFuYWdlbWVudCIsImlnbm9yZSIsImlnbm9yZU1hbmFnZW1lbnQiLCJzb21lIiwidHlwZSIsInNraWxsTmFtZSIsImxvY2siLCJzdHVuTWFuYWdlbWVudCIsInN0dW4iLCJpbnRlcnNlY3QiLCJpbnRlcnNlY3Rpb24iLCJldmFsdWF0ZSIsImlnbm9yZUludnVsIiwidnVlQmluZCIsInVzZXJuYW1lIiwiZ2V0Q29va2llIiwidGVhbSIsInRlYW1FdmVuIiwidGVhbU9kZCIsIm15VHVybiIsInNvdW5kU3RhcnRUdXJuIiwic3RvcmUiLCJpbmRpY2F0b3IiLCJzdGF0dXNWaWV3IiwibXlOYW1lIiwidGhlaXJOYW1lIiwiaHAiLCJyZXF1aXJlZCIsImdyb3VwQnlOYW1lSWQiLCJ2YWx1ZXNCeU5hbWVJZCIsInZhbHVlcyIsImdyb3VwQnlTa2lsbEluZGV4IiwidmFsdWVzQnlTa2lsbEluZGV4IiwiY29uY2F0VmFsdWVzIiwiaW5pdGlhdGUiLCJ1cmwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJzcGxpdCIsInNldEludGVydmFsIiwib25mb2N1cyIsImRvY3VtZW50IiwidGl0bGUiLCJjb250YWluZXIiLCIkZWwiLCJxdWVyeVNlbGVjdG9yIiwic2Nyb2xsVG9wIiwic2Nyb2xsSGVpZ2h0Iiwib24iLCJyZXBsYWNlIiwiZ2V0UGFyYW1ldGVyTmFtZSIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzZXRDb29raWUiLCJ2YWx1ZSIsImRheXMiLCJwYXRoIiwiZXhwaXJlcyIsIkRhdGUiLCJub3ciLCJ0b0dNVFN0cmluZyIsImNvb2tpZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlZHVjZSIsInYiLCJwYXJ0cyIsImRlbGV0ZUNvb2tpZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTQyxHQUFHLE9BQUgsQ0FBYjtBQUNBLElBQUlDLE9BQU9ELEdBQUcsT0FBSCxDQUFYOzs7QUNEQUUsSUFBSUMsR0FBSixDQUFRQyxRQUFSO0FBQ0EsSUFBSUMsTUFBTSxJQUFJSCxHQUFKLENBQVE7QUFDaEJJLE1BQUksTUFEWTtBQUVoQkMsUUFBTTtBQUNKTixVQUFNLEVBREY7QUFFSk8sZUFBVyxFQUZQO0FBR0pDLGNBQVUsRUFITjtBQUlKQyxpQkFBYSxRQUpUO0FBS0pDLGVBQVc7QUFDVEMsYUFBTyxLQURFO0FBRVRDLGNBQVE7QUFGQyxLQUxQO0FBU0pDLFlBQVE7QUFDTkMsY0FBUTtBQUNOQyxjQUFNO0FBREEsT0FERjtBQUlOQyxZQUFNO0FBSkEsS0FUSjtBQWVKQyxZQUFRLEVBZko7QUFnQkpDLFdBQU87QUFDTEMsYUFBTztBQUNMQyxpQkFBUyxJQURKO0FBRUxELGVBQU8sSUFGRjtBQUdMRSxnQkFBUSxJQUhIO0FBSUxDLGFBQUs7QUFKQSxPQURGO0FBT0xDLGFBQU87QUFDTEMsY0FBTTtBQURELE9BUEY7QUFVTEMsZUFBUyxLQVZKO0FBV0xDLGNBQVEsRUFYSDtBQVlMQyxtQkFBYSxJQVpSO0FBYUxDLGNBQVE7QUFDTlYsZUFBTyxLQUREO0FBRU5XLGNBQU07QUFGQSxPQWJIO0FBaUJMZixjQUFRO0FBQ05nQixlQUFPLEtBREQ7QUFFTkMsZ0JBQVE7QUFGRixPQWpCSDtBQXFCTEMsZ0JBQVU7QUFDUkYsZUFBTyxLQURDO0FBRVJHLGNBQU0sS0FGRTtBQUdS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QyxZQUFZLFNBQVpBLFNBQVksT0FBUTtBQUN4QixTQUFPMkIsU0FBU3VCLE1BQVQsQ0FBZ0IxQixLQUFoQixDQUFzQixJQUF0QixFQUE0QjRCLE1BQTVCLENBQW1DLFVBQUNuSSxDQUFELEVBQUlvSSxDQUFKLEVBQVU7QUFDbEQsUUFBTUMsUUFBUUQsRUFBRTdCLEtBQUYsQ0FBUSxHQUFSLENBQWQ7QUFDQSxXQUFPOEIsTUFBTSxDQUFOLE1BQWE1SixJQUFiLEdBQW9CK0ksbUJBQW1CYSxNQUFNLENBQU4sQ0FBbkIsQ0FBcEIsR0FBbURySSxDQUExRDtBQUNELEdBSE0sRUFHSixFQUhJLENBQVA7QUFJRCxDQUxEOztBQU9BLElBQU1zSSxlQUFlLFNBQWZBLFlBQWUsQ0FBQzdKLElBQUQsRUFBT21KLElBQVAsRUFBZ0I7QUFDbkNILFlBQVVoSixJQUFWLEVBQWdCLEVBQWhCLEVBQW9CLENBQUMsQ0FBckIsRUFBd0JtSixJQUF4QjtBQUNELENBRkQiLCJmaWxlIjoiZ2FtZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgc29ja2V0ID0gaW8oXCIvZ2FtZVwiKTtcbmxldCBjaGF0ID0gaW8oXCIvY2hhdFwiKTtcbiIsIlZ1ZS51c2UoVlRvb2x0aXApO1xubGV0IGFwcCA9IG5ldyBWdWUoe1xuICBlbDogXCIjYXBwXCIsXG4gIGRhdGE6IHtcbiAgICBjaGF0OiBbXSxcbiAgICBsb2JieWNoYXQ6IFtdLFxuICAgIGNoYXRTZW5kOiBcIlwiLFxuICAgIGNoYXRDaGFubmVsOiBcImluZ2FtZVwiLFxuICAgIGNoYXROb3RpZjoge1xuICAgICAgbG9iYnk6IGZhbHNlLFxuICAgICAgaW5nYW1lOiBmYWxzZVxuICAgIH0sXG4gICAgc291cmNlOiB7XG4gICAgICBlbmVyZ3k6IHtcbiAgICAgICAgYWxseToge31cbiAgICAgIH0sXG4gICAgICBtZXRhOiB7fVxuICAgIH0sXG4gICAgcGFja2V0OiBbXSxcbiAgICBzdGF0ZToge1xuICAgICAgc2tpbGw6IHtcbiAgICAgICAgb2ZmZW5zZTogbnVsbCxcbiAgICAgICAgc2tpbGw6IG51bGwsXG4gICAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgICAgYWltOiBudWxsXG4gICAgICB9LFxuICAgICAgdGltZXI6IHtcbiAgICAgICAgdHVybjogMTAwXG4gICAgICB9LFxuICAgICAgb25Ta2lsbDogZmFsc2UsXG4gICAgICBidXR0b246IHt9LFxuICAgICAgZGVzY3JpcHRpb246IG51bGwsXG4gICAgICB3aW5uZXI6IHtcbiAgICAgICAgc3RhdGU6IGZhbHNlLFxuICAgICAgICBuYW1lOiBcIlwiXG4gICAgICB9LFxuICAgICAgZW5lcmd5OiB7XG4gICAgICAgIG1vZGFsOiBmYWxzZSxcbiAgICAgICAgcmFuZG9tOiAwXG4gICAgICB9LFxuICAgICAgZXhjaGFuZ2U6IHtcbiAgICAgICAgbW9kYWw6IGZhbHNlLFxuICAgICAgICB1c2VkOiBmYWxzZSxcbiAgICAgICAgZW5lcmd5OiB7fSxcbiAgICAgICAgdmFsOiBcIlwiXG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93TW9kYWw6IHRydWVcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIG9uU3VycmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwic3VycmVuZGVyXCIpO1xuICAgICAgc29ja2V0LmVtaXQoXCJzdXJyZW5kZXJcIiwgeyByb29tOiB0aGlzLnNvdXJjZS5yb29tIH0pO1xuICAgIH0sXG4gICAgc2Nyb2xsQ2hhdDogZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2Nyb2xsQ2hhdCgpO1xuICAgICAgfSwgMTAwKTtcbiAgICB9LFxuICAgIG9uQ2hhdDogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgY2hhbm5lbCA9IHRoaXMuY2hhdENoYW5uZWwgPT09IFwiaW5nYW1lXCIgPyBcImluZ2FtZVwiIDogXCJsb2JieVwiO1xuXG4gICAgICBsZXQgcGFja2V0ID0ge1xuICAgICAgICBjaGFubmVsOiBjaGFubmVsLFxuICAgICAgICByb29tOiB0aGlzLnNvdXJjZS5yb29tLFxuICAgICAgICBtZXNzYWdlOiB0aGlzLmNoYXRTZW5kXG4gICAgICB9O1xuICAgICAgY2hhdC5lbWl0KFwiY2hhdFwiLCBwYWNrZXQpO1xuICAgICAgdGhpcy5jaGF0U2VuZCA9IFwiXCI7XG4gICAgfSxcbiAgICBvbkV4Y2hhbmdlOiBmdW5jdGlvbihlKSB7XG4gICAgICAvL1NvdW5kXG4gICAgICB0aGlzLiRyZWZzLnNvdW5kQ2xpY2sucGxheSgpO1xuXG4gICAgICBsZXQgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgdGhpcy5zb3VyY2UuZW5lcmd5LmFsbHkgPSBlLmVuZXJneTtcbiAgICAgIHRoaXMuc291cmNlLmVuZXJneS5hbGx5LnIgPVxuICAgICAgICB0aGlzLnNvdXJjZS5lbmVyZ3kuYWxseS5yIC0gdGhpcy5zdGF0ZS5lbmVyZ3kucmFuZG9tO1xuICAgICAgc3RhdGUuZXhjaGFuZ2UuZW5lcmd5ID0gZS5jb3N0O1xuICAgICAgc3RhdGUuZXhjaGFuZ2UubW9kYWwgPSBmYWxzZTtcbiAgICAgIHN0YXRlLmV4Y2hhbmdlLnVzZWQgPSB0cnVlO1xuICAgICAgc3RhdGUuZXhjaGFuZ2UudmFsID0gZS5leGNoYW5nZTtcblxuICAgICAgc3RhdGUuYnV0dG9uLmFsbHkuZm9yRWFjaCgoeCwgeGkpID0+IHtcbiAgICAgICAgaWYgKHgub25Ta2lsbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyh4Lm5hbWUpO1xuICAgICAgICAgIHguc2tpbGwuZm9yRWFjaCgocywgc2kpID0+IHtcbiAgICAgICAgICAgIGxldCBlbmVyZ3kgPSBlbmVyZ3lNYW5hZ2VtZW50KFxuICAgICAgICAgICAgICB7IGhlcm9JbmRleDogeGksIHNraWxsOiBzaSB9LFxuICAgICAgICAgICAgICBcImNoZWNrXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBzLmJ1dHRvbiA9IHMuZGlzYWJsZWQgfHwgZW5lcmd5ID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZW5lcmd5LCBzLmRpc2FibGVkLCBzLmJ1dHRvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvL0NsZWFuIFNraWxsIEJ1ZmZlclxuICAgICAgaWYgKHN0YXRlLnNraWxsLm9mZmVuc2UgIT09IG51bGwgJiYgc3RhdGUuc2tpbGwudGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgIC8vU3dpdGNoIENob2ljZVxuICAgICAgICAvL0J1dHRvbiBNYW5hZ2VtZW50XG4gICAgICAgIGJ1dHRvbk1hbmFnZW1lbnQoc3RhdGUuc2tpbGwsIFwib25DYW5jZWxcIik7XG4gICAgICAgIC8vQ2xlYW4gQnVmZmVyXG4gICAgICAgIHN0YXRlLnNraWxsID0ge1xuICAgICAgICAgIG9mZmVuc2U6IG51bGwsXG4gICAgICAgICAgc2tpbGw6IG51bGwsXG4gICAgICAgICAgc2tpbGxJZDogbnVsbCxcbiAgICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgICAgYWltOiBudWxsLFxuICAgICAgICAgIGhlcm9JbmRleDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgb25Eb25lOiBmdW5jdGlvbihlKSB7XG4gICAgICAvL1NvdW5kXG4gICAgICB0aGlzLiRyZWZzLnNvdW5kRW5kVHVybi5wbGF5KCk7XG5cbiAgICAgIC8vRGVmaW5lXG4gICAgICBsZXQgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgbGV0IHBhY2tldCA9IGUucGFja2V0O1xuXG4gICAgICAvL09yZ2FuaXplXG4gICAgICBzdGF0ZS5lbmVyZ3kubW9kYWwgPSBmYWxzZTtcbiAgICAgIHBhY2tldCA9IHBhY2tldC5maWx0ZXIoXG4gICAgICAgIHggPT5cbiAgICAgICAgICB4LnNraWxsICE9PSBudWxsICYmXG4gICAgICAgICAgeC5vZmZlbnNlICE9PSBudWxsICYmXG4gICAgICAgICAgeC50YXJnZXQgIT09IG51bGwgJiZcbiAgICAgICAgICB4LmFpbSAhPT0gbnVsbCAmJlxuICAgICAgICAgIHguaGVyb0luZGV4ICE9PSBudWxsXG4gICAgICApO1xuICAgICAgcGFja2V0LnVuc2hpZnQoZS5lbmVyZ3kpO1xuICAgICAgaWYgKHN0YXRlLmV4Y2hhbmdlLnVzZWQgPT09IHRydWUpIHtcbiAgICAgICAgcGFja2V0LnVuc2hpZnQoXG4gICAgICAgICAgeyBtc2c6IFwiZXhjaGFuZ2VcIiwgdmFsOiBzdGF0ZS5leGNoYW5nZS52YWwgfSxcbiAgICAgICAgICBzdGF0ZS5leGNoYW5nZS5lbmVyZ3lcbiAgICAgICAgKTtcbiAgICAgICAgc3RhdGUuZXhjaGFuZ2UudXNlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvL1NlbmRcbiAgICAgIHNvY2tldC5lbWl0KFwic2VxdWVuY2VcIiwge1xuICAgICAgICBwYWNrZXQ6IHBhY2tldCxcbiAgICAgICAgcm9vbTogdGhpcy5zb3VyY2Uucm9vbVxuICAgICAgfSk7XG5cbiAgICAgIC8vUmVzZXRcbiAgICAgIHN0YXRlLmVuZXJneS5yYW5kb20gPSAwO1xuICAgICAgdGhpcy5wYWNrZXQgPSBbXTtcbiAgICAgIHN0YXRlLnNraWxsID0ge1xuICAgICAgICBvZmZlbnNlOiBudWxsLFxuICAgICAgICBza2lsbDogbnVsbCxcbiAgICAgICAgc2tpbGxJZDogbnVsbCxcbiAgICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgICBhaW06IG51bGwsXG4gICAgICAgIGhlcm9JbmRleDogbnVsbFxuICAgICAgfTtcbiAgICB9LFxuICAgIG9uU2tpbGw6IGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAgICAgIC8vRGVmaW5lIGFuZCBTd2l0Y2ggU3RhdGVcbiAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICBsZXQgbWFya2luZyA9IHRoaXMuc291cmNlLmFsbHlbcGF5bG9hZC5oZXJvSW5kZXhdLnNraWxsW1xuICAgICAgICBwYXlsb2FkLnNraWxsSW5kZXhcbiAgICAgIF0ubWFya2luZztcbiAgICAgIGxldCB0ZW1wb3JhcnkgPSB7XG4gICAgICAgIG9mZmVuc2U6IHBheWxvYWQubmFtZSxcbiAgICAgICAgc2tpbGw6IHBheWxvYWQuc2tpbGxJbmRleCxcbiAgICAgICAgc2tpbGxJZDogcGF5bG9hZC5za2lsbElkLFxuICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgIGFpbTogcGF5bG9hZC50YXJnZXQsXG4gICAgICAgIGhlcm9JbmRleDogcGF5bG9hZC5oZXJvSW5kZXgsXG4gICAgICAgIG1hcmtpbmc6IG1hcmtpbmdcbiAgICAgIH07XG5cbiAgICAgIC8vSXMgU2tpbGwgQ2hvc2VuP1xuICAgICAgbGV0IGlzT25Ta2lsbCA9IHN0YXRlLmJ1dHRvbi5hbGx5W3RlbXBvcmFyeS5oZXJvSW5kZXhdLm9uU2tpbGw7XG5cbiAgICAgIGlmIChcbiAgICAgICAgaXNPblNraWxsID09PSBmYWxzZSAmJlxuICAgICAgICBzdGF0ZS5za2lsbC5vZmZlbnNlID09PSBudWxsICYmXG4gICAgICAgIHN0YXRlLnNraWxsLnRhcmdldCA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIC8vRmlyc3QgQ2hvaWNlXG4gICAgICAgIC8vQnVmZmVyIFNraWxsXG4gICAgICAgIHN0YXRlLnNraWxsID0gdGVtcG9yYXJ5O1xuICAgICAgICAvL0J1dHRvbiBNYW5hZ2VtZW50XG4gICAgICAgIGJ1dHRvbk1hbmFnZW1lbnQodGVtcG9yYXJ5LCBcIm9uU2tpbGxcIik7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBpc09uU2tpbGwgPT09IGZhbHNlICYmXG4gICAgICAgIHN0YXRlLnNraWxsLm9mZmVuc2UgIT09IG51bGwgJiZcbiAgICAgICAgc3RhdGUuc2tpbGwudGFyZ2V0ID09PSBudWxsXG4gICAgICApIHtcbiAgICAgICAgLy9Td2l0Y2ggQ2hvaWNlXG4gICAgICAgIC8vQnV0dG9uIE1hbmFnZW1lbnRcbiAgICAgICAgYnV0dG9uTWFuYWdlbWVudChzdGF0ZS5za2lsbCwgXCJvbkNhbmNlbFwiKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgYnV0dG9uTWFuYWdlbWVudCh0ZW1wb3JhcnksIFwib25Ta2lsbFwiKTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgLy9CdWZmZXIgU2tpbGxcbiAgICAgICAgc3RhdGUuc2tpbGwgPSB0ZW1wb3Jhcnk7XG4gICAgICB9IGVsc2UgaWYgKGlzT25Ta2lsbCA9PT0gdHJ1ZSkge1xuICAgICAgICAvL0NhbmNlbCBDaG9pY2VcbiAgICAgICAgZW5lcmd5TWFuYWdlbWVudCh0ZW1wb3JhcnksIFwiYWRkXCIpO1xuICAgICAgICAvL0J1dHRvbiBNYW5hZ2VtZW50XG4gICAgICAgIGJ1dHRvbk1hbmFnZW1lbnQoc3RhdGUuc2tpbGwsIFwib25DYW5jZWxcIik7XG4gICAgICAgIGJ1dHRvbk1hbmFnZW1lbnQodGVtcG9yYXJ5LCBcIm9uU2VsZlwiKTtcbiAgICAgICAgdGhpcy5wYWNrZXQgPSB0aGlzLnBhY2tldC5maWx0ZXIoeCA9PiB4Lm9mZmVuc2UgIT09IHRlbXBvcmFyeS5vZmZlbnNlKTtcbiAgICAgICAgLy9DbGVhbiBTa2lsbCBCdWZmZXJcbiAgICAgICAgc3RhdGUuc2tpbGwgPSB7XG4gICAgICAgICAgb2ZmZW5zZTogbnVsbCxcbiAgICAgICAgICBza2lsbDogbnVsbCxcbiAgICAgICAgICBza2lsbElkOiBudWxsLFxuICAgICAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgICAgICBhaW06IG51bGwsXG4gICAgICAgICAgaGVyb0luZGV4OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIC8vU3RhdGUgTWFuYWdlbWVudFxuICAgICAgICBzdGF0ZS5idXR0b24uYWxseVt0ZW1wb3JhcnkuaGVyb0luZGV4XS5vblNraWxsID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBvblRhcmdldDogZnVuY3Rpb24ocGF5bG9hZCkge1xuICAgICAgLy9Tb3VuZFxuICAgICAgdGhpcy4kcmVmcy5zb3VuZENsaWNrLnBsYXkoKTtcblxuICAgICAgLy9EZWZpbmUgU3RhdGVcbiAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgIC8vQnVmZmVyIFNraWxsXG4gICAgICBpZiAoc3RhdGUuc2tpbGwuYWltID09PSBcImFsbGVuZW15XCIgfHwgc3RhdGUuc2tpbGwuYWltID09PSBcInJhbmRvbWVuZW15XCIpIHtcbiAgICAgICAgY29uc29sZS5sb2coc3RhdGUuYnV0dG9uLmVuZW15KTtcbiAgICAgICAgc3RhdGUuc2tpbGwudGFyZ2V0ID0gc3RhdGUuYnV0dG9uLmVuZW15XG4gICAgICAgICAgLmZpbHRlcih4ID0+IHguYnV0dG9uICE9PSB0cnVlICYmIHgubmFtZSAhPT0gcGF5bG9hZC5uYW1lKVxuICAgICAgICAgIC5tYXAoeCA9PiB4Lm5hbWUpO1xuICAgICAgICBzdGF0ZS5za2lsbC50YXJnZXQudW5zaGlmdChwYXlsb2FkLm5hbWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5za2lsbC5haW0gPT09IFwiYWxsYWxseVwiKSB7XG4gICAgICAgIHN0YXRlLnNraWxsLnRhcmdldCA9IHN0YXRlLmJ1dHRvbi5hbGx5Lm1hcCh4ID0+IHgubmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLnNraWxsLmFpbSA9PT0gXCJhbGxlbmVteWFsbGFsbHlcIikge1xuICAgICAgICBzdGF0ZS5za2lsbC50YXJnZXQgPSBzdGF0ZS5idXR0b24uZW5lbXlcbiAgICAgICAgICAuZmlsdGVyKHggPT4geC5idXR0b24gIT09IHRydWUgJiYgeC5uYW1lICE9PSBwYXlsb2FkLm5hbWUpXG4gICAgICAgICAgLm1hcCh4ID0+IHgubmFtZSk7XG4gICAgICAgIHN0YXRlLnNraWxsLnRhcmdldC51bnNoaWZ0KHBheWxvYWQubmFtZSk7XG4gICAgICAgIGxldCBhbGx5ID0gc3RhdGUuYnV0dG9uLmFsbHkubWFwKHggPT4geC5uYW1lKTtcbiAgICAgICAgc3RhdGUuc2tpbGwudGFyZ2V0ID0gc3RhdGUuc2tpbGwudGFyZ2V0LmNvbmNhdChhbGx5KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuc2tpbGwuYWltID09PSBcIm90aGVyYWxseVwiKSB7XG4gICAgICAgIHN0YXRlLnNraWxsLnRhcmdldCA9IHN0YXRlLmJ1dHRvbi5hbGx5XG4gICAgICAgICAgLmZpbHRlcih4ID0+IHgubmFtZSAhPT0gc3RhdGUuc2tpbGwub2ZmZW5zZSlcbiAgICAgICAgICAubWFwKHggPT4geC5uYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnNraWxsLnRhcmdldCA9IFtwYXlsb2FkLm5hbWVdO1xuICAgICAgfVxuICAgICAgLy9SZWdpc3RlciBTa2lsbFxuICAgICAgdGhpcy5wYWNrZXQucHVzaCh0aGlzLnN0YXRlLnNraWxsKTtcblxuICAgICAgLy9FbmVyZ3kgTWFuYWdlbWVudFxuICAgICAgZW5lcmd5TWFuYWdlbWVudChzdGF0ZS5za2lsbCwgXCJzdWJzdHJhY3RcIik7XG4gICAgICAvL0J1dHRvbiBNYW5hZ2VtZW50XG4gICAgICAvLyBidXR0b25NYW5hZ2VtZW50KHN0YXRlLnNraWxsLCBcIm9uU2tpbGxcIik7XG4gICAgICBidXR0b25NYW5hZ2VtZW50KHN0YXRlLnNraWxsLCBcIm9uVGFyZ2V0XCIpO1xuICAgICAgLy9TdGF0ZSBNYW5hZ2VtZW50XG4gICAgICBzdGF0ZS5idXR0b24uYWxseVtzdGF0ZS5za2lsbC5oZXJvSW5kZXhdLm9uU2tpbGwgPSB0cnVlO1xuXG4gICAgICAvL0NsZWFuIFNraWxsIEJ1ZmZlclxuICAgICAgc3RhdGUuc2tpbGwgPSB7XG4gICAgICAgIG9mZmVuc2U6IG51bGwsXG4gICAgICAgIHNraWxsOiBudWxsLFxuICAgICAgICBza2lsbElkOiBudWxsLFxuICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgIGFpbTogbnVsbCxcbiAgICAgICAgaGVyb0luZGV4OiBudWxsXG4gICAgICB9O1xuICAgIH0sXG4gICAgb25BdHRhY2s6IGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAgICAgIC8vU291bmRcbiAgICAgIHRoaXMuJHJlZnMuc291bmRDbGljay5wbGF5KCk7XG5cbiAgICAgIHRoaXMuc3RhdGUuZW5lcmd5Lm1vZGFsID0gdHJ1ZTtcbiAgICB9LFxuICAgIG9uRGVzY3JpcHRpb246IGZ1bmN0aW9uKHBheWxvYWQsIG9wdGlvbiA9IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG9wdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbiA9IFwiYWxseVwiO1xuICAgICAgfVxuICAgICAgLy9Tb3VuZFxuICAgICAgdGhpcy4kcmVmcy5zb3VuZENsaWNrLnBsYXkoKTtcbiAgICAgIC8vRGVmaW5lXG4gICAgICBsZXQgY29uZmlnID0ge1xuICAgICAgICBuYW1lSWQ6IHBheWxvYWQubmFtZUlkLFxuICAgICAgICBza2lsbDogcGF5bG9hZC5za2lsbEluZGV4LFxuICAgICAgICBoZXJvSW5kZXg6IHBheWxvYWQuaGVyb0luZGV4LFxuICAgICAgICBvcHRpb246IG9wdGlvblxuICAgICAgfTtcbiAgICAgIGxldCBza2lsbCA9IHRoaXMuc291cmNlW2NvbmZpZy5vcHRpb25dW2NvbmZpZy5oZXJvSW5kZXhdLnNraWxsW1xuICAgICAgICBjb25maWcuc2tpbGxcbiAgICAgIF07XG4gICAgICAvL01hcCBEZXNjcmlwdGlvblxuICAgICAgbGV0IG1hcCA9IHtcbiAgICAgICAgbmFtZTogc2tpbGwubmFtZSxcbiAgICAgICAgZW5lcmd5OiB7XG4gICAgICAgICAgYTogc2tpbGwuZW5lcmd5LmEsXG4gICAgICAgICAgaTogc2tpbGwuZW5lcmd5LmksXG4gICAgICAgICAgczogc2tpbGwuZW5lcmd5LnMsXG4gICAgICAgICAgdzogc2tpbGwuZW5lcmd5LncsXG4gICAgICAgICAgcjogc2tpbGwuZW5lcmd5LnIsXG4gICAgICAgICAgdG90YWw6XG4gICAgICAgICAgICBza2lsbC5lbmVyZ3kuYSArXG4gICAgICAgICAgICBza2lsbC5lbmVyZ3kuaSArXG4gICAgICAgICAgICBza2lsbC5lbmVyZ3kucyArXG4gICAgICAgICAgICBza2lsbC5lbmVyZ3kudyArXG4gICAgICAgICAgICBza2lsbC5lbmVyZ3kuclxuICAgICAgICB9LFxuICAgICAgICBkZXNjcmlwdGlvbjogc2tpbGwuZGVzY3JpcHRpb24sXG4gICAgICAgIGNsYXNzZXM6IHNraWxsLmNsYXNzZXMsXG4gICAgICAgIGNvb2xkb3duOiBza2lsbC5jb29sZG93blxuICAgICAgfTtcblxuICAgICAgLy9CdWZmZXIgRGVzY3JpcHRpb25cbiAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICBzdGF0ZS5kZXNjcmlwdGlvbiA9IHtcbiAgICAgICAgbmFtZUlkOiBjb25maWcubmFtZUlkLFxuICAgICAgICBza2lsbDogY29uZmlnLnNraWxsLFxuICAgICAgICBoZXJvSW5kZXg6IGNvbmZpZy5oZXJvSW5kZXgsXG4gICAgICAgIG1hcDogbWFwXG4gICAgICB9O1xuICAgIH0sXG4gICAgb25TdGF0dXM6IGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKHBheWxvYWQpO1xuICAgICAgbGV0IHN0YXR1cyA9IF8uY29uY2F0KFxuICAgICAgICBwYXlsb2FkLm9uQXR0YWNrLFxuICAgICAgICBwYXlsb2FkLm9uUmVjZWl2ZSxcbiAgICAgICAgcGF5bG9hZC5vblN0YXRlLFxuICAgICAgICBwYXlsb2FkLm9uU2VsZlxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUubG9nKHN0YXR1cyk7XG4gICAgICBsZXQgZ3JvdXAgPSBfLmdyb3VwQnkoc3RhdHVzLCBcIm5hbWVJZFwiKTtcbiAgICAgIGNvbnNvbGUubG9nKGdyb3VwKTtcbiAgICAgIGxldCBzdWJncm91cCA9IF8udG9BcnJheShncm91cCkubWFwKHggPT5cbiAgICAgICAgXy50b0FycmF5KF8uZ3JvdXBCeSh4LCBcInNraWxsSW5kZXhcIikpXG4gICAgICApO1xuICAgICAgbGV0IHByZXAgPSBzdWJncm91cC5tYXAoeCA9PiB4WzBdKTtcbiAgICAgIGxldCBmaW5hbCA9IHByZXAubWFwKHggPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyh4WzBdKTtcbiAgICAgICAgbGV0IGluZm8gPSB4WzBdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWVJZDogaW5mby5uYW1lSWQsXG4gICAgICAgICAgc3RhdHVzOiBpbmZvLnNraWxsSW5kZXgsXG4gICAgICAgICAgdmFsOiB4XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKHByZXApO1xuICAgICAgY29uc29sZS5sb2coZmluYWwpO1xuICAgICAgcmV0dXJuIGZpbmFsO1xuICAgICAgLy8gbGV0IHN1Ymdyb3VwID0gZ3JvdXAubWFwKHggPT4gXy5ncm91cEJ5KHgsIFwic2tpbGxJbmRleFwiKSk7XG4gICAgfSxcbiAgICBvbkdldEltYWdlOiBmdW5jdGlvbihwYXlsb2FkLCBvcHRpb24pIHtcbiAgICAgIGlmIChvcHRpb24gPT09IFwicGFja2V0XCIpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5zb3VyY2UuYWxseS5maW5kSW5kZXgoeCA9PiB4Lm5hbWUgPT09IHBheWxvYWQub2ZmZW5zZSk7XG4gICAgICAgIGxldCBuYW1lSWQgPSB0aGlzLnNvdXJjZS5hbGx5W2luZGV4XS5uYW1lSWQ7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBcIi9hc3NldHMvY2hhcmFjdGVyL1wiICtcbiAgICAgICAgICBuYW1lSWQuc2xpY2UoMCwgLTEpICtcbiAgICAgICAgICBcIi9za2lsbFwiICtcbiAgICAgICAgICAocGF5bG9hZC5za2lsbCArIDEpICtcbiAgICAgICAgICBcIi9hdmF0YXIuanBnXCJcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9uID09PSBcImNoYXJcIikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIFwiL2Fzc2V0cy9jaGFyYWN0ZXIvXCIgKyBwYXlsb2FkLm5hbWVJZC5zbGljZSgwLCAtMSkgKyBcIi9hdmF0YXIuanBnXCJcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9uID09PSBcInNraWxsXCIpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBcIi9hc3NldHMvY2hhcmFjdGVyL1wiICtcbiAgICAgICAgICBwYXlsb2FkLm5hbWVJZC5zbGljZSgwLCAtMSkgK1xuICAgICAgICAgIFwiL3NraWxsXCIgK1xuICAgICAgICAgIChwYXlsb2FkLnNraWxsICsgMSkgK1xuICAgICAgICAgIFwiL2F2YXRhci5qcGdcIlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb24gPT09IFwic3RhdHVzXCIpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBcIi9hc3NldHMvY2hhcmFjdGVyL1wiICtcbiAgICAgICAgICBwYXlsb2FkLm5hbWVJZC5zbGljZSgwLCAtMSkgK1xuICAgICAgICAgIFwiL3NraWxsXCIgK1xuICAgICAgICAgIHBheWxvYWQuc2tpbGwgK1xuICAgICAgICAgIFwiL2F2YXRhci5qcGdcIlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb24gPT09IFwidGFyZ2V0aW5nXCIpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5wYWNrZXQuZmluZEluZGV4KHggPT4geC5vZmZlbnNlID09PSBwYXlsb2FkLm5hbWUpO1xuICAgICAgICBsZXQgc2tpbGxJZCA9IHRoaXMucGFja2V0W2luZGV4XS5za2lsbElkO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIFwiL2Fzc2V0cy9jaGFyYWN0ZXIvXCIgK1xuICAgICAgICAgIHBheWxvYWQubmFtZUlkLnNsaWNlKDAsIC0xKSArXG4gICAgICAgICAgXCIvc2tpbGxcIiArXG4gICAgICAgICAgKHNraWxsSWQgKyAxKSArXG4gICAgICAgICAgXCIvYXZhdGFyLmpwZ1wiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0YXJnZXRpbmdDdWU6IGZ1bmN0aW9uKHBheWxvYWQsIG5hbWVJZCkge1xuICAgICAgbGV0IG5hbWUgPSBwYXlsb2FkO1xuICAgICAgbGV0IGluZGV4ID0gdGhpcy5wYWNrZXQuZmluZEluZGV4KHggPT4geC5vZmZlbnNlID09PSBwYXlsb2FkKTtcbiAgICAgIGxldCBwYWNrZXQgPSB0aGlzLnBhY2tldFtpbmRleF07XG5cbiAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHNraWxsSW5kZXg6IHBhY2tldC5za2lsbCxcbiAgICAgICAgc2tpbGxJZDogcGFja2V0LnNraWxsSWQsXG4gICAgICAgIGhlcm9JbmRleDogcGFja2V0Lmhlcm9JbmRleCxcbiAgICAgICAgdGFyZ2V0OiBwYWNrZXQudGFyZ2V0XG4gICAgICB9O1xuXG4gICAgICBpZiAobmFtZUlkKSB7XG4gICAgICAgIHJlc3VsdC5uYW1lSWQgPSBuYW1lSWQ7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxufSk7XG4iLCJmdW5jdGlvbiBlbmVyZ3lNYW5hZ2VtZW50KHRlbXBvcmFyeSwgb3B0aW9uKSB7XG4gIGxldCBlbmVyZ3kgPSB0ZW1wb3JhcnkuZW5lcmd5ID8gdGVtcG9yYXJ5LmVuZXJneSA6IGFwcC5zb3VyY2UuZW5lcmd5LmFsbHk7XG4gIGxldCBza2lsbCA9IHRlbXBvcmFyeS5za2lsbEJpbmRcbiAgICA/IHRlbXBvcmFyeS5za2lsbEJpbmRcbiAgICA6IGFwcC5zb3VyY2UuYWxseVt0ZW1wb3JhcnkuaGVyb0luZGV4XS5za2lsbFt0ZW1wb3Jhcnkuc2tpbGxdLmVuZXJneTtcbiAgbGV0IHRvdGFsID0ge1xuICAgIGVuZXJneTogZW5lcmd5LmEgKyBlbmVyZ3kuaSArIGVuZXJneS5zICsgZW5lcmd5LncsXG4gICAgc2tpbGw6IHNraWxsLmEgKyBza2lsbC5pICsgc2tpbGwucyArIHNraWxsLndcbiAgfTtcblxuICBpZiAob3B0aW9uID09PSBcInN1YnN0cmFjdFwiKSB7XG4gICAgaWYgKHNraWxsLmEgPiAwKSB7XG4gICAgICBlbmVyZ3kuYSAtPSBza2lsbC5hO1xuICAgICAgZW5lcmd5LnIgLT0gc2tpbGwuYTtcbiAgICB9XG4gICAgaWYgKHNraWxsLmkgPiAwKSB7XG4gICAgICBlbmVyZ3kuaSAtPSBza2lsbC5pO1xuICAgICAgZW5lcmd5LnIgLT0gc2tpbGwuaTtcbiAgICB9XG4gICAgaWYgKHNraWxsLnMgPiAwKSB7XG4gICAgICBlbmVyZ3kucyAtPSBza2lsbC5zO1xuICAgICAgZW5lcmd5LnIgLT0gc2tpbGwucztcbiAgICB9XG4gICAgaWYgKHNraWxsLncgPiAwKSB7XG4gICAgICBlbmVyZ3kudyAtPSBza2lsbC53O1xuICAgICAgZW5lcmd5LnIgLT0gc2tpbGwudztcbiAgICB9XG4gICAgaWYgKHNraWxsLnIgPiAwKSB7XG4gICAgICBlbmVyZ3kuciAtPSBza2lsbC5yO1xuICAgICAgYXBwLnN0YXRlLmVuZXJneS5yYW5kb20gKz0gc2tpbGwucjtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9uID09PSBcImFkZFwiKSB7XG4gICAgaWYgKHNraWxsLmEgPiAwKSB7XG4gICAgICBlbmVyZ3kuYSArPSBza2lsbC5hO1xuICAgICAgZW5lcmd5LnIgKz0gc2tpbGwuYTtcbiAgICB9XG4gICAgaWYgKHNraWxsLmkgPiAwKSB7XG4gICAgICBlbmVyZ3kuaSArPSBza2lsbC5pO1xuICAgICAgZW5lcmd5LnIgKz0gc2tpbGwuaTtcbiAgICB9XG4gICAgaWYgKHNraWxsLnMgPiAwKSB7XG4gICAgICBlbmVyZ3kucyArPSBza2lsbC5zO1xuICAgICAgZW5lcmd5LnIgKz0gc2tpbGwucztcbiAgICB9XG4gICAgaWYgKHNraWxsLncgPiAwKSB7XG4gICAgICBlbmVyZ3kudyArPSBza2lsbC53O1xuICAgICAgZW5lcmd5LnIgKz0gc2tpbGwudztcbiAgICB9XG4gICAgaWYgKHNraWxsLnIgPiAwKSB7XG4gICAgICBlbmVyZ3kuciArPSBza2lsbC5yO1xuICAgICAgYXBwLnN0YXRlLmVuZXJneS5yYW5kb20gLT0gc2tpbGwucjtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9uID09PSBcImNoZWNrXCIpIHtcbiAgICBsZXQgYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAodG90YWwuZW5lcmd5ID49IHRvdGFsLnNraWxsKSB7XG4gICAgICBsZXQgY291bnQgPSBbdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZV07XG4gICAgICBpZiAoc2tpbGwuYSA+PSAwKSB7XG4gICAgICAgIGNvdW50WzBdID0gZW5lcmd5LmEgPj0gc2tpbGwuYSA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChza2lsbC5pID49IDApIHtcbiAgICAgICAgY291bnRbMV0gPSBlbmVyZ3kuaSA+PSBza2lsbC5pID8gZmFsc2UgOiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHNraWxsLnMgPj0gMCkge1xuICAgICAgICBjb3VudFsyXSA9IGVuZXJneS5zID49IHNraWxsLnMgPyBmYWxzZSA6IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoc2tpbGwudyA+PSAwKSB7XG4gICAgICAgIGNvdW50WzNdID0gZW5lcmd5LncgPj0gc2tpbGwudyA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChza2lsbC5yID49IDApIHtcbiAgICAgICAgY291bnRbNF0gPSBlbmVyZ3kuciA+PSB0b3RhbC5za2lsbCArIHNraWxsLnIgPyBmYWxzZSA6IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb3VudC5maWx0ZXIoeCA9PiB4ID09PSBmYWxzZSkubGVuZ3RoID09PSA1KSB7XG4gICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFjdGl2ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBidXR0b25NYW5hZ2VtZW50KHBheWxvYWQsIG9wdGlvbikge1xuICAvL1RhcmdldCBCdXR0b25cbiAgaWYgKG9wdGlvbiAhPT0gXCJvblNlbGZcIikge1xuICAgIGlmIChwYXlsb2FkLmFpbSA9PT0gXCJlbmVteVwiKSB7XG4gICAgICBhcHAuc3RhdGUuYnV0dG9uLmVuZW15LmZvckVhY2goeCA9PiB7XG4gICAgICAgIC8vRGVmaW5lXG4gICAgICAgIGxldCBza2lsbCA9IGFwcC5zb3VyY2UuYWxseVtwYXlsb2FkLmhlcm9JbmRleF0uc2tpbGxbcGF5bG9hZC5za2lsbF07XG4gICAgICAgIGxldCBlbmVteVN0YXR1cyA9IGFwcC5zb3VyY2UuZW5lbXlbeC5pbmRleF0uc3RhdHVzO1xuXG4gICAgICAgIC8vSW52dWxuZXJhYmlsaXR5XG4gICAgICAgIGxldCBzdGF0ZSA9IGVuZW15U3RhdHVzLm9uU3RhdGU7XG4gICAgICAgIGxldCBpbnZ1bG5lcmFibGUgPSBpbnZ1bG5lcmFibGVNYW5hZ2VtZW50KHN0YXRlLCBza2lsbCk7XG5cbiAgICAgICAgLy9EaXNhYmxlXG4gICAgICAgIHguYnV0dG9uID0geC5kaXNhYmxlZCB8fCBpbnZ1bG5lcmFibGUgPyB0cnVlIDogIXguYnV0dG9uO1xuXG4gICAgICAgIC8vSWdub3JlXG4gICAgICAgIGxldCBpZ25vcmUgPSBpZ25vcmVNYW5hZ2VtZW50KHN0YXRlLCBza2lsbCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGlnbm9yZSk7XG5cbiAgICAgICAgLy9QcmV2ZW50IEludnVsbmVyYWJpbGl0eVxuICAgICAgICBpZiAoXG4gICAgICAgICAgb3B0aW9uID09PSBcIm9uU2tpbGxcIiAmJlxuICAgICAgICAgIGVuZW15U3RhdHVzLm9uU3RhdGUuc29tZSh4ID0+IHgudHlwZSA9PT0gXCJkaXNhYmxlRHJJdlwiKSAmJlxuICAgICAgICAgIGlnbm9yZSA9PT0gZmFsc2VcbiAgICAgICAgKSB7XG4gICAgICAgICAgeC5idXR0b24gPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vTWFya2luZ1xuICAgICAgICBpZiAocGF5bG9hZC5tYXJraW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgbGV0IHNraWxsTmFtZSA9IHNraWxsLm5hbWU7XG4gICAgICAgICAgbGV0IG1hcmtpbmcgPVxuICAgICAgICAgICAgZW5lbXlTdGF0dXMub25SZWNlaXZlLnNvbWUoeCA9PiB4Lm5hbWUgPT09IHNraWxsTmFtZSkgfHxcbiAgICAgICAgICAgIGVuZW15U3RhdHVzLm9uU3RhdGUuc29tZSh4ID0+IHgubmFtZSA9PT0gc2tpbGxOYW1lKTtcbiAgICAgICAgICBpZiAobWFya2luZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgeC5idXR0b24gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChwYXlsb2FkLmFpbSA9PT0gXCJlbmVteWxvY2tcIikge1xuICAgICAgYXBwLnN0YXRlLmJ1dHRvbi5lbmVteS5mb3JFYWNoKHggPT4ge1xuICAgICAgICAvL0RlZmluZVxuICAgICAgICBsZXQgc2tpbGwgPSBhcHAuc291cmNlLmFsbHlbcGF5bG9hZC5oZXJvSW5kZXhdLnNraWxsW3BheWxvYWQuc2tpbGxdO1xuICAgICAgICBsZXQgZW5lbXlTdGF0dXMgPSBhcHAuc291cmNlLmVuZW15W3guaW5kZXhdLnN0YXR1cztcbiAgICAgICAgbGV0IGxvY2sgPSBlbmVteVN0YXR1cy5vblN0YXRlLnNvbWUoXG4gICAgICAgICAgeCA9PiB4LnR5cGUgPT09IFwic3RhdGVcIiAmJiB4LmluZm8gPT09IHNraWxsLm5hbWVcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAobG9jayA9PT0gdHJ1ZSkge1xuICAgICAgICAgIC8vSW52dWxuZXJhYmlsaXR5XG4gICAgICAgICAgbGV0IHN0YXRlID0gZW5lbXlTdGF0dXMub25TdGF0ZTtcbiAgICAgICAgICBsZXQgaW52dWxuZXJhYmxlID0gaW52dWxuZXJhYmxlTWFuYWdlbWVudChzdGF0ZSwgc2tpbGwpO1xuXG4gICAgICAgICAgLy9EaXNhYmxlXG4gICAgICAgICAgeC5idXR0b24gPSB4LmRpc2FibGVkIHx8IGludnVsbmVyYWJsZSA/IHRydWUgOiAheC5idXR0b247XG5cbiAgICAgICAgICAvL0lnbm9yZVxuICAgICAgICAgIGxldCBpZ25vcmUgPSBpZ25vcmVNYW5hZ2VtZW50KHN0YXRlLCBza2lsbCk7XG4gICAgICAgICAgY29uc29sZS5sb2coaW52dWxuZXJhYmxlKTtcblxuICAgICAgICAgIC8vUHJldmVudCBJbnZ1bG5lcmFiaWxpdHlcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBvcHRpb24gPT09IFwib25Ta2lsbFwiICYmXG4gICAgICAgICAgICBlbmVteVN0YXR1cy5vblN0YXRlLnNvbWUoeCA9PiB4LnR5cGUgPT09IFwiZGlzYWJsZURySXZcIikgJiZcbiAgICAgICAgICAgIGlnbm9yZSA9PT0gZmFsc2VcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHguYnV0dG9uID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy9NYXJraW5nXG4gICAgICAgICAgaWYgKHBheWxvYWQubWFya2luZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbGV0IHNraWxsTmFtZSA9IHNraWxsLm5hbWU7XG4gICAgICAgICAgICBsZXQgbWFya2luZyA9XG4gICAgICAgICAgICAgIGVuZW15U3RhdHVzLm9uUmVjZWl2ZS5zb21lKHggPT4geC5uYW1lID09PSBza2lsbE5hbWUpIHx8XG4gICAgICAgICAgICAgIGVuZW15U3RhdHVzLm9uU3RhdGUuc29tZSh4ID0+IHgubmFtZSA9PT0gc2tpbGxOYW1lKTtcbiAgICAgICAgICAgIGlmIChtYXJraW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHguYnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBwYXlsb2FkLmFpbSA9PT0gXCJhbGxlbmVteVwiIHx8XG4gICAgICBwYXlsb2FkLmFpbSA9PT0gXCJyYW5kb21lbmVteVwiIHx8XG4gICAgICBwYXlsb2FkLmFpbSA9PT0gXCJhbGxlbmVteWFsbGFsbHlcIlxuICAgICkge1xuICAgICAgYXBwLnN0YXRlLmJ1dHRvbi5lbmVteS5mb3JFYWNoKHggPT4ge1xuICAgICAgICAvL0RlZmluZVxuICAgICAgICBsZXQgc2tpbGwgPSBhcHAuc291cmNlLmFsbHlbcGF5bG9hZC5oZXJvSW5kZXhdLnNraWxsW3BheWxvYWQuc2tpbGxdO1xuICAgICAgICBsZXQgZW5lbXlTdGF0dXMgPSBhcHAuc291cmNlLmVuZW15W3guaW5kZXhdLnN0YXR1cztcblxuICAgICAgICAvL0ludnVsbmVyYWJpbGl0eVxuICAgICAgICBsZXQgc3RhdGUgPSBlbmVteVN0YXR1cy5vblN0YXRlO1xuICAgICAgICBsZXQgaW52dWxuZXJhYmxlID0gaW52dWxuZXJhYmxlTWFuYWdlbWVudChzdGF0ZSwgc2tpbGwpO1xuXG4gICAgICAgIC8vRGlzYWJsZVxuICAgICAgICB4LmJ1dHRvbiA9IHguZGlzYWJsZWQgfHwgaW52dWxuZXJhYmxlID8gdHJ1ZSA6ICF4LmJ1dHRvbjtcblxuICAgICAgICAvL1ByZXZlbnQgSW52dWxuZXJhYmlsaXR5XG4gICAgICAgIGlmIChcbiAgICAgICAgICBvcHRpb24gPT09IFwib25Ta2lsbFwiICYmXG4gICAgICAgICAgZW5lbXlTdGF0dXMub25TdGF0ZS5zb21lKHggPT4geC50eXBlID09PSBcImRpc2FibGVEckl2XCIpXG4gICAgICAgICkge1xuICAgICAgICAgIHguYnV0dG9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocGF5bG9hZC5haW0gPT09IFwiYWxseVwiIHx8IHBheWxvYWQuYWltID09PSBcImFsbGFsbHlcIikge1xuICAgICAgYXBwLnN0YXRlLmJ1dHRvbi5hbGx5LmZvckVhY2goXG4gICAgICAgIHggPT4gKHguYnV0dG9uID0geC5kaXNhYmxlZCA/IHRydWUgOiAheC5idXR0b24pXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAocGF5bG9hZC5haW0gPT09IFwib3RoZXJhbGx5XCIpIHtcbiAgICAgIGFwcC5zdGF0ZS5idXR0b24uYWxseS5mb3JFYWNoKHggPT4ge1xuICAgICAgICBsZXQgbmFtZSA9IGFwcC5zdGF0ZS5idXR0b24uYWxseVtwYXlsb2FkLmhlcm9JbmRleF0ubmFtZTtcbiAgICAgICAgaWYgKHgubmFtZSAhPT0gbmFtZSkge1xuICAgICAgICAgIHguYnV0dG9uID0geC5kaXNhYmxlZCA/IHRydWUgOiAheC5idXR0b247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocGF5bG9hZC5haW0gPT09IFwic2VsZlwiKSB7XG4gICAgICBsZXQgYWxseSA9IGFwcC5zdGF0ZS5idXR0b24uYWxseVtwYXlsb2FkLmhlcm9JbmRleF07XG4gICAgICBhbGx5LmJ1dHRvbiA9IGFsbHkuZGlzYWJsZWQgPyB0cnVlIDogIWFsbHkuYnV0dG9uO1xuICAgIH1cbiAgfVxuXG4gIC8vU2tpbGwgQnV0dG9uXG4gIGlmIChvcHRpb24gPT09IFwib25UYXJnZXRcIikge1xuICAgIGNvbnNvbGUubG9nKFwib25Ta2lsbFwiKTtcbiAgICBhcHAuc3RhdGUuYnV0dG9uLmFsbHkuZm9yRWFjaCh4ID0+IHtcbiAgICAgIGlmICh4Lm9uU2tpbGwgPT09IGZhbHNlKSB7XG4gICAgICAgIHguc2tpbGwuZm9yRWFjaChzID0+IHtcbiAgICAgICAgICBzLmJ1dHRvbiA9IHRydWU7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgeC5uYW1lID09PSBwYXlsb2FkLm9mZmVuc2UgJiZcbiAgICAgICAgICAgIHMubmFtZSA9PT1cbiAgICAgICAgICAgICAgYXBwLnNvdXJjZS5hbGx5W3BheWxvYWQuaGVyb0luZGV4XS5za2lsbFtwYXlsb2FkLnNraWxsXS5uYW1lXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzLmJ1dHRvbiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaWYgKG9wdGlvbiA9PT0gXCJvbkNhbmNlbFwiKSB7XG4gICAgY29uc29sZS5sb2coXCJvbkNhbmNlbFwiKTtcbiAgICBhcHAuc3RhdGUuYnV0dG9uLmFsbHkuZm9yRWFjaCh4ID0+IHtcbiAgICAgIGlmICh4Lm9uU2tpbGwgPT09IGZhbHNlIHx8IHgubmFtZSA9PT0gcGF5bG9hZC5vZmZlbnNlKSB7XG4gICAgICAgIHguc2tpbGwuZm9yRWFjaChzID0+IHtcbiAgICAgICAgICBzLmJ1dHRvbiA9IHMuZGlzYWJsZWQgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgeC5uYW1lID09PSBwYXlsb2FkLm9mZmVuc2UgJiZcbiAgICAgICAgICAgIHMubmFtZSA9PT1cbiAgICAgICAgICAgICAgYXBwLnNvdXJjZS5hbGx5W3BheWxvYWQuaGVyb0luZGV4XS5za2lsbFtwYXlsb2FkLnNraWxsXS5uYW1lXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzLmJ1dHRvbiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob3B0aW9uID09PSBcIm9uVGFyZ2V0XCIpIHtcbiAgICBjb25zb2xlLmxvZyhcIm9uVGFyZ2V0XCIpO1xuICAgIGFwcC5zdGF0ZS5idXR0b24uYWxseS5mb3JFYWNoKHggPT4ge1xuICAgICAgbGV0IGluZGV4ID0gYXBwLnBhY2tldC5maW5kSW5kZXgocyA9PiBzLm9mZmVuc2UgPT09IHgubmFtZSk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHguc2tpbGwuZm9yRWFjaChzID0+IHtcbiAgICAgICAgICBzLmJ1dHRvbiA9IHMuZGlzYWJsZWQgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKG9wdGlvbiA9PT0gXCJvblNlbGZcIikge1xuICAgIGNvbnNvbGUubG9nKFwib25TZWxmXCIpO1xuICAgIGFwcC5zdGF0ZS5idXR0b24uYWxseVtwYXlsb2FkLmhlcm9JbmRleF0uc2tpbGwuZm9yRWFjaChzID0+IHtcbiAgICAgIHMuYnV0dG9uID0gcy5kaXNhYmxlZCA/IHRydWUgOiBmYWxzZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vRW5lcmd5IE1hbmFnZW1lbnRcbiAgaWYgKG9wdGlvbiAhPT0gXCJvblNraWxsXCIpIHtcbiAgICBhcHAuc3RhdGUuYnV0dG9uLmFsbHkuZm9yRWFjaCgoeCwgeGkpID0+IHtcbiAgICAgIGlmICh4Lm9uU2tpbGwgPT09IGZhbHNlICYmIHgubmFtZSAhPT0gcGF5bG9hZC5vZmZlbnNlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHgubmFtZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKG9wdGlvbik7XG4gICAgICAgIHguc2tpbGwuZm9yRWFjaCgocywgc2kpID0+IHtcbiAgICAgICAgICBsZXQgZW5lcmd5ID0gZW5lcmd5TWFuYWdlbWVudCh7IGhlcm9JbmRleDogeGksIHNraWxsOiBzaSB9LCBcImNoZWNrXCIpO1xuICAgICAgICAgIHMuYnV0dG9uID0gcy5kaXNhYmxlZCB8fCBlbmVyZ3kgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgeC5uYW1lID09PSBwYXlsb2FkLm9mZmVuc2UgJiZcbiAgICAgICAgICAgIHMubmFtZSA9PT1cbiAgICAgICAgICAgICAgYXBwLnNvdXJjZS5hbGx5W3BheWxvYWQuaGVyb0luZGV4XS5za2lsbFtwYXlsb2FkLnNraWxsXS5uYW1lXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzLmJ1dHRvbiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgKG9wdGlvbiA9PT0gXCJvblNlbGZcIiB8fCBvcHRpb24gPT09IFwib25DYW5jZWxcIikgJiZcbiAgICAgICAgeC5uYW1lID09PSBwYXlsb2FkLm9mZmVuc2VcbiAgICAgICkge1xuICAgICAgICB4LnNraWxsLmZvckVhY2goKHMsIHNpKSA9PiB7XG4gICAgICAgICAgbGV0IGVuZXJneSA9IGVuZXJneU1hbmFnZW1lbnQoeyBoZXJvSW5kZXg6IHhpLCBza2lsbDogc2kgfSwgXCJjaGVja1wiKTtcbiAgICAgICAgICBzLmJ1dHRvbiA9IHMuZGlzYWJsZWQgfHwgZW5lcmd5ID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHVuTWFuYWdlbWVudChvblN0YXRlLCBza2lsbCkge1xuICBsZXQgc3R1biA9IG9uU3RhdGUubWFwKHggPT4ge1xuICAgIGlmICh4LnR5cGUgPT09IFwic3R1blwiKSB7XG4gICAgICBsZXQgaWdub3JlID0gaWdub3JlTWFuYWdlbWVudChvblN0YXRlLCB4KTtcbiAgICAgIGxldCBpbnRlcnNlY3QgPSBfLmludGVyc2VjdGlvbih4LmNsYXNzZXMsIHNraWxsLmNsYXNzZXMpO1xuXG4gICAgICBsZXQgZXZhbHVhdGU7XG5cbiAgICAgIGlmICh4LmluZm8gPT09IFwiaW5jbHVzaXZlXCIpIHtcbiAgICAgICAgZXZhbHVhdGUgPSBpbnRlcnNlY3QubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoeC5pbmZvID09PSBcImRlY2x1c2l2ZVwiKSB7XG4gICAgICAgIGV2YWx1YXRlID0gaW50ZXJzZWN0Lmxlbmd0aCA9PT0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2YWx1YXRlICYmICFpZ25vcmUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoc3R1bi5maWx0ZXIoeCA9PiB4ID09PSB0cnVlKS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludnVsbmVyYWJsZU1hbmFnZW1lbnQob25TdGF0ZSwgc2tpbGwpIHtcbiAgbGV0IGludnVsbmVyYWJsZSA9IG9uU3RhdGUubWFwKHggPT4ge1xuICAgIGlmICh4LnR5cGUgPT09IFwiaW52dWxuZXJhYmxlXCIpIHtcbiAgICAgIGxldCBpZ25vcmVJbnZ1bCA9IHNraWxsLmlnbm9yZUludnVsO1xuICAgICAgbGV0IGludGVyc2VjdCA9IF8uaW50ZXJzZWN0aW9uKHguY2xhc3Nlcywgc2tpbGwuY2xhc3Nlcyk7ICAgICAgXG5cbiAgICAgIGxldCBldmFsdWF0ZTtcblxuICAgICAgaWYgKHguaW5mbyA9PT0gXCJpbmNsdXNpdmVcIikge1xuICAgICAgICBldmFsdWF0ZSA9IGludGVyc2VjdC5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICh4LmluZm8gPT09IFwiZGVjbHVzaXZlXCIpIHtcbiAgICAgICAgZXZhbHVhdGUgPSBpbnRlcnNlY3QubGVuZ3RoID09PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZhbHVhdGUgJiYgIWlnbm9yZUludnVsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGludnVsbmVyYWJsZS5maWx0ZXIoeCA9PiB4ID09PSB0cnVlKS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlnbm9yZU1hbmFnZW1lbnQob25TdGF0ZSwgc2tpbGwpIHtcbiAgbGV0IGlnbm9yZSA9IG9uU3RhdGUubWFwKHggPT4ge1xuICAgIGlmICh4LnR5cGUgPT09IFwiaWdub3JlXCIpIHtcbiAgICAgIGxldCBpbnRlcnNlY3QgPSBfLmludGVyc2VjdGlvbih4LmNsYXNzZXMsIHNraWxsLmNsYXNzZXMpO1xuXG4gICAgICBsZXQgZXZhbHVhdGU7XG5cbiAgICAgIGlmICh4LmluZm8gPT09IFwiaW5jbHVzaXZlXCIpIHtcbiAgICAgICAgZXZhbHVhdGUgPSBpbnRlcnNlY3QubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoeC5pbmZvID09PSBcImRlY2x1c2l2ZVwiKSB7XG4gICAgICAgIGV2YWx1YXRlID0gaW50ZXJzZWN0Lmxlbmd0aCA9PT0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2YWx1YXRlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGlnbm9yZS5maWx0ZXIoeCA9PiB4ID09PSB0cnVlKS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCJmdW5jdGlvbiB2dWVCaW5kKHBheWxvYWQpIHtcbiAgbGV0IHVzZXJuYW1lID0gZ2V0Q29va2llKFwidXNlcm5hbWVcIik7XG4gIGlmIChwYXlsb2FkLnRlYW0udGVhbUV2ZW4gIT09IHVzZXJuYW1lICYmIHBheWxvYWQudGVhbS50ZWFtT2RkICE9PSB1c2VybmFtZSkge1xuICAgIGNvbnNvbGUubG9nKHBheWxvYWQudGVhbSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnNvbGUubG9nKHBheWxvYWQpO1xuICBsZXQgYWxseSA9IHBheWxvYWQudGVhbS50ZWFtRXZlbiA9PT0gdXNlcm5hbWUgPyBcInRlYW1FdmVuXCIgOiBcInRlYW1PZGRcIjtcbiAgbGV0IGVuZW15ID0gcGF5bG9hZC50ZWFtLnRlYW1FdmVuID09PSB1c2VybmFtZSA/IFwidGVhbU9kZFwiIDogXCJ0ZWFtRXZlblwiO1xuICBsZXQgdHVybiA9IGFsbHkgPT09IFwidGVhbUV2ZW5cIiA/IDAgOiAxO1xuICBsZXQgbXlUdXJuID0gcGF5bG9hZC50dXJuICUgMiA9PT0gdHVybiA/IHRydWUgOiBmYWxzZTtcblxuICBpZiAobXlUdXJuID09PSB0cnVlKSB7XG4gICAgYXBwLiRyZWZzLnNvdW5kU3RhcnRUdXJuLnBsYXkoKTtcbiAgfVxuXG4gIC8vIGlmIChwYXlsb2FkLndpbm5lci5zdGF0ZSA9PT0gdHJ1ZSAmJiBwYXlsb2FkLndpbm5lci5uYW1lID09PSB1c2VybmFtZSkge1xuICAvLyB9IGVsc2UgaWYgKFxuICAvLyAgIHBheWxvYWQud2lubmVyLnN0YXRlID09PSB0cnVlICYmXG4gIC8vICAgcGF5bG9hZC53aW5uZXIubmFtZSAhPT0gdXNlcm5hbWVcbiAgLy8gKSB7XG4gIC8vICAgYXBwLiRyZWZzLnNvdW5kTG9zZS5wbGF5KCk7XG4gIC8vIH1cblxuICBsZXQgc3RvcmUgPSB7XG4gICAgZW5lcmd5OiB7XG4gICAgICBhbGx5OiBwYXlsb2FkLmVuZXJneVthbGx5XSxcbiAgICAgIGVuZW15OiBwYXlsb2FkLmVuZXJneVtlbmVteV1cbiAgICB9LFxuICAgIGFsbHk6IHBheWxvYWRbYWxseV0ubWFwKHggPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ueCxcbiAgICAgICAgaW5kaWNhdG9yOiBzdGF0dXNWaWV3KHgubmFtZSwgeC5zdGF0dXMpXG4gICAgICB9O1xuICAgIH0pLFxuICAgIGVuZW15OiBwYXlsb2FkW2VuZW15XS5tYXAoeCA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi54LFxuICAgICAgICBpbmRpY2F0b3I6IHN0YXR1c1ZpZXcoeC5uYW1lLCB4LnN0YXR1cylcbiAgICAgIH07XG4gICAgfSksXG4gICAgdHVybjogcGF5bG9hZC50dXJuLFxuICAgIG15VHVybjogbXlUdXJuLFxuICAgIHJvb206IHBheWxvYWQucm9vbSxcbiAgICBtZXRhOiB7XG4gICAgICBteU5hbWU6IHBheWxvYWQudGVhbVthbGx5XSxcbiAgICAgIHRoZWlyTmFtZTogcGF5bG9hZC50ZWFtW2VuZW15XSxcbiAgICB9XG4gIH07XG4gIHN0b3JlLmVuZXJneS5hbGx5LnIgPVxuICAgIHN0b3JlLmVuZXJneS5hbGx5LmEgK1xuICAgIHN0b3JlLmVuZXJneS5hbGx5LmkgK1xuICAgIHN0b3JlLmVuZXJneS5hbGx5LnMgK1xuICAgIHN0b3JlLmVuZXJneS5hbGx5Lnc7XG4gIGNvbnNvbGUubG9nKHN0b3JlKTtcbiAgbGV0IGJ1dHRvbiA9IHtcbiAgICBhbGx5OiBzdG9yZS5hbGx5Lm1hcCh4ID0+IHtcbiAgICAgIC8vIGxldCBkaXNhYmxlZCA9IHguc3RhdHVzLm9uU3RhdGUuZmluZEluZGV4KHggPT4geC50eXBlID09PSAnc3R1bicpID4gLTEgfHwgeC5ocCA8PSAwID8gdHJ1ZSA6IGZhbHNlXG4gICAgICBsZXQgZGlzYWJsZWQgPSB4LmhwIDw9IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICAvLyBsZXQgc3R1biA9IHguc3RhdHVzLm9uU3RhdGUuc29tZSh4ID0+IHgudHlwZSA9PT0gXCJzdHVuXCIpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogeC5uYW1lLFxuICAgICAgICBidXR0b246IHRydWUsXG4gICAgICAgIG9uU2tpbGw6IGZhbHNlLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgIHNraWxsOiB4LnNraWxsLm1hcChzID0+IHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzLnR5cGUpO1xuICAgICAgICAgIGxldCBlbmVyZ3kgPSBlbmVyZ3lNYW5hZ2VtZW50KFxuICAgICAgICAgICAgeyBlbmVyZ3k6IHN0b3JlLmVuZXJneS5hbGx5LCBza2lsbEJpbmQ6IHMuZW5lcmd5IH0sXG4gICAgICAgICAgICBcImNoZWNrXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGxldCBzdHVuID0gc3R1bk1hbmFnZW1lbnQoeC5zdGF0dXMub25TdGF0ZSwgcyk7XG4gICAgICAgICAgLy8gbGV0IGRpc2FibGVEclZyID1cbiAgICAgICAgICAvLyAgIHMudHlwZSA9PT0gXCJpbnZ1bG5lcmFibGVcIiAmJlxuICAgICAgICAgIC8vICAgeC5zdGF0dXMub25TdGF0ZS5zb21lKHggPT4geC50eXBlID09PSBcImRpc2FibGVEckl2XCIpXG4gICAgICAgICAgLy8gICAgID8gdHJ1ZVxuICAgICAgICAgIC8vICAgICA6IGZhbHNlO1xuICAgICAgICAgIGxldCBkaXNhYmxlZCA9XG4gICAgICAgICAgICBzdHVuIHx8XG4gICAgICAgICAgICBzLnJlcXVpcmVkIHx8XG4gICAgICAgICAgICBzLnN0YXRlID09PSBcImNvb2xkb3duXCIgfHxcbiAgICAgICAgICAgIG15VHVybiA9PT0gZmFsc2UgfHxcbiAgICAgICAgICAgIHguaHAgPD0gMFxuICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgOiBmYWxzZTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogcy5uYW1lLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgICAgYnV0dG9uOiBkaXNhYmxlZCB8fCBlbmVyZ3kgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9KSxcbiAgICBlbmVteTogc3RvcmUuZW5lbXkubWFwKCh4LCBpKSA9PiB7XG4gICAgICAvLyBsZXQgZGlzYWJsZWQgPVxuICAgICAgLy8gICB4LnN0YXR1cy5vblN0YXRlLnNvbWUoeCA9PiB4LnR5cGUgPT09IFwiaW52dWxuZXJhYmxlXCIpIHx8IHguaHAgPD0gMFxuICAgICAgLy8gICAgID8gdHJ1ZVxuICAgICAgLy8gICAgIDogZmFsc2U7XG4gICAgICBsZXQgZGlzYWJsZWQgPSB4LmhwIDw9IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiB4Lm5hbWUsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgIGJ1dHRvbjogdHJ1ZVxuICAgICAgfTtcbiAgICB9KVxuICB9O1xuICBhcHAuc291cmNlID0gc3RvcmU7XG4gIGFwcC5zdGF0ZS5idXR0b24gPSBidXR0b247XG4gIGFwcC5zdGF0ZS50aW1lci50dXJuID0gMTAwO1xuICBhcHAuc3RhdGUud2lubmVyID0gcGF5bG9hZC53aW5uZXI7XG59XG5cbmZ1bmN0aW9uIHN0YXR1c1ZpZXcobmFtZSwgcGF5bG9hZCkge1xuICAvLyBjb25zb2xlLmxvZyhuYW1lLCBwYXlsb2FkKTtcbiAgbGV0IHN0YXR1cyA9IF8uY29uY2F0KFxuICAgIHBheWxvYWQub25BdHRhY2ssXG4gICAgcGF5bG9hZC5vblJlY2VpdmUsXG4gICAgcGF5bG9hZC5vblN0YXRlLFxuICAgIHBheWxvYWQub25TZWxmXG4gICk7XG4gIGxldCBncm91cEJ5TmFtZUlkID0gXy5ncm91cEJ5KHN0YXR1cywgXCJuYW1lSWRcIik7XG4gIGxldCB2YWx1ZXNCeU5hbWVJZCA9IF8udmFsdWVzKGdyb3VwQnlOYW1lSWQpO1xuICBsZXQgZ3JvdXBCeVNraWxsSW5kZXggPSB2YWx1ZXNCeU5hbWVJZC5tYXAoeCA9PiBfLmdyb3VwQnkoeCwgXCJza2lsbEluZGV4XCIpKTtcbiAgbGV0IHZhbHVlc0J5U2tpbGxJbmRleCA9IF8udmFsdWVzKGdyb3VwQnlTa2lsbEluZGV4KTtcbiAgbGV0IGNvbmNhdFZhbHVlcyA9IFtdO1xuICB2YWx1ZXNCeVNraWxsSW5kZXguZm9yRWFjaCh4ID0+IHtcbiAgICBjb25jYXRWYWx1ZXMgPSBjb25jYXRWYWx1ZXMuY29uY2F0KF8udmFsdWVzKHgpKTtcbiAgfSk7XG4gIGxldCBmaW5hbCA9IGNvbmNhdFZhbHVlcy5tYXAoeCA9PiB7XG4gICAgbGV0IGluZm8gPSB4WzBdO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBpbmZvLm5hbWUsXG4gICAgICBuYW1lSWQ6IGluZm8ubmFtZUlkLFxuICAgICAgc2tpbGxJbmRleDogaW5mby5za2lsbEluZGV4LFxuICAgICAgYWN0aXZlOiBpbmZvLmFjdGl2ZSxcbiAgICAgIHZhbDogeFxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gZmluYWw7XG59XG4iLCJmdW5jdGlvbiBpbml0aWF0ZSgpIHtcbiAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJvb20gPSB1cmxbdXJsLmxlbmd0aCAtIDFdO1xuICBpZiAocm9vbSAhPT0gXCJcIikge1xuICAgIHNvY2tldC5lbWl0KFwiaW5pdGlhdGVcIiwge1xuICAgICAgcm9vbTogcm9vbVxuICAgIH0pO1xuICAgIGNoYXQuZW1pdChcImdhbWVJbml0aWF0ZVwiLCB7XG4gICAgICByb29tOiByb29tXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoJy8nKTtcbiAgfVxufVxuXG5pbml0aWF0ZSgpO1xuXG5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gIGlmIChhcHAuc291cmNlLnR1cm4gPT0gdW5kZWZpbmVkIHx8IGFwcC5zdGF0ZS53aW5uZXIuc3RhdGUgIT09IGZhbHNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChhcHAuc3RhdGUudGltZXIudHVybiA+IDApIHtcbiAgICBhcHAuc3RhdGUudGltZXIudHVybiAtPSAyLjI7XG4gIH0gZWxzZSBpZiAoYXBwLnN0YXRlLnRpbWVyLnR1cm4gPD0gMCAmJiBhcHAuc291cmNlLm15VHVybiA9PT0gdHJ1ZSkge1xuICAgIC8vIGFwcC5wYWNrZXQgPSBhcHAucGFja2V0LmZpbHRlcih4ID0+IHguc2tpbGwgIT09IG51bGwgJiYgeC5vZmZlbnNlICE9PSAnJyAmJiB4LnRhcmdldCAhPT0gJycgJiYgeC5haW0gIT09ICcnICYmIHguaGVyb0luZGV4ICE9PSBudWxsKVxuICAgIC8vIHNvY2tldC5lbWl0KCdzZXF1ZW5jZScsIHtcbiAgICAvLyAgICAgcGFja2V0OiBhcHAucGFja2V0LFxuICAgIC8vICAgICByb29tOiBhcHAuc291cmNlLnJvb21cbiAgICAvLyB9KVxuICAgIC8vIGFwcC5wYWNrZXQgPSBbXVxuICB9XG59LCAxMDAwKTtcblxud2luZG93Lm9uZm9jdXMgPSBmdW5jdGlvbigpIHtcbiAgZG9jdW1lbnQudGl0bGUgPSBcIkFuaW1lIFJ1bWJsZVwiO1xufTtcblxuZnVuY3Rpb24gc2Nyb2xsQ2hhdCgpIHtcbiAgdmFyIGNvbnRhaW5lciA9IGFwcC4kZWwucXVlcnlTZWxlY3RvcihcIiNjaGF0XCIpO1xuICBjb250YWluZXIuc2Nyb2xsVG9wID0gY29udGFpbmVyLnNjcm9sbEhlaWdodDtcbn1cbiIsInNvY2tldC5vbihcImFwcGx5XCIsIHBheWxvYWQgPT4ge1xuICBkb2N1bWVudC50aXRsZSA9IFwiKCEpIEFuaW1lIFJ1bWJsZVwiO1xuICB2dWVCaW5kKHBheWxvYWQpO1xufSk7XG5cbnNvY2tldC5vbihcIm5vTWF0Y2hcIiwgcGF5bG9hZCA9PiB7XG4gIGNvbnNvbGUubG9nKFwibm9uZVwiKTtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoXCIvXCIpO1xufSk7XG5cbmNoYXQub24oXCJjaGF0XCIsIHBheWxvYWQgPT4ge1xuICBpZiAocGF5bG9hZC5jaGFubmVsID09PSBcImluZ2FtZVwiKSB7XG4gICAgYXBwLmNoYXQucHVzaChwYXlsb2FkLm1lc3NhZ2UpO1xuICAgIGlmIChhcHAuY2hhdENoYW5uZWwgIT09IFwiaW5nYW1lXCIpIHtcbiAgICAgIGFwcC5jaGF0Tm90aWYuaW5nYW1lID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nyb2xsQ2hhdCgpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXlsb2FkLmNoYW5uZWwgPT09IFwibG9iYnlcIikge1xuICAgIGFwcC5sb2JieWNoYXQucHVzaChwYXlsb2FkLm1lc3NhZ2UpO1xuXG4gICAgaWYgKGFwcC5jaGF0Q2hhbm5lbCAhPT0gXCJsb2JieVwiKSB7XG4gICAgICBhcHAuY2hhdE5vdGlmLmxvYmJ5ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nyb2xsQ2hhdCgpO1xuICAgIH1cbiAgfVxufSk7XG4iLCJmdW5jdGlvbiBnZXRQYXJhbWV0ZXJOYW1lKG5hbWUsIHVybCkge1xuICBpZiAoIXVybCkgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXFxcXCQmXCIpO1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKFwiWz8mXVwiICsgbmFtZSArIFwiKD0oW14mI10qKXwmfCN8JClcIiksXG4gICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKCFyZXN1bHRzKSByZXR1cm4gbnVsbDtcbiAgaWYgKCFyZXN1bHRzWzJdKSByZXR1cm4gXCJcIjtcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpO1xufVxuXG5jb25zdCBzZXRDb29raWUgPSAobmFtZSwgdmFsdWUsIGRheXMgPSA3LCBwYXRoID0gXCIvXCIpID0+IHtcbiAgY29uc3QgZXhwaXJlcyA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBkYXlzICogODY0ZTUpLnRvR01UU3RyaW5nKCk7XG4gIGRvY3VtZW50LmNvb2tpZSA9XG4gICAgbmFtZSArXG4gICAgXCI9XCIgK1xuICAgIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgK1xuICAgIFwiOyBleHBpcmVzPVwiICtcbiAgICBleHBpcmVzICtcbiAgICBcIjsgcGF0aD1cIiArXG4gICAgcGF0aDtcbn07XG5cbmNvbnN0IGdldENvb2tpZSA9IG5hbWUgPT4ge1xuICByZXR1cm4gZG9jdW1lbnQuY29va2llLnNwbGl0KFwiOyBcIikucmVkdWNlKChyLCB2KSA9PiB7XG4gICAgY29uc3QgcGFydHMgPSB2LnNwbGl0KFwiPVwiKTtcbiAgICByZXR1cm4gcGFydHNbMF0gPT09IG5hbWUgPyBkZWNvZGVVUklDb21wb25lbnQocGFydHNbMV0pIDogcjtcbiAgfSwgXCJcIik7XG59O1xuXG5jb25zdCBkZWxldGVDb29raWUgPSAobmFtZSwgcGF0aCkgPT4ge1xuICBzZXRDb29raWUobmFtZSwgXCJcIiwgLTEsIHBhdGgpO1xufTtcbiJdfQ==
