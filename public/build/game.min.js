"use strict";

var socket = io("/game");
var chat = io("/chat");
"use strict";

Vue.use(VTooltip);
var app = new Vue({
  el: "#app",
  data: {
    mode: "game",
    chat: [],
    lobbychat: [],
    chatSend: "",
    chatChannel: "ingame",
    chatNotif: {
      lobby: false,
      ingame: false
    },
    source: {
      energy: {
        ally: {}
      },
      meta: {}
    },
    packet: [],
    state: {
      skill: {
        offense: null,
        skill: null,
        skillId: null,
        skillName: null,
        target: null,
        aim: null,
        heroIndex: null
      },
      timer: {
        turn: 100
      },
      onSkill: false,
      button: {},
      description: null,
      winner: {
        state: false,
        name: ""
      },
      energy: {
        modal: false,
        random: 0
      },
      exchange: {
        modal: false,
        used: false,
        energy: {},
        val: ""
      }
    },
    showModal: true
  },
  methods: {
    onSurrender: function onSurrender() {
      console.log("surrender");
      socket.emit("surrender", {
        room: this.source.room
      });
    },
    onChat: function onChat() {
      var channel = this.chatChannel === "ingame" ? "ingame" : "lobby";
      var packet = {
        channel: channel,
        room: this.source.room,
        message: this.chatSend
      };
      chat.emit("chat", packet);
      this.chatSend = "";
    },
    scrollChat: function (_scrollChat) {
      function scrollChat() {
        return _scrollChat.apply(this, arguments);
      }

      scrollChat.toString = function () {
        return _scrollChat.toString();
      };

      return scrollChat;
    }(function () {
      setTimeout(function () {
        scrollChat();
      }, 100);
    }),
    onExchange: function onExchange(e) {
      //Sound
      this.$refs.soundClick.play();
      var state = this.state;
      this.source.energy.ally = e.energy;
      this.source.energy.ally.r = this.source.energy.ally.r - this.state.energy.random;
      state.exchange.energy = e.cost;
      state.exchange.modal = false;
      state.exchange.used = true;
      state.exchange.val = e.exchange;
      state.button.ally.forEach(function (x, xi) {
        if (x.onSkill === false) {
          console.log(x.name);
          x.skill.forEach(function (s, si) {
            var energy = energyManagement({
              heroIndex: xi,
              skill: si
            }, "check");
            s.button = s.disabled || energy ? true : false;
            console.log(energy, s.disabled, s.button);
          });
        }
      }); //Clean Skill Buffer

      if (state.skill.offense !== null && state.skill.target === null) {
        //Switch Choice
        //Button Management
        buttonManagement(state.skill, "onCancel"); //Clean Buffer

        state.skill = {
          offense: null,
          skill: null,
          skillId: null,
          skillName: null,
          target: null,
          aim: null,
          heroIndex: null
        };
      }
    },
    onDone: function onDone(e) {
      console.log(e);
      app.source.myTurn = false; //Sound

      this.$refs.soundEndTurn.play(); //Define

      var state = this.state;
      var packet = e.packet; //Organize

      state.energy.modal = false;
      packet = packet.filter(function (x) {
        return x.skill !== null && x.skillId !== null && x.skillName !== null && x.offense !== null && x.target !== null && x.aim !== null && x.heroIndex !== null;
      });
      packet.unshift(e.energy);

      if (state.exchange.used === true) {
        packet.unshift({
          msg: "exchange",
          val: state.exchange.val
        }, state.exchange.energy);
        state.exchange.used = false;
      } //Send


      socket.emit("sequence", {
        packet: packet,
        room: this.source.room
      }); //Reset

      state.energy.random = 0;
      this.packet = [];
      state.skill = {
        offense: null,
        skill: null,
        skillId: null,
        skillName: null,
        target: null,
        aim: null,
        heroIndex: null
      };
    },
    onSkill: function onSkill(payload) {
      //Define and Switch State
      var state = this.state;
      var skill = this.source.ally[payload.heroIndex].skill[payload.skillIndex];
      var marking = skill.marking;
      var skillName = skill.name;
      var temporary = {
        offense: payload.name,
        skill: payload.skillIndex,
        skillId: payload.skillId,
        skillName: skillName,
        target: null,
        aim: payload.target,
        heroIndex: payload.heroIndex,
        marking: marking
      }; //Is Skill Chosen?

      var isOnSkill = state.button.ally[temporary.heroIndex].onSkill;

      if (isOnSkill === false && state.skill.offense === null && state.skill.target === null) {
        //First Choice
        //Buffer Skill
        state.skill = temporary; //Button Management

        buttonManagement(temporary, "onSkill");
      } else if (isOnSkill === false && state.skill.offense !== null && state.skill.target === null) {
        //Switch Choice
        //Button Management
        buttonManagement(state.skill, "onCancel");
        setTimeout(function () {
          buttonManagement(temporary, "onSkill");
        }, 100); //Buffer Skill

        state.skill = temporary;
      } else if (isOnSkill === true) {
        //Cancel Choice
        energyManagement(temporary, "add"); //Button Management

        buttonManagement(state.skill, "onCancel");
        buttonManagement(temporary, "onSelf");
        this.packet = this.packet.filter(function (x) {
          return x.offense !== temporary.offense;
        }); //Clean Skill Buffer

        state.skill = {
          offense: null,
          skill: null,
          skillId: null,
          skillName: null,
          target: null,
          aim: null,
          heroIndex: null
        }; //State Management

        state.button.ally[temporary.heroIndex].onSkill = false;
      }
    },
    onTarget: function onTarget(payload) {
      //Sound
      this.$refs.soundClick.play(); //Define State

      var state = this.state; //Buffer Skill

      if (state.skill.aim === "allenemy" || state.skill.aim === "randomenemy") {
        console.log(state.button.enemy);
        state.skill.target = state.button.enemy.filter(function (x) {
          return x.button !== true && x.name !== payload.name;
        }).map(function (x) {
          return x.name;
        });
        state.skill.target.unshift(payload.name);
      } else if (state.skill.aim === "allally") {
        state.skill.target = state.button.ally.map(function (x) {
          return x.name;
        });
      } else if (state.skill.aim === "allenemyallally") {
        state.skill.target = state.button.enemy.filter(function (x) {
          return x.button !== true && x.name !== payload.name;
        }).map(function (x) {
          return x.name;
        });
        state.skill.target.unshift(payload.name);
        var ally = state.button.ally.map(function (x) {
          return x.name;
        });
        state.skill.target = state.skill.target.concat(ally);
      } else if (state.skill.aim === "otherally") {
        state.skill.target = state.button.ally.filter(function (x) {
          return x.name !== state.skill.offense;
        }).map(function (x) {
          return x.name;
        });
      } else {
        state.skill.target = [payload.name];
      } //Register Skill


      this.packet.push(this.state.skill); //Energy Management

      energyManagement(state.skill, "substract"); //Button Management
      // buttonManagement(state.skill, "onSkill");

      buttonManagement(state.skill, "onTarget"); //State Management

      state.button.ally[state.skill.heroIndex].onSkill = true; //Clean Skill Buffer

      state.skill = {
        offense: null,
        skill: null,
        skillId: null,
        skillName: null,
        target: null,
        aim: null,
        heroIndex: null
      };
    },
    onAttack: function onAttack(payload) {
      //Sound
      this.$refs.soundClick.play();
      this.state.energy.modal = true;
    },
    onDescription: function onDescription(payload) {
      var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (option === undefined) {
        option = "ally";
      } //Sound


      this.$refs.soundClick.play(); //Define

      var owner = this.source[option][payload.heroIndex];
      var skillIndex = owner.skill.findIndex(function (x) {
        return x.id === payload.skillId;
      });
      var config = {
        nameId: payload.nameId,
        skill: skillIndex,
        skillId: payload.skillId,
        heroIndex: payload.heroIndex,
        option: option
      };
      var skill = owner.skill[config.skill]; //Map Description

      var map = {
        name: skill.name,
        energy: {
          a: skill.energy.a,
          i: skill.energy.i,
          s: skill.energy.s,
          w: skill.energy.w,
          r: skill.energy.r,
          total: skill.energy.a + skill.energy.i + skill.energy.s + skill.energy.w + skill.energy.r
        },
        description: skill.description,
        classes: skill.classes,
        cooldown: skill.cooldown
      };
      var alt = skill.alt !== false ? skill.alt : false; //Buffer Description

      var state = this.state;
      state.description = {
        nameId: config.nameId,
        skill: config.skillId,
        heroIndex: config.heroIndex,
        map: map,
        alt: alt,
        option: option
      };
    },
    onStatus: function onStatus(payload) {
      console.log(payload);

      var status = _.concat(payload.onAttack, payload.onReceive, payload.onState, payload.onSelf);

      console.log(status);

      var group = _.groupBy(status, "nameId");

      console.log(group);

      var subgroup = _.toArray(group).map(function (x) {
        return _.toArray(_.groupBy(x, "skillIndex"));
      });

      var prep = subgroup.map(function (x) {
        return x[0];
      });
      var final = prep.map(function (x) {
        console.log(x[0]);
        var info = x[0];
        return {
          nameId: info.nameId,
          status: info.skillIndex,
          val: x
        };
      });
      console.log(prep);
      console.log(final);
      return final; // let subgroup = group.map(x => _.groupBy(x, "skillIndex"));
    },
    onGetImage: function onGetImage(payload, option) {
      if (option === "packet") {
        var index = this.source.ally.findIndex(function (x) {
          return x.name === payload.offense;
        });
        var nameId = this.source.ally[index].nameId;
        return "/assets/character/" + nameId.slice(0, -1) + "/skill" + (payload.skill + 1) + "/avatar.jpg";
      } else if (option === "char") {
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/avatar.jpg";
      } else if (option === "skill") {
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/skill" + (payload.skill + 1) + "/avatar.jpg";
      } else if (option === "status") {
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/skill" + payload.skill + "/avatar.jpg";
      } else if (option === "targeting") {
        var _index = this.packet.findIndex(function (x) {
          return x.offense === payload.name;
        });

        var skillId = this.packet[_index].skillId;
        return "/assets/character/" + payload.nameId.slice(0, -1) + "/skill" + (skillId + 1) + "/avatar.jpg";
      }
    },
    targetingCue: function targetingCue(payload, nameId) {
      var name = payload;
      var index = this.packet.findIndex(function (x) {
        return x.offense === payload;
      });
      var packet = this.packet[index];
      var result = {
        name: name,
        skillIndex: packet.skill,
        skillId: packet.skillId,
        heroIndex: packet.heroIndex,
        target: packet.target
      };

      if (nameId) {
        result.nameId = nameId;
      }

      console.log(result);
      return result;
    },
    onHP: function onHP(hp) {
      if (hp > 70) {
        return "l--hp-full";
      } else if (hp <= 70 && hp >= 40) {
        return "l--hp-mid";
      } else {
        return "l--hp-low";
      }
    }
  }
});
"use strict";

function energyManagement(temporary, option) {
  var energy = temporary.energy ? temporary.energy : app.source.energy.ally;
  var skill = temporary.skillBind ? temporary.skillBind : app.source.ally[temporary.heroIndex].skill[temporary.skill].energy;
  var total = {
    energy: energy.a + energy.i + energy.s + energy.w,
    skill: skill.a + skill.i + skill.s + skill.w
  };

  if (option === "substract") {
    if (skill.a > 0) {
      energy.a -= skill.a;
      energy.r -= skill.a;
    }

    if (skill.i > 0) {
      energy.i -= skill.i;
      energy.r -= skill.i;
    }

    if (skill.s > 0) {
      energy.s -= skill.s;
      energy.r -= skill.s;
    }

    if (skill.w > 0) {
      energy.w -= skill.w;
      energy.r -= skill.w;
    }

    if (skill.r > 0) {
      energy.r -= skill.r;
      app.state.energy.random += skill.r;
    }
  } else if (option === "add") {
    if (skill.a > 0) {
      energy.a += skill.a;
      energy.r += skill.a;
    }

    if (skill.i > 0) {
      energy.i += skill.i;
      energy.r += skill.i;
    }

    if (skill.s > 0) {
      energy.s += skill.s;
      energy.r += skill.s;
    }

    if (skill.w > 0) {
      energy.w += skill.w;
      energy.r += skill.w;
    }

    if (skill.r > 0) {
      energy.r += skill.r;
      app.state.energy.random -= skill.r;
    }
  } else if (option === "check") {
    var active = true;

    if (total.energy >= total.skill) {
      var count = [true, true, true, true, true];

      if (skill.a >= 0) {
        count[0] = energy.a >= skill.a ? false : true;
      }

      if (skill.i >= 0) {
        count[1] = energy.i >= skill.i ? false : true;
      }

      if (skill.s >= 0) {
        count[2] = energy.s >= skill.s ? false : true;
      }

      if (skill.w >= 0) {
        count[3] = energy.w >= skill.w ? false : true;
      }

      if (skill.r >= 0) {
        count[4] = energy.r >= total.skill + skill.r ? false : true;
      }

      if (count.filter(function (x) {
        return x === false;
      }).length === 5) {
        active = false;
      } else {
        active = true;
      }
    }

    return active;
  }
}

function buttonManagement(payload, option) {
  //Target Button
  if (option !== "onSelf") {
    if (payload.aim === "enemy") {
      app.state.button.enemy.forEach(function (x) {
        //Define
        var skill = app.source.ally[payload.heroIndex].skill[payload.skill];
        var enemyStatus = app.source.enemy[x.index].status; //Invulnerability

        var state = enemyStatus.onState;
        var invulnerable = invulnerableManagement(state, skill); //Disable

        x.button = x.disabled || invulnerable ? true : !x.button; //Ignore

        var ignore = ignoreManagement(state, skill);
        console.log(ignore); //Prevent Invulnerability

        if (option === "onSkill" && enemyStatus.onState.some(function (x) {
          return x.type === "disableDrIv";
        }) && ignore === false) {
          console.log('hi');
          x.button = false;
        }

        console.log(x.button); //Marking

        if (payload.marking === true) {
          var skillName = skill.name;
          var marking = enemyStatus.onReceive.some(function (x) {
            return x.name === skillName;
          }) || enemyStatus.onState.some(function (x) {
            return x.name === skillName;
          });

          if (marking === true) {
            x.button = true;
          }
        }
      });
    } else if (payload.aim === "enemylock") {
      app.state.button.enemy.forEach(function (x) {
        //Define
        var skill = app.source.ally[payload.heroIndex].skill[payload.skill];
        var enemyStatus = app.source.enemy[x.index].status;
        var lock = enemyStatus.onState.some(function (x) {
          return x.type === "state" && x.info === skill.name;
        });

        if (lock === true) {
          //Invulnerability
          var state = enemyStatus.onState;
          var invulnerable = invulnerableManagement(state, skill); //Disable

          x.button = x.disabled || invulnerable ? true : !x.button; //Ignore

          var ignore = ignoreManagement(state, skill);
          console.log(invulnerable); //Prevent Invulnerability

          if (option === "onSkill" && enemyStatus.onState.some(function (x) {
            return x.type === "disableDrIv";
          }) && ignore === false) {
            x.button = false;
          } //Marking


          if (payload.marking === true) {
            var skillName = skill.name;
            var marking = enemyStatus.onReceive.some(function (x) {
              return x.name === skillName;
            }) || enemyStatus.onState.some(function (x) {
              return x.name === skillName;
            });

            if (marking === true) {
              x.button = true;
            }
          }
        }
      });
    } else if (payload.aim === "allenemy" || payload.aim === "randomenemy" || payload.aim === "allenemyallally") {
      app.state.button.enemy.forEach(function (x) {
        //Define
        var skill = app.source.ally[payload.heroIndex].skill[payload.skill];
        var enemyStatus = app.source.enemy[x.index].status; //Invulnerability

        var state = enemyStatus.onState;
        var invulnerable = invulnerableManagement(state, skill); //Disable

        x.button = x.disabled || invulnerable ? true : !x.button; //Prevent Invulnerability

        if (option === "onSkill" && enemyStatus.onState.some(function (x) {
          return x.type === "disableDrIv";
        })) {
          x.button = false;
        }
      });
    } else if (payload.aim === "ally" || payload.aim === "allally") {
      app.state.button.ally.forEach(function (x) {
        return x.button = x.disabled ? true : !x.button;
      });
    } else if (payload.aim === "otherally") {
      app.state.button.ally.forEach(function (x) {
        var name = app.state.button.ally[payload.heroIndex].name;

        if (x.name !== name) {
          x.button = x.disabled ? true : !x.button;
        }
      });
    } else if (payload.aim === "self") {
      var ally = app.state.button.ally[payload.heroIndex];
      ally.button = ally.disabled ? true : !ally.button;
    }
  } //Skill Button


  if (option === "onTarget") {
    console.log("onSkill");
    app.state.button.ally.forEach(function (x) {
      if (x.onSkill === false) {
        x.skill.forEach(function (s) {
          s.button = true;

          if (x.name === payload.offense && s.name === app.source.ally[payload.heroIndex].skill[payload.skill].name) {
            s.button = false;
          }
        });
      }
    });
  }

  if (option === "onCancel") {
    console.log("onCancel");
    app.state.button.ally.forEach(function (x) {
      if (x.onSkill === false || x.name === payload.offense) {
        x.skill.forEach(function (s) {
          s.button = s.disabled ? true : false;

          if (x.name === payload.offense && s.name === app.source.ally[payload.heroIndex].skill[payload.skill].name) {
            s.button = false;
          }
        });
      }
    });
  } else if (option === "onTarget") {
    console.log("onTarget");
    app.state.button.ally.forEach(function (x) {
      var index = app.packet.findIndex(function (s) {
        return s.offense === x.name;
      });

      if (index < 0) {
        x.skill.forEach(function (s) {
          s.button = s.disabled ? true : false;
        });
      }
    });
  } else if (option === "onSelf") {
    console.log("onSelf");
    app.state.button.ally[payload.heroIndex].skill.forEach(function (s) {
      s.button = s.disabled ? true : false;
    });
  } //Energy Management


  if (option !== "onSkill") {
    app.state.button.ally.forEach(function (x, xi) {
      if (x.onSkill === false && x.name !== payload.offense) {
        console.log(x.name);
        console.log(option);
        x.skill.forEach(function (s, si) {
          var energy = energyManagement({
            heroIndex: xi,
            skill: si
          }, "check");
          s.button = s.disabled || energy ? true : false;

          if (x.name === payload.offense && s.name === app.source.ally[payload.heroIndex].skill[payload.skill].name) {
            s.button = false;
          }
        });
      }

      if ((option === "onSelf" || option === "onCancel") && x.name === payload.offense) {
        x.skill.forEach(function (s, si) {
          var energy = energyManagement({
            heroIndex: xi,
            skill: si
          }, "check");
          s.button = s.disabled || energy ? true : false;
        });
      }
    });
  }
}

function stunManagement(onState, skill) {
  var stun = onState.map(function (x) {
    if (x.type === "stun") {
      var ignore = ignoreManagement(onState, x);

      var intersect = _.intersection(x.classes, skill.classes);

      var evaluate;

      if (x.info === "inclusive") {
        evaluate = intersect.length > 0 ? true : false;
      } else if (x.info === "declusive") {
        evaluate = intersect.length === 0 ? true : false;
      }

      if (evaluate && !ignore) {
        return true;
      } else {
        return false;
      }
    }
  });

  if (stun.filter(function (x) {
    return x === true;
  }).length > 0) {
    return true;
  } else {
    return false;
  }
}

function invulnerableManagement(onState, skill) {
  var invulnerable = onState.map(function (x) {
    if (x.type === "invulnerable") {
      var ignoreInvul = skill.ignoreInvul;

      var intersect = _.intersection(x.classes, skill.classes);

      var evaluate;

      if (x.info === "inclusive") {
        evaluate = intersect.length > 0 ? true : false;
      } else if (x.info === "declusive") {
        evaluate = intersect.length === 0 ? true : false;
      }

      if (evaluate && !ignoreInvul) {
        return true;
      } else {
        return false;
      }
    }
  });

  if (invulnerable.filter(function (x) {
    return x === true;
  }).length > 0) {
    return true;
  } else {
    return false;
  }
}

function ignoreManagement(onState, skill) {
  var ignore = onState.map(function (x) {
    if (x.type === "ignore") {
      var intersect = _.intersection(x.classes, skill.classes);

      var evaluate;

      if (x.info === "inclusive") {
        evaluate = intersect.length > 0 ? true : false;
      } else if (x.info === "declusive") {
        evaluate = intersect.length === 0 ? true : false;
      }

      if (evaluate) {
        return true;
      } else {
        return false;
      }
    }
  });

  if (ignore.filter(function (x) {
    return x === true;
  }).length > 0) {
    return true;
  } else {
    return false;
  }
}
"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function vueBind(payload) {
  var username = getCookie("username");
  console.log(payload);
  var ally = payload.team.teamEven === username ? "teamEven" : "teamOdd";
  var enemy = payload.team.teamEven === username ? "teamOdd" : "teamEven";
  var turnVal = ally === "teamEven" ? 0 : 1;
  var myTurn = payload.turn % 2 === turnVal ? true : false;

  if (payload.team.teamEven !== username && payload.team.teamOdd !== username) {
    console.log("spectate");
    app.mode = "spectate";
    myTurn = false; // return;
  }

  if (myTurn === true) {
    app.$refs.soundStartTurn.play();
  } //Time


  var timeDiff = (Date.now() - payload.timestamp) / 1000;
  var timeCalc = Math.floor(45 - timeDiff);
  var remaining = 100 * (timeCalc / 45);
  console.log(payload.timestamp, timeDiff, timeCalc, remaining);

  if (remaining < 0) {
    remaining = 0;
  }

  app.state.timer.turn = remaining; // if (payload.winner.state === true && payload.winner.name === username) {
  // } else if (
  //   payload.winner.state === true &&
  //   payload.winner.name !== username
  // ) {
  //   app.$refs.soundLose.play();
  // }

  var store = {
    energy: {
      ally: payload.energy[ally],
      enemy: payload.energy[enemy]
    },
    ally: payload[ally].map(function (x) {
      return _objectSpread({}, x, {
        skill: app.mode === "game" ? x.skill : x.skill.sort(function (a, b) {
          return a.id - b.id;
        }),
        indicator: statusView(x.name, x.status, turnVal)
      });
    }),
    enemy: payload[enemy].map(function (x) {
      return _objectSpread({}, x, {
        skill: x.skill.sort(function (a, b) {
          return a.id - b.id;
        }),
        indicator: statusView(x.name, x.status, turnVal)
      });
    }),
    turn: payload.turn,
    myTurn: myTurn,
    turnVal: turnVal,
    room: payload.room,
    meta: {
      myName: payload.team[ally],
      theirName: payload.team[enemy]
    },
    timestamp: payload.timestamp
  };
  store.energy.ally.r = store.energy.ally.a + store.energy.ally.i + store.energy.ally.s + store.energy.ally.w;
  console.log(store);
  var button = {
    ally: store.ally.map(function (x) {
      // let disabled = x.status.onState.findIndex(x => x.type === 'stun') > -1 || x.hp <= 0 ? true : false
      var disabled = x.hp <= 0 ? true : false; // let stun = x.status.onState.some(x => x.type === "stun") ? true : false;

      return {
        name: x.name,
        button: true,
        onSkill: false,
        disabled: disabled,
        skill: x.skill.map(function (s) {
          // console.log(s.type);
          var energy = energyManagement({
            energy: store.energy.ally,
            skillBind: s.energy
          }, "check");
          var stun = stunManagement(x.status.onState, s); // let disableDrVr =
          //   s.type === "invulnerable" &&
          //   x.status.onState.some(x => x.type === "disableDrIv")
          //     ? true
          //     : false;

          var disabled = stun || s.required || s.state === "cooldown" || myTurn === false || x.hp <= 0 ? true : false;
          return {
            name: s.name,
            disabled: disabled,
            button: disabled || energy ? true : false
          };
        })
      };
    }),
    enemy: store.enemy.map(function (x, i) {
      // let disabled =
      //   x.status.onState.some(x => x.type === "invulnerable") || x.hp <= 0
      //     ? true
      //     : false;
      var disabled = x.hp <= 0 ? true : false;
      return {
        name: x.name,
        index: i,
        disabled: disabled,
        button: true
      };
    })
  };
  app.source = store;
  app.state.button = button;
  app.state.winner = payload.winner;
  app.state.exchange.modal = false;
}

function statusView(name, payload, turnVal) {
  console.log(name.slice(-1), payload);

  var status = _.concat(payload.onAttack, payload.onReceive, payload.onState, payload.onSelf);

  console.log("invisible", turnVal, name.slice(-1));
  status = status.filter(function (x) {
    return x.isInvisible === false || x.isInvisible !== false && Number(x.nameId.slice(-1)) === turnVal;
  }); // if (turnVal === Number(name.slice(-1))) {
  //   status = status.filter(
  //     x => x.isInvisible === false || x.isInvisible !== false && Number(x.nameId.slice(-1)) === turnVal
  //   );
  // } else {
  //   status = status.filter(
  //     x => x.isInvisible === false || x.isInvisible !== false && Number(x.nameId.slice(-1)) === turnVal
  //   );
  // }

  var groupByNameId = _.groupBy(status, "nameId");

  var valuesByNameId = _.values(groupByNameId);

  var groupBySkillIndex = valuesByNameId.map(function (x) {
    return _.groupBy(x, "skillIndex");
  });

  var valuesBySkillIndex = _.values(groupBySkillIndex);

  var concatValues = [];
  valuesBySkillIndex.forEach(function (x) {
    concatValues = concatValues.concat(_.values(x));
  });
  var final = concatValues.map(function (x) {
    var info = x[0];
    return {
      name: info.name,
      nameId: info.nameId,
      skillIndex: info.skillIndex,
      active: info.active,
      val: x
    };
  });
  return final;
}
"use strict";

function initiate() {
  var url = window.location.href.split("/");
  var room = url[url.length - 1];

  if (room !== "") {
    socket.emit("initiate", {
      room: room
    });
    chat.emit("gameInitiate", {
      room: room
    });
    chat.emit("lobbyInitiate");
  } else {// window.location.replace('/');
  }
}

initiate();
setInterval(function () {
  if (app.source.turn == undefined || app.state.winner.state !== false) {
    return;
  }

  if (app.state.timer.turn > 0) {
    var timer = app.state.timer.turn - 2.2;

    if (timer < 0) {
      timer = 0;
    }

    app.state.timer.turn = timer;
  } else if (app.state.timer.turn <= 0 && app.source.myTurn === true) {
    var timeDiff = (Date.now() - app.source.timestamp) / 1000;
    var timeCalc = 45 - timeDiff;
    var remaining = 100 * (timeCalc / 45); // console.log(app.source.timestamp, timeDiff, timeCalc, remaining);

    if (remaining <= 0 && app.state.timer.turn <= 0 && app.source.myTurn === true) {
      var payload = {
        energy: {
          a: 0,
          i: 0,
          s: 0,
          w: 0
        },
        packet: []
      };
      app.onDone(payload);
      app.source.myTurn = false;
    }
  }
}, 1000);

window.onfocus = function () {
  document.title = "Anime Rumble";
};

function scrollChat() {
  var container = app.$el.querySelector("#chat");
  container.scrollTop = container.scrollHeight;
}
"use strict";

socket.on("apply", function (payload) {
  document.title = "(!) Anime Rumble";
  vueBind(payload);
});
socket.on("noMatch", function (payload) {
  console.log("none");
  window.location.replace("/");
});
chat.on("chat", function (payload) {
  if (payload.channel === "ingame") {
    app.chat.push(payload.message);

    if (app.chatChannel !== "ingame") {
      app.chatNotif.ingame = true;
    } else {
      scrollChat();
    }
  } else if (payload.channel === "lobby") {
    app.lobbychat.push(payload.message);

    if (app.chatChannel !== "lobby") {
      app.chatNotif.lobby = true;
    } else {
      scrollChat();
    }
  }
});
chat.on("gameInitiate", function (payload) {
  app.chat = payload;
  setTimeout(function () {
    scrollChat();
  }, 100);
});
chat.on("lobbyInitiate", function (payload) {
  app.lobbychat = payload;
});
"use strict";

function getParameterName(name, url) {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, "\\$&");
  var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
      results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return "";
  return decodeURIComponent(results[2].replace(/\+/g, " "));
}

var setCookie = function setCookie(name, value) {
  var days = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "/";
  var expires = new Date(Date.now() + days * 864e5).toGMTString();
  document.cookie = name + "=" + encodeURIComponent(value) + "; expires=" + expires + "; path=" + path;
};

var getCookie = function getCookie(name) {
  return document.cookie.split("; ").reduce(function (r, v) {
    var parts = v.split("=");
    return parts[0] === name ? decodeURIComponent(parts[1]) : r;
  }, "");
};

var deleteCookie = function deleteCookie(name, path) {
  setCookie(name, "", -1, path);
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwLmpzIiwidnVlLmpzIiwibWFuYWdlbWVudC5qcyIsInJlbmRlcmVyLmpzIiwiZ2VuZXJhbC5qcyIsInNvY2tldC5qcyIsImhlbHBlci5qcyJdLCJuYW1lcyI6WyJzb2NrZXQiLCJpbyIsImNoYXQiLCJWdWUiLCJ1c2UiLCJWVG9vbHRpcCIsImFwcCIsImVsIiwiZGF0YSIsIm1vZGUiLCJsb2JieWNoYXQiLCJjaGF0U2VuZCIsImNoYXRDaGFubmVsIiwiY2hhdE5vdGlmIiwibG9iYnkiLCJpbmdhbWUiLCJzb3VyY2UiLCJlbmVyZ3kiLCJhbGx5IiwibWV0YSIsInBhY2tldCIsInN0YXRlIiwic2tpbGwiLCJvZmZlbnNlIiwic2tpbGxJZCIsInNraWxsTmFtZSIsInRhcmdldCIsImFpbSIsImhlcm9JbmRleCIsInRpbWVyIiwidHVybiIsIm9uU2tpbGwiLCJidXR0b24iLCJkZXNjcmlwdGlvbiIsIndpbm5lciIsIm5hbWUiLCJtb2RhbCIsInJhbmRvbSIsImV4Y2hhbmdlIiwidXNlZCIsInZhbCIsInNob3dNb2RhbCIsIm1ldGhvZHMiLCJvblN1cnJlbmRlciIsImNvbnNvbGUiLCJsb2ciLCJlbWl0Iiwicm9vbSIsIm9uQ2hhdCIsImNoYW5uZWwiLCJtZXNzYWdlIiwic2Nyb2xsQ2hhdCIsInNldFRpbWVvdXQiLCJvbkV4Y2hhbmdlIiwiZSIsIiRyZWZzIiwic291bmRDbGljayIsInBsYXkiLCJyIiwiY29zdCIsImZvckVhY2giLCJ4IiwieGkiLCJzIiwic2kiLCJlbmVyZ3lNYW5hZ2VtZW50IiwiZGlzYWJsZWQiLCJidXR0b25NYW5hZ2VtZW50Iiwib25Eb25lIiwibXlUdXJuIiwic291bmRFbmRUdXJuIiwiZmlsdGVyIiwidW5zaGlmdCIsIm1zZyIsInBheWxvYWQiLCJza2lsbEluZGV4IiwibWFya2luZyIsInRlbXBvcmFyeSIsImlzT25Ta2lsbCIsIm9uVGFyZ2V0IiwiZW5lbXkiLCJtYXAiLCJjb25jYXQiLCJwdXNoIiwib25BdHRhY2siLCJvbkRlc2NyaXB0aW9uIiwib3B0aW9uIiwidW5kZWZpbmVkIiwib3duZXIiLCJmaW5kSW5kZXgiLCJpZCIsImNvbmZpZyIsIm5hbWVJZCIsImEiLCJpIiwidyIsInRvdGFsIiwiY2xhc3NlcyIsImNvb2xkb3duIiwiYWx0Iiwib25TdGF0dXMiLCJzdGF0dXMiLCJfIiwib25SZWNlaXZlIiwib25TdGF0ZSIsIm9uU2VsZiIsImdyb3VwIiwiZ3JvdXBCeSIsInN1Ymdyb3VwIiwidG9BcnJheSIsInByZXAiLCJmaW5hbCIsImluZm8iLCJvbkdldEltYWdlIiwiaW5kZXgiLCJzbGljZSIsInRhcmdldGluZ0N1ZSIsInJlc3VsdCIsIm9uSFAiLCJocCIsInNraWxsQmluZCIsImFjdGl2ZSIsImNvdW50IiwibGVuZ3RoIiwiZW5lbXlTdGF0dXMiLCJpbnZ1bG5lcmFibGUiLCJpbnZ1bG5lcmFibGVNYW5hZ2VtZW50IiwiaWdub3JlIiwiaWdub3JlTWFuYWdlbWVudCIsInNvbWUiLCJ0eXBlIiwibG9jayIsInN0dW5NYW5hZ2VtZW50Iiwic3R1biIsImludGVyc2VjdCIsImludGVyc2VjdGlvbiIsImV2YWx1YXRlIiwiaWdub3JlSW52dWwiLCJ2dWVCaW5kIiwidXNlcm5hbWUiLCJnZXRDb29raWUiLCJ0ZWFtIiwidGVhbUV2ZW4iLCJ0dXJuVmFsIiwidGVhbU9kZCIsInNvdW5kU3RhcnRUdXJuIiwidGltZURpZmYiLCJEYXRlIiwibm93IiwidGltZXN0YW1wIiwidGltZUNhbGMiLCJNYXRoIiwiZmxvb3IiLCJyZW1haW5pbmciLCJzdG9yZSIsInNvcnQiLCJiIiwiaW5kaWNhdG9yIiwic3RhdHVzVmlldyIsIm15TmFtZSIsInRoZWlyTmFtZSIsInJlcXVpcmVkIiwiaXNJbnZpc2libGUiLCJOdW1iZXIiLCJncm91cEJ5TmFtZUlkIiwidmFsdWVzQnlOYW1lSWQiLCJ2YWx1ZXMiLCJncm91cEJ5U2tpbGxJbmRleCIsInZhbHVlc0J5U2tpbGxJbmRleCIsImNvbmNhdFZhbHVlcyIsImluaXRpYXRlIiwidXJsIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwic3BsaXQiLCJzZXRJbnRlcnZhbCIsIm9uZm9jdXMiLCJkb2N1bWVudCIsInRpdGxlIiwiY29udGFpbmVyIiwiJGVsIiwicXVlcnlTZWxlY3RvciIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsIm9uIiwicmVwbGFjZSIsImdldFBhcmFtZXRlck5hbWUiLCJyZWdleCIsIlJlZ0V4cCIsInJlc3VsdHMiLCJleGVjIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2V0Q29va2llIiwidmFsdWUiLCJkYXlzIiwicGF0aCIsImV4cGlyZXMiLCJ0b0dNVFN0cmluZyIsImNvb2tpZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlZHVjZSIsInYiLCJwYXJ0cyIsImRlbGV0ZUNvb2tpZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTQyxHQUFHLE9BQUgsQ0FBYjtBQUNBLElBQUlDLE9BQU9ELEdBQUcsT0FBSCxDQUFYOzs7QUNEQUUsSUFBSUMsR0FBSixDQUFRQyxRQUFSO0FBQ0EsSUFBSUMsTUFBTSxJQUFJSCxHQUFKLENBQVE7QUFDaEJJLE1BQUksTUFEWTtBQUVoQkMsUUFBTTtBQUNKQyxVQUFNLE1BREY7QUFFSlAsVUFBTSxFQUZGO0FBR0pRLGVBQVcsRUFIUDtBQUlKQyxjQUFVLEVBSk47QUFLSkMsaUJBQWEsUUFMVDtBQU1KQyxlQUFXO0FBQ1RDLGFBQU8sS0FERTtBQUVUQyxjQUFRO0FBRkMsS0FOUDtBQVVKQyxZQUFRO0FBQ05DLGNBQVE7QUFDTkMsY0FBTTtBQURBLE9BREY7QUFJTkMsWUFBTTtBQUpBLEtBVko7QUFnQkpDLFlBQVEsRUFoQko7QUFpQkpDLFdBQU87QUFDTEMsYUFBTztBQUNMQyxpQkFBUyxJQURKO0FBRUxELGVBQU8sSUFGRjtBQUdMRSxpQkFBUyxJQUhKO0FBSUxDLG1CQUFXLElBSk47QUFLTEMsZ0JBQVEsSUFMSDtBQU1MQyxhQUFLLElBTkE7QUFPTEMsbUJBQVc7QUFQTixPQURGO0FBVUxDLGFBQU87QUFDTEMsY0FBTTtB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OUosSUFBRCxFQUFPK0osS0FBUCxFQUF1QztBQUFBLE1BQXpCQyxJQUF5Qix1RUFBbEIsQ0FBa0I7QUFBQSxNQUFmQyxJQUFlLHVFQUFSLEdBQVE7QUFDdkQsTUFBTUMsVUFBVSxJQUFJbEQsSUFBSixDQUFTQSxLQUFLQyxHQUFMLEtBQWErQyxPQUFPLEtBQTdCLEVBQW9DRyxXQUFwQyxFQUFoQjtBQUNBcEIsV0FBU3FCLE1BQVQsR0FDRXBLLE9BQ0EsR0FEQSxHQUVBcUssbUJBQW1CTixLQUFuQixDQUZBLEdBR0EsWUFIQSxHQUlBRyxPQUpBLEdBS0EsU0FMQSxHQU1BRCxJQVBGO0FBUUQsQ0FWRDs7QUFZQSxJQUFNeEQsWUFBWSxTQUFaQSxTQUFZLE9BQVE7QUFDeEIsU0FBT3NDLFNBQVNxQixNQUFULENBQWdCeEIsS0FBaEIsQ0FBc0IsSUFBdEIsRUFBNEIwQixNQUE1QixDQUFtQyxVQUFDL0ksQ0FBRCxFQUFJZ0osQ0FBSixFQUFVO0FBQ2xELFFBQU1DLFFBQVFELEVBQUUzQixLQUFGLENBQVEsR0FBUixDQUFkO0FBQ0EsV0FBTzRCLE1BQU0sQ0FBTixNQUFheEssSUFBYixHQUFvQjZKLG1CQUFtQlcsTUFBTSxDQUFOLENBQW5CLENBQXBCLEdBQW1EakosQ0FBMUQ7QUFDRCxHQUhNLEVBR0osRUFISSxDQUFQO0FBSUQsQ0FMRDs7QUFPQSxJQUFNa0osZUFBZSxTQUFmQSxZQUFlLENBQUN6SyxJQUFELEVBQU9pSyxJQUFQLEVBQWdCO0FBQ25DSCxZQUFVOUosSUFBVixFQUFnQixFQUFoQixFQUFvQixDQUFDLENBQXJCLEVBQXdCaUssSUFBeEI7QUFDRCxDQUZEIiwiZmlsZSI6ImdhbWUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IHNvY2tldCA9IGlvKFwiL2dhbWVcIik7XG5sZXQgY2hhdCA9IGlvKFwiL2NoYXRcIik7XG4iLCJWdWUudXNlKFZUb29sdGlwKTtcbmxldCBhcHAgPSBuZXcgVnVlKHtcbiAgZWw6IFwiI2FwcFwiLFxuICBkYXRhOiB7XG4gICAgbW9kZTogXCJnYW1lXCIsXG4gICAgY2hhdDogW10sXG4gICAgbG9iYnljaGF0OiBbXSxcbiAgICBjaGF0U2VuZDogXCJcIixcbiAgICBjaGF0Q2hhbm5lbDogXCJpbmdhbWVcIixcbiAgICBjaGF0Tm90aWY6IHtcbiAgICAgIGxvYmJ5OiBmYWxzZSxcbiAgICAgIGluZ2FtZTogZmFsc2VcbiAgICB9LFxuICAgIHNvdXJjZToge1xuICAgICAgZW5lcmd5OiB7XG4gICAgICAgIGFsbHk6IHt9XG4gICAgICB9LFxuICAgICAgbWV0YToge31cbiAgICB9LFxuICAgIHBhY2tldDogW10sXG4gICAgc3RhdGU6IHtcbiAgICAgIHNraWxsOiB7XG4gICAgICAgIG9mZmVuc2U6IG51bGwsXG4gICAgICAgIHNraWxsOiBudWxsLFxuICAgICAgICBza2lsbElkOiBudWxsLFxuICAgICAgICBza2lsbE5hbWU6IG51bGwsXG4gICAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgICAgYWltOiBudWxsLFxuICAgICAgICBoZXJvSW5kZXg6IG51bGxcbiAgICAgIH0sXG4gICAgICB0aW1lcjoge1xuICAgICAgICB0dXJuOiAxMDBcbiAgICAgIH0sXG4gICAgICBvblNraWxsOiBmYWxzZSxcbiAgICAgIGJ1dHRvbjoge30sXG4gICAgICBkZXNjcmlwdGlvbjogbnVsbCxcbiAgICAgIHdpbm5lcjoge1xuICAgICAgICBzdGF0ZTogZmFsc2UsXG4gICAgICAgIG5hbWU6IFwiXCJcbiAgICAgIH0sXG4gICAgICBlbmVyZ3k6IHtcbiAgICAgICAgbW9kYWw6IGZhbHNlLFxuICAgICAgICByYW5kb206IDBcbiAgICAgIH0sXG4gICAgICBleGNoYW5nZToge1xuICAgICAgICBtb2RhbDogZmFsc2UsXG4gICAgICAgIHVzZWQ6IGZhbHNlLFxuICAgICAgICBlbmVyZ3k6IHt9LFxuICAgICAgICB2YWw6IFwiXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHNob3dNb2RhbDogdHJ1ZVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgb25TdXJyZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS5sb2coXCJzdXJyZW5kZXJcIik7XG4gICAgICBzb2NrZXQuZW1pdChcInN1cnJlbmRlclwiLCB7IHJvb206IHRoaXMuc291cmNlLnJvb20gfSk7XG4gICAgfSxcbiAgICBvbkNoYXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IGNoYW5uZWwgPSB0aGlzLmNoYXRDaGFubmVsID09PSBcImluZ2FtZVwiID8gXCJpbmdhbWVcIiA6IFwibG9iYnlcIjtcblxuICAgICAgbGV0IHBhY2tldCA9IHtcbiAgICAgICAgY2hhbm5lbDogY2hhbm5lbCxcbiAgICAgICAgcm9vbTogdGhpcy5zb3VyY2Uucm9vbSxcbiAgICAgICAgbWVzc2FnZTogdGhpcy5jaGF0U2VuZFxuICAgICAgfTtcbiAgICAgIGNoYXQuZW1pdChcImNoYXRcIiwgcGFja2V0KTtcbiAgICAgIHRoaXMuY2hhdFNlbmQgPSBcIlwiO1xuICAgIH0sXG4gICAgc2Nyb2xsQ2hhdDogZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2Nyb2xsQ2hhdCgpO1xuICAgICAgfSwgMTAwKTtcbiAgICB9LFxuICAgIG9uRXhjaGFuZ2U6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIC8vU291bmRcbiAgICAgIHRoaXMuJHJlZnMuc291bmRDbGljay5wbGF5KCk7XG5cbiAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICB0aGlzLnNvdXJjZS5lbmVyZ3kuYWxseSA9IGUuZW5lcmd5O1xuICAgICAgdGhpcy5zb3VyY2UuZW5lcmd5LmFsbHkuciA9XG4gICAgICAgIHRoaXMuc291cmNlLmVuZXJneS5hbGx5LnIgLSB0aGlzLnN0YXRlLmVuZXJneS5yYW5kb207XG4gICAgICBzdGF0ZS5leGNoYW5nZS5lbmVyZ3kgPSBlLmNvc3Q7XG4gICAgICBzdGF0ZS5leGNoYW5nZS5tb2RhbCA9IGZhbHNlO1xuICAgICAgc3RhdGUuZXhjaGFuZ2UudXNlZCA9IHRydWU7XG4gICAgICBzdGF0ZS5leGNoYW5nZS52YWwgPSBlLmV4Y2hhbmdlO1xuXG4gICAgICBzdGF0ZS5idXR0b24uYWxseS5mb3JFYWNoKCh4LCB4aSkgPT4ge1xuICAgICAgICBpZiAoeC5vblNraWxsID09PSBmYWxzZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHgubmFtZSk7XG4gICAgICAgICAgeC5za2lsbC5mb3JFYWNoKChzLCBzaSkgPT4ge1xuICAgICAgICAgICAgbGV0IGVuZXJneSA9IGVuZXJneU1hbmFnZW1lbnQoXG4gICAgICAgICAgICAgIHsgaGVyb0luZGV4OiB4aSwgc2tpbGw6IHNpIH0sXG4gICAgICAgICAgICAgIFwiY2hlY2tcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHMuYnV0dG9uID0gcy5kaXNhYmxlZCB8fCBlbmVyZ3kgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlbmVyZ3ksIHMuZGlzYWJsZWQsIHMuYnV0dG9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vQ2xlYW4gU2tpbGwgQnVmZmVyXG4gICAgICBpZiAoc3RhdGUuc2tpbGwub2ZmZW5zZSAhPT0gbnVsbCAmJiBzdGF0ZS5za2lsbC50YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgLy9Td2l0Y2ggQ2hvaWNlXG4gICAgICAgIC8vQnV0dG9uIE1hbmFnZW1lbnRcbiAgICAgICAgYnV0dG9uTWFuYWdlbWVudChzdGF0ZS5za2lsbCwgXCJvbkNhbmNlbFwiKTtcbiAgICAgICAgLy9DbGVhbiBCdWZmZXJcbiAgICAgICAgc3RhdGUuc2tpbGwgPSB7XG4gICAgICAgICAgb2ZmZW5zZTogbnVsbCxcbiAgICAgICAgICBza2lsbDogbnVsbCxcbiAgICAgICAgICBza2lsbElkOiBudWxsLFxuICAgICAgICAgIHNraWxsTmFtZTogbnVsbCxcbiAgICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgICAgYWltOiBudWxsLFxuICAgICAgICAgIGhlcm9JbmRleDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgb25Eb25lOiBmdW5jdGlvbihlKSB7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIGFwcC5zb3VyY2UubXlUdXJuID0gZmFsc2U7XG4gICAgICAvL1NvdW5kXG4gICAgICB0aGlzLiRyZWZzLnNvdW5kRW5kVHVybi5wbGF5KCk7XG5cbiAgICAgIC8vRGVmaW5lXG4gICAgICBsZXQgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgbGV0IHBhY2tldCA9IGUucGFja2V0O1xuXG4gICAgICAvL09yZ2FuaXplXG4gICAgICBzdGF0ZS5lbmVyZ3kubW9kYWwgPSBmYWxzZTtcbiAgICAgIHBhY2tldCA9IHBhY2tldC5maWx0ZXIoXG4gICAgICAgIHggPT5cbiAgICAgICAgICB4LnNraWxsICE9PSBudWxsICYmXG4gICAgICAgICAgeC5za2lsbElkICE9PSBudWxsICYmXG4gICAgICAgICAgeC5za2lsbE5hbWUgIT09IG51bGwgJiZcbiAgICAgICAgICB4Lm9mZmVuc2UgIT09IG51bGwgJiZcbiAgICAgICAgICB4LnRhcmdldCAhPT0gbnVsbCAmJlxuICAgICAgICAgIHguYWltICE9PSBudWxsICYmXG4gICAgICAgICAgeC5oZXJvSW5kZXggIT09IG51bGxcbiAgICAgICk7XG4gICAgICBwYWNrZXQudW5zaGlmdChlLmVuZXJneSk7XG4gICAgICBpZiAoc3RhdGUuZXhjaGFuZ2UudXNlZCA9PT0gdHJ1ZSkge1xuICAgICAgICBwYWNrZXQudW5zaGlmdChcbiAgICAgICAgICB7IG1zZzogXCJleGNoYW5nZVwiLCB2YWw6IHN0YXRlLmV4Y2hhbmdlLnZhbCB9LFxuICAgICAgICAgIHN0YXRlLmV4Y2hhbmdlLmVuZXJneVxuICAgICAgICApO1xuICAgICAgICBzdGF0ZS5leGNoYW5nZS51c2VkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vU2VuZFxuICAgICAgc29ja2V0LmVtaXQoXCJzZXF1ZW5jZVwiLCB7XG4gICAgICAgIHBhY2tldDogcGFja2V0LFxuICAgICAgICByb29tOiB0aGlzLnNvdXJjZS5yb29tXG4gICAgICB9KTtcblxuICAgICAgLy9SZXNldFxuICAgICAgc3RhdGUuZW5lcmd5LnJhbmRvbSA9IDA7XG4gICAgICB0aGlzLnBhY2tldCA9IFtdO1xuICAgICAgc3RhdGUuc2tpbGwgPSB7XG4gICAgICAgIG9mZmVuc2U6IG51bGwsXG4gICAgICAgIHNraWxsOiBudWxsLFxuICAgICAgICBza2lsbElkOiBudWxsLFxuICAgICAgICBza2lsbE5hbWU6IG51bGwsXG4gICAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgICAgYWltOiBudWxsLFxuICAgICAgICBoZXJvSW5kZXg6IG51bGxcbiAgICAgIH07XG4gICAgfSxcbiAgICBvblNraWxsOiBmdW5jdGlvbihwYXlsb2FkKSB7XG4gICAgICAvL0RlZmluZSBhbmQgU3dpdGNoIFN0YXRlXG4gICAgICBsZXQgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgbGV0IHNraWxsID0gdGhpcy5zb3VyY2UuYWxseVtwYXlsb2FkLmhlcm9JbmRleF0uc2tpbGxbcGF5bG9hZC5za2lsbEluZGV4XTtcbiAgICAgIGxldCBtYXJraW5nID0gc2tpbGwubWFya2luZztcbiAgICAgIGxldCBza2lsbE5hbWUgPSBza2lsbC5uYW1lO1xuICAgICAgbGV0IHRlbXBvcmFyeSA9IHtcbiAgICAgICAgb2ZmZW5zZTogcGF5bG9hZC5uYW1lLFxuICAgICAgICBza2lsbDogcGF5bG9hZC5za2lsbEluZGV4LFxuICAgICAgICBza2lsbElkOiBwYXlsb2FkLnNraWxsSWQsXG4gICAgICAgIHNraWxsTmFtZTogc2tpbGxOYW1lLFxuICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgIGFpbTogcGF5bG9hZC50YXJnZXQsXG4gICAgICAgIGhlcm9JbmRleDogcGF5bG9hZC5oZXJvSW5kZXgsXG4gICAgICAgIG1hcmtpbmc6IG1hcmtpbmdcbiAgICAgIH07XG5cbiAgICAgIC8vSXMgU2tpbGwgQ2hvc2VuP1xuICAgICAgbGV0IGlzT25Ta2lsbCA9IHN0YXRlLmJ1dHRvbi5hbGx5W3RlbXBvcmFyeS5oZXJvSW5kZXhdLm9uU2tpbGw7XG5cbiAgICAgIGlmIChcbiAgICAgICAgaXNPblNraWxsID09PSBmYWxzZSAmJlxuICAgICAgICBzdGF0ZS5za2lsbC5vZmZlbnNlID09PSBudWxsICYmXG4gICAgICAgIHN0YXRlLnNraWxsLnRhcmdldCA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIC8vRmlyc3QgQ2hvaWNlXG4gICAgICAgIC8vQnVmZmVyIFNraWxsXG4gICAgICAgIHN0YXRlLnNraWxsID0gdGVtcG9yYXJ5O1xuICAgICAgICAvL0J1dHRvbiBNYW5hZ2VtZW50XG4gICAgICAgIGJ1dHRvbk1hbmFnZW1lbnQodGVtcG9yYXJ5LCBcIm9uU2tpbGxcIik7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBpc09uU2tpbGwgPT09IGZhbHNlICYmXG4gICAgICAgIHN0YXRlLnNraWxsLm9mZmVuc2UgIT09IG51bGwgJiZcbiAgICAgICAgc3RhdGUuc2tpbGwudGFyZ2V0ID09PSBudWxsXG4gICAgICApIHtcbiAgICAgICAgLy9Td2l0Y2ggQ2hvaWNlXG4gICAgICAgIC8vQnV0dG9uIE1hbmFnZW1lbnRcbiAgICAgICAgYnV0dG9uTWFuYWdlbWVudChzdGF0ZS5za2lsbCwgXCJvbkNhbmNlbFwiKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgYnV0dG9uTWFuYWdlbWVudCh0ZW1wb3JhcnksIFwib25Ta2lsbFwiKTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgLy9CdWZmZXIgU2tpbGxcbiAgICAgICAgc3RhdGUuc2tpbGwgPSB0ZW1wb3Jhcnk7XG4gICAgICB9IGVsc2UgaWYgKGlzT25Ta2lsbCA9PT0gdHJ1ZSkge1xuICAgICAgICAvL0NhbmNlbCBDaG9pY2VcbiAgICAgICAgZW5lcmd5TWFuYWdlbWVudCh0ZW1wb3JhcnksIFwiYWRkXCIpO1xuICAgICAgICAvL0J1dHRvbiBNYW5hZ2VtZW50XG4gICAgICAgIGJ1dHRvbk1hbmFnZW1lbnQoc3RhdGUuc2tpbGwsIFwib25DYW5jZWxcIik7XG4gICAgICAgIGJ1dHRvbk1hbmFnZW1lbnQodGVtcG9yYXJ5LCBcIm9uU2VsZlwiKTtcbiAgICAgICAgdGhpcy5wYWNrZXQgPSB0aGlzLnBhY2tldC5maWx0ZXIoeCA9PiB4Lm9mZmVuc2UgIT09IHRlbXBvcmFyeS5vZmZlbnNlKTtcbiAgICAgICAgLy9DbGVhbiBTa2lsbCBCdWZmZXJcbiAgICAgICAgc3RhdGUuc2tpbGwgPSB7XG4gICAgICAgICAgb2ZmZW5zZTogbnVsbCxcbiAgICAgICAgICBza2lsbDogbnVsbCxcbiAgICAgICAgICBza2lsbElkOiBudWxsLFxuICAgICAgICAgIHNraWxsTmFtZTogbnVsbCxcbiAgICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgICAgYWltOiBudWxsLFxuICAgICAgICAgIGhlcm9JbmRleDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICAvL1N0YXRlIE1hbmFnZW1lbnRcbiAgICAgICAgc3RhdGUuYnV0dG9uLmFsbHlbdGVtcG9yYXJ5Lmhlcm9JbmRleF0ub25Ta2lsbCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25UYXJnZXQ6IGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAgICAgIC8vU291bmRcbiAgICAgIHRoaXMuJHJlZnMuc291bmRDbGljay5wbGF5KCk7XG5cbiAgICAgIC8vRGVmaW5lIFN0YXRlXG4gICAgICBsZXQgc3RhdGUgPSB0aGlzLnN0YXRlO1xuXG4gICAgICAvL0J1ZmZlciBTa2lsbFxuICAgICAgaWYgKHN0YXRlLnNraWxsLmFpbSA9PT0gXCJhbGxlbmVteVwiIHx8IHN0YXRlLnNraWxsLmFpbSA9PT0gXCJyYW5kb21lbmVteVwiKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHN0YXRlLmJ1dHRvbi5lbmVteSk7XG4gICAgICAgIHN0YXRlLnNraWxsLnRhcmdldCA9IHN0YXRlLmJ1dHRvbi5lbmVteVxuICAgICAgICAgIC5maWx0ZXIoeCA9PiB4LmJ1dHRvbiAhPT0gdHJ1ZSAmJiB4Lm5hbWUgIT09IHBheWxvYWQubmFtZSlcbiAgICAgICAgICAubWFwKHggPT4geC5uYW1lKTtcbiAgICAgICAgc3RhdGUuc2tpbGwudGFyZ2V0LnVuc2hpZnQocGF5bG9hZC5uYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuc2tpbGwuYWltID09PSBcImFsbGFsbHlcIikge1xuICAgICAgICBzdGF0ZS5za2lsbC50YXJnZXQgPSBzdGF0ZS5idXR0b24uYWxseS5tYXAoeCA9PiB4Lm5hbWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5za2lsbC5haW0gPT09IFwiYWxsZW5lbXlhbGxhbGx5XCIpIHtcbiAgICAgICAgc3RhdGUuc2tpbGwudGFyZ2V0ID0gc3RhdGUuYnV0dG9uLmVuZW15XG4gICAgICAgICAgLmZpbHRlcih4ID0+IHguYnV0dG9uICE9PSB0cnVlICYmIHgubmFtZSAhPT0gcGF5bG9hZC5uYW1lKVxuICAgICAgICAgIC5tYXAoeCA9PiB4Lm5hbWUpO1xuICAgICAgICBzdGF0ZS5za2lsbC50YXJnZXQudW5zaGlmdChwYXlsb2FkLm5hbWUpO1xuICAgICAgICBsZXQgYWxseSA9IHN0YXRlLmJ1dHRvbi5hbGx5Lm1hcCh4ID0+IHgubmFtZSk7XG4gICAgICAgIHN0YXRlLnNraWxsLnRhcmdldCA9IHN0YXRlLnNraWxsLnRhcmdldC5jb25jYXQoYWxseSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLnNraWxsLmFpbSA9PT0gXCJvdGhlcmFsbHlcIikge1xuICAgICAgICBzdGF0ZS5za2lsbC50YXJnZXQgPSBzdGF0ZS5idXR0b24uYWxseVxuICAgICAgICAgIC5maWx0ZXIoeCA9PiB4Lm5hbWUgIT09IHN0YXRlLnNraWxsLm9mZmVuc2UpXG4gICAgICAgICAgLm1hcCh4ID0+IHgubmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5za2lsbC50YXJnZXQgPSBbcGF5bG9hZC5uYW1lXTtcbiAgICAgIH1cbiAgICAgIC8vUmVnaXN0ZXIgU2tpbGxcbiAgICAgIHRoaXMucGFja2V0LnB1c2godGhpcy5zdGF0ZS5za2lsbCk7XG5cbiAgICAgIC8vRW5lcmd5IE1hbmFnZW1lbnRcbiAgICAgIGVuZXJneU1hbmFnZW1lbnQoc3RhdGUuc2tpbGwsIFwic3Vic3RyYWN0XCIpO1xuICAgICAgLy9CdXR0b24gTWFuYWdlbWVudFxuICAgICAgLy8gYnV0dG9uTWFuYWdlbWVudChzdGF0ZS5za2lsbCwgXCJvblNraWxsXCIpO1xuICAgICAgYnV0dG9uTWFuYWdlbWVudChzdGF0ZS5za2lsbCwgXCJvblRhcmdldFwiKTtcbiAgICAgIC8vU3RhdGUgTWFuYWdlbWVudFxuICAgICAgc3RhdGUuYnV0dG9uLmFsbHlbc3RhdGUuc2tpbGwuaGVyb0luZGV4XS5vblNraWxsID0gdHJ1ZTtcblxuICAgICAgLy9DbGVhbiBTa2lsbCBCdWZmZXJcbiAgICAgIHN0YXRlLnNraWxsID0ge1xuICAgICAgICBvZmZlbnNlOiBudWxsLFxuICAgICAgICBza2lsbDogbnVsbCxcbiAgICAgICAgc2tpbGxJZDogbnVsbCxcbiAgICAgICAgc2tpbGxOYW1lOiBudWxsLFxuICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgIGFpbTogbnVsbCxcbiAgICAgICAgaGVyb0luZGV4OiBudWxsXG4gICAgICB9O1xuICAgIH0sXG4gICAgb25BdHRhY2s6IGZ1bmN0aW9uKHBheWxvYWQpIHtcbiAgICAgIC8vU291bmRcbiAgICAgIHRoaXMuJHJlZnMuc291bmRDbGljay5wbGF5KCk7XG5cbiAgICAgIHRoaXMuc3RhdGUuZW5lcmd5Lm1vZGFsID0gdHJ1ZTtcbiAgICB9LFxuICAgIG9uRGVzY3JpcHRpb246IGZ1bmN0aW9uKHBheWxvYWQsIG9wdGlvbiA9IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG9wdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbiA9IFwiYWxseVwiO1xuICAgICAgfVxuXG4gICAgICAvL1NvdW5kXG4gICAgICB0aGlzLiRyZWZzLnNvdW5kQ2xpY2sucGxheSgpO1xuICAgICAgLy9EZWZpbmVcbiAgICAgIGxldCBvd25lciA9IHRoaXMuc291cmNlW29wdGlvbl1bcGF5bG9hZC5oZXJvSW5kZXhdO1xuICAgICAgbGV0IHNraWxsSW5kZXggPSBvd25lci5za2lsbC5maW5kSW5kZXgoeCA9PiB4LmlkID09PSBwYXlsb2FkLnNraWxsSWQpO1xuICAgICAgbGV0IGNvbmZpZyA9IHtcbiAgICAgICAgbmFtZUlkOiBwYXlsb2FkLm5hbWVJZCxcbiAgICAgICAgc2tpbGw6IHNraWxsSW5kZXgsXG4gICAgICAgIHNraWxsSWQ6IHBheWxvYWQuc2tpbGxJZCxcbiAgICAgICAgaGVyb0luZGV4OiBwYXlsb2FkLmhlcm9JbmRleCxcbiAgICAgICAgb3B0aW9uOiBvcHRpb25cbiAgICAgIH07XG4gICAgICBsZXQgc2tpbGwgPSBvd25lci5za2lsbFtjb25maWcuc2tpbGxdO1xuXG4gICAgICAvL01hcCBEZXNjcmlwdGlvblxuICAgICAgbGV0IG1hcCA9IHtcbiAgICAgICAgbmFtZTogc2tpbGwubmFtZSxcbiAgICAgICAgZW5lcmd5OiB7XG4gICAgICAgICAgYTogc2tpbGwuZW5lcmd5LmEsXG4gICAgICAgICAgaTogc2tpbGwuZW5lcmd5LmksXG4gICAgICAgICAgczogc2tpbGwuZW5lcmd5LnMsXG4gICAgICAgICAgdzogc2tpbGwuZW5lcmd5LncsXG4gICAgICAgICAgcjogc2tpbGwuZW5lcmd5LnIsXG4gICAgICAgICAgdG90YWw6XG4gICAgICAgICAgICBza2lsbC5lbmVyZ3kuYSArXG4gICAgICAgICAgICBza2lsbC5lbmVyZ3kuaSArXG4gICAgICAgICAgICBza2lsbC5lbmVyZ3kucyArXG4gICAgICAgICAgICBza2lsbC5lbmVyZ3kudyArXG4gICAgICAgICAgICBza2lsbC5lbmVyZ3kuclxuICAgICAgICB9LFxuICAgICAgICBkZXNjcmlwdGlvbjogc2tpbGwuZGVzY3JpcHRpb24sXG4gICAgICAgIGNsYXNzZXM6IHNraWxsLmNsYXNzZXMsXG4gICAgICAgIGNvb2xkb3duOiBza2lsbC5jb29sZG93blxuICAgICAgfTtcblxuICAgICAgbGV0IGFsdCA9IHNraWxsLmFsdCAhPT0gZmFsc2UgPyBza2lsbC5hbHQgOiBmYWxzZTtcblxuICAgICAgLy9CdWZmZXIgRGVzY3JpcHRpb25cbiAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICBzdGF0ZS5kZXNjcmlwdGlvbiA9IHtcbiAgICAgICAgbmFtZUlkOiBjb25maWcubmFtZUlkLFxuICAgICAgICBza2lsbDogY29uZmlnLnNraWxsSWQsXG4gICAgICAgIGhlcm9JbmRleDogY29uZmlnLmhlcm9JbmRleCxcbiAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgIGFsdDogYWx0LFxuICAgICAgICBvcHRpb246IG9wdGlvblxuICAgICAgfTtcbiAgICB9LFxuICAgIG9uU3RhdHVzOiBmdW5jdGlvbihwYXlsb2FkKSB7XG4gICAgICBjb25zb2xlLmxvZyhwYXlsb2FkKTtcbiAgICAgIGxldCBzdGF0dXMgPSBfLmNvbmNhdChcbiAgICAgICAgcGF5bG9hZC5vbkF0dGFjayxcbiAgICAgICAgcGF5bG9hZC5vblJlY2VpdmUsXG4gICAgICAgIHBheWxvYWQub25TdGF0ZSxcbiAgICAgICAgcGF5bG9hZC5vblNlbGZcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZyhzdGF0dXMpO1xuICAgICAgbGV0IGdyb3VwID0gXy5ncm91cEJ5KHN0YXR1cywgXCJuYW1lSWRcIik7XG4gICAgICBjb25zb2xlLmxvZyhncm91cCk7XG4gICAgICBsZXQgc3ViZ3JvdXAgPSBfLnRvQXJyYXkoZ3JvdXApLm1hcCh4ID0+XG4gICAgICAgIF8udG9BcnJheShfLmdyb3VwQnkoeCwgXCJza2lsbEluZGV4XCIpKVxuICAgICAgKTtcbiAgICAgIGxldCBwcmVwID0gc3ViZ3JvdXAubWFwKHggPT4geFswXSk7XG4gICAgICBsZXQgZmluYWwgPSBwcmVwLm1hcCh4ID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coeFswXSk7XG4gICAgICAgIGxldCBpbmZvID0geFswXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lSWQ6IGluZm8ubmFtZUlkLFxuICAgICAgICAgIHN0YXR1czogaW5mby5za2lsbEluZGV4LFxuICAgICAgICAgIHZhbDogeFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZyhwcmVwKTtcbiAgICAgIGNvbnNvbGUubG9nKGZpbmFsKTtcbiAgICAgIHJldHVybiBmaW5hbDtcbiAgICAgIC8vIGxldCBzdWJncm91cCA9IGdyb3VwLm1hcCh4ID0+IF8uZ3JvdXBCeSh4LCBcInNraWxsSW5kZXhcIikpO1xuICAgIH0sXG4gICAgb25HZXRJbWFnZTogZnVuY3Rpb24ocGF5bG9hZCwgb3B0aW9uKSB7XG4gICAgICBpZiAob3B0aW9uID09PSBcInBhY2tldFwiKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuc291cmNlLmFsbHkuZmluZEluZGV4KHggPT4geC5uYW1lID09PSBwYXlsb2FkLm9mZmVuc2UpO1xuICAgICAgICBsZXQgbmFtZUlkID0gdGhpcy5zb3VyY2UuYWxseVtpbmRleF0ubmFtZUlkO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgXCIvYXNzZXRzL2NoYXJhY3Rlci9cIiArXG4gICAgICAgICAgbmFtZUlkLnNsaWNlKDAsIC0xKSArXG4gICAgICAgICAgXCIvc2tpbGxcIiArXG4gICAgICAgICAgKHBheWxvYWQuc2tpbGwgKyAxKSArXG4gICAgICAgICAgXCIvYXZhdGFyLmpwZ1wiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbiA9PT0gXCJjaGFyXCIpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBcIi9hc3NldHMvY2hhcmFjdGVyL1wiICsgcGF5bG9hZC5uYW1lSWQuc2xpY2UoMCwgLTEpICsgXCIvYXZhdGFyLmpwZ1wiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbiA9PT0gXCJza2lsbFwiKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgXCIvYXNzZXRzL2NoYXJhY3Rlci9cIiArXG4gICAgICAgICAgcGF5bG9hZC5uYW1lSWQuc2xpY2UoMCwgLTEpICtcbiAgICAgICAgICBcIi9za2lsbFwiICtcbiAgICAgICAgICAocGF5bG9hZC5za2lsbCArIDEpICtcbiAgICAgICAgICBcIi9hdmF0YXIuanBnXCJcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9uID09PSBcInN0YXR1c1wiKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgXCIvYXNzZXRzL2NoYXJhY3Rlci9cIiArXG4gICAgICAgICAgcGF5bG9hZC5uYW1lSWQuc2xpY2UoMCwgLTEpICtcbiAgICAgICAgICBcIi9za2lsbFwiICtcbiAgICAgICAgICBwYXlsb2FkLnNraWxsICtcbiAgICAgICAgICBcIi9hdmF0YXIuanBnXCJcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9uID09PSBcInRhcmdldGluZ1wiKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMucGFja2V0LmZpbmRJbmRleCh4ID0+IHgub2ZmZW5zZSA9PT0gcGF5bG9hZC5uYW1lKTtcbiAgICAgICAgbGV0IHNraWxsSWQgPSB0aGlzLnBhY2tldFtpbmRleF0uc2tpbGxJZDtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBcIi9hc3NldHMvY2hhcmFjdGVyL1wiICtcbiAgICAgICAgICBwYXlsb2FkLm5hbWVJZC5zbGljZSgwLCAtMSkgK1xuICAgICAgICAgIFwiL3NraWxsXCIgK1xuICAgICAgICAgIChza2lsbElkICsgMSkgK1xuICAgICAgICAgIFwiL2F2YXRhci5qcGdcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgdGFyZ2V0aW5nQ3VlOiBmdW5jdGlvbihwYXlsb2FkLCBuYW1lSWQpIHtcbiAgICAgIGxldCBuYW1lID0gcGF5bG9hZDtcbiAgICAgIGxldCBpbmRleCA9IHRoaXMucGFja2V0LmZpbmRJbmRleCh4ID0+IHgub2ZmZW5zZSA9PT0gcGF5bG9hZCk7XG4gICAgICBsZXQgcGFja2V0ID0gdGhpcy5wYWNrZXRbaW5kZXhdO1xuXG4gICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBza2lsbEluZGV4OiBwYWNrZXQuc2tpbGwsXG4gICAgICAgIHNraWxsSWQ6IHBhY2tldC5za2lsbElkLFxuICAgICAgICBoZXJvSW5kZXg6IHBhY2tldC5oZXJvSW5kZXgsXG4gICAgICAgIHRhcmdldDogcGFja2V0LnRhcmdldFxuICAgICAgfTtcblxuICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICByZXN1bHQubmFtZUlkID0gbmFtZUlkO1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIG9uSFA6IGZ1bmN0aW9uKGhwKSB7XG4gICAgICBpZiAoaHAgPiA3MCkge1xuICAgICAgICByZXR1cm4gXCJsLS1ocC1mdWxsXCI7XG4gICAgICB9IGVsc2UgaWYgKGhwIDw9IDcwICYmIGhwID49IDQwKSB7XG4gICAgICAgIHJldHVybiBcImwtLWhwLW1pZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibC0taHAtbG93XCI7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbiIsImZ1bmN0aW9uIGVuZXJneU1hbmFnZW1lbnQodGVtcG9yYXJ5LCBvcHRpb24pIHtcbiAgbGV0IGVuZXJneSA9IHRlbXBvcmFyeS5lbmVyZ3kgPyB0ZW1wb3JhcnkuZW5lcmd5IDogYXBwLnNvdXJjZS5lbmVyZ3kuYWxseTtcbiAgbGV0IHNraWxsID0gdGVtcG9yYXJ5LnNraWxsQmluZFxuICAgID8gdGVtcG9yYXJ5LnNraWxsQmluZFxuICAgIDogYXBwLnNvdXJjZS5hbGx5W3RlbXBvcmFyeS5oZXJvSW5kZXhdLnNraWxsW3RlbXBvcmFyeS5za2lsbF0uZW5lcmd5O1xuICBsZXQgdG90YWwgPSB7XG4gICAgZW5lcmd5OiBlbmVyZ3kuYSArIGVuZXJneS5pICsgZW5lcmd5LnMgKyBlbmVyZ3kudyxcbiAgICBza2lsbDogc2tpbGwuYSArIHNraWxsLmkgKyBza2lsbC5zICsgc2tpbGwud1xuICB9O1xuXG4gIGlmIChvcHRpb24gPT09IFwic3Vic3RyYWN0XCIpIHtcbiAgICBpZiAoc2tpbGwuYSA+IDApIHtcbiAgICAgIGVuZXJneS5hIC09IHNraWxsLmE7XG4gICAgICBlbmVyZ3kuciAtPSBza2lsbC5hO1xuICAgIH1cbiAgICBpZiAoc2tpbGwuaSA+IDApIHtcbiAgICAgIGVuZXJneS5pIC09IHNraWxsLmk7XG4gICAgICBlbmVyZ3kuciAtPSBza2lsbC5pO1xuICAgIH1cbiAgICBpZiAoc2tpbGwucyA+IDApIHtcbiAgICAgIGVuZXJneS5zIC09IHNraWxsLnM7XG4gICAgICBlbmVyZ3kuciAtPSBza2lsbC5zO1xuICAgIH1cbiAgICBpZiAoc2tpbGwudyA+IDApIHtcbiAgICAgIGVuZXJneS53IC09IHNraWxsLnc7XG4gICAgICBlbmVyZ3kuciAtPSBza2lsbC53O1xuICAgIH1cbiAgICBpZiAoc2tpbGwuciA+IDApIHtcbiAgICAgIGVuZXJneS5yIC09IHNraWxsLnI7XG4gICAgICBhcHAuc3RhdGUuZW5lcmd5LnJhbmRvbSArPSBza2lsbC5yO1xuICAgIH1cbiAgfSBlbHNlIGlmIChvcHRpb24gPT09IFwiYWRkXCIpIHtcbiAgICBpZiAoc2tpbGwuYSA+IDApIHtcbiAgICAgIGVuZXJneS5hICs9IHNraWxsLmE7XG4gICAgICBlbmVyZ3kuciArPSBza2lsbC5hO1xuICAgIH1cbiAgICBpZiAoc2tpbGwuaSA+IDApIHtcbiAgICAgIGVuZXJneS5pICs9IHNraWxsLmk7XG4gICAgICBlbmVyZ3kuciArPSBza2lsbC5pO1xuICAgIH1cbiAgICBpZiAoc2tpbGwucyA+IDApIHtcbiAgICAgIGVuZXJneS5zICs9IHNraWxsLnM7XG4gICAgICBlbmVyZ3kuciArPSBza2lsbC5zO1xuICAgIH1cbiAgICBpZiAoc2tpbGwudyA+IDApIHtcbiAgICAgIGVuZXJneS53ICs9IHNraWxsLnc7XG4gICAgICBlbmVyZ3kuciArPSBza2lsbC53O1xuICAgIH1cbiAgICBpZiAoc2tpbGwuciA+IDApIHtcbiAgICAgIGVuZXJneS5yICs9IHNraWxsLnI7XG4gICAgICBhcHAuc3RhdGUuZW5lcmd5LnJhbmRvbSAtPSBza2lsbC5yO1xuICAgIH1cbiAgfSBlbHNlIGlmIChvcHRpb24gPT09IFwiY2hlY2tcIikge1xuICAgIGxldCBhY3RpdmUgPSB0cnVlO1xuICAgIGlmICh0b3RhbC5lbmVyZ3kgPj0gdG90YWwuc2tpbGwpIHtcbiAgICAgIGxldCBjb3VudCA9IFt0cnVlLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlXTtcbiAgICAgIGlmIChza2lsbC5hID49IDApIHtcbiAgICAgICAgY291bnRbMF0gPSBlbmVyZ3kuYSA+PSBza2lsbC5hID8gZmFsc2UgOiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHNraWxsLmkgPj0gMCkge1xuICAgICAgICBjb3VudFsxXSA9IGVuZXJneS5pID49IHNraWxsLmkgPyBmYWxzZSA6IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoc2tpbGwucyA+PSAwKSB7XG4gICAgICAgIGNvdW50WzJdID0gZW5lcmd5LnMgPj0gc2tpbGwucyA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChza2lsbC53ID49IDApIHtcbiAgICAgICAgY291bnRbM10gPSBlbmVyZ3kudyA+PSBza2lsbC53ID8gZmFsc2UgOiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHNraWxsLnIgPj0gMCkge1xuICAgICAgICBjb3VudFs0XSA9IGVuZXJneS5yID49IHRvdGFsLnNraWxsICsgc2tpbGwuciA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvdW50LmZpbHRlcih4ID0+IHggPT09IGZhbHNlKS5sZW5ndGggPT09IDUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWN0aXZlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1dHRvbk1hbmFnZW1lbnQocGF5bG9hZCwgb3B0aW9uKSB7XG4gIC8vVGFyZ2V0IEJ1dHRvblxuICBpZiAob3B0aW9uICE9PSBcIm9uU2VsZlwiKSB7XG4gICAgaWYgKHBheWxvYWQuYWltID09PSBcImVuZW15XCIpIHtcbiAgICAgIGFwcC5zdGF0ZS5idXR0b24uZW5lbXkuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgLy9EZWZpbmVcbiAgICAgICAgbGV0IHNraWxsID0gYXBwLnNvdXJjZS5hbGx5W3BheWxvYWQuaGVyb0luZGV4XS5za2lsbFtwYXlsb2FkLnNraWxsXTtcbiAgICAgICAgbGV0IGVuZW15U3RhdHVzID0gYXBwLnNvdXJjZS5lbmVteVt4LmluZGV4XS5zdGF0dXM7XG5cbiAgICAgICAgLy9JbnZ1bG5lcmFiaWxpdHlcbiAgICAgICAgbGV0IHN0YXRlID0gZW5lbXlTdGF0dXMub25TdGF0ZTtcbiAgICAgICAgbGV0IGludnVsbmVyYWJsZSA9IGludnVsbmVyYWJsZU1hbmFnZW1lbnQoc3RhdGUsIHNraWxsKTtcblxuICAgICAgICAvL0Rpc2FibGVcbiAgICAgICAgeC5idXR0b24gPSB4LmRpc2FibGVkIHx8IGludnVsbmVyYWJsZSA/IHRydWUgOiAheC5idXR0b247XG5cbiAgICAgICAgLy9JZ25vcmVcbiAgICAgICAgbGV0IGlnbm9yZSA9IGlnbm9yZU1hbmFnZW1lbnQoc3RhdGUsIHNraWxsKTtcbiAgICAgICAgY29uc29sZS5sb2coaWdub3JlKTtcblxuICAgICAgICAvL1ByZXZlbnQgSW52dWxuZXJhYmlsaXR5XG4gICAgICAgIGlmIChcbiAgICAgICAgICBvcHRpb24gPT09IFwib25Ta2lsbFwiICYmXG4gICAgICAgICAgZW5lbXlTdGF0dXMub25TdGF0ZS5zb21lKHggPT4geC50eXBlID09PSBcImRpc2FibGVEckl2XCIpICYmXG4gICAgICAgICAgaWdub3JlID09PSBmYWxzZVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnaGknKVxuICAgICAgICAgIHguYnV0dG9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coeC5idXR0b24pXG5cbiAgICAgICAgLy9NYXJraW5nXG4gICAgICAgIGlmIChwYXlsb2FkLm1hcmtpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICBsZXQgc2tpbGxOYW1lID0gc2tpbGwubmFtZTtcbiAgICAgICAgICBsZXQgbWFya2luZyA9XG4gICAgICAgICAgICBlbmVteVN0YXR1cy5vblJlY2VpdmUuc29tZSh4ID0+IHgubmFtZSA9PT0gc2tpbGxOYW1lKSB8fFxuICAgICAgICAgICAgZW5lbXlTdGF0dXMub25TdGF0ZS5zb21lKHggPT4geC5uYW1lID09PSBza2lsbE5hbWUpO1xuICAgICAgICAgIGlmIChtYXJraW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICB4LmJ1dHRvbiA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHBheWxvYWQuYWltID09PSBcImVuZW15bG9ja1wiKSB7XG4gICAgICBhcHAuc3RhdGUuYnV0dG9uLmVuZW15LmZvckVhY2goeCA9PiB7XG4gICAgICAgIC8vRGVmaW5lXG4gICAgICAgIGxldCBza2lsbCA9IGFwcC5zb3VyY2UuYWxseVtwYXlsb2FkLmhlcm9JbmRleF0uc2tpbGxbcGF5bG9hZC5za2lsbF07XG4gICAgICAgIGxldCBlbmVteVN0YXR1cyA9IGFwcC5zb3VyY2UuZW5lbXlbeC5pbmRleF0uc3RhdHVzO1xuICAgICAgICBsZXQgbG9jayA9IGVuZW15U3RhdHVzLm9uU3RhdGUuc29tZShcbiAgICAgICAgICB4ID0+IHgudHlwZSA9PT0gXCJzdGF0ZVwiICYmIHguaW5mbyA9PT0gc2tpbGwubmFtZVxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChsb2NrID09PSB0cnVlKSB7XG4gICAgICAgICAgLy9JbnZ1bG5lcmFiaWxpdHlcbiAgICAgICAgICBsZXQgc3RhdGUgPSBlbmVteVN0YXR1cy5vblN0YXRlO1xuICAgICAgICAgIGxldCBpbnZ1bG5lcmFibGUgPSBpbnZ1bG5lcmFibGVNYW5hZ2VtZW50KHN0YXRlLCBza2lsbCk7XG5cbiAgICAgICAgICAvL0Rpc2FibGVcbiAgICAgICAgICB4LmJ1dHRvbiA9IHguZGlzYWJsZWQgfHwgaW52dWxuZXJhYmxlID8gdHJ1ZSA6ICF4LmJ1dHRvbjtcblxuICAgICAgICAgIC8vSWdub3JlXG4gICAgICAgICAgbGV0IGlnbm9yZSA9IGlnbm9yZU1hbmFnZW1lbnQoc3RhdGUsIHNraWxsKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhpbnZ1bG5lcmFibGUpO1xuXG4gICAgICAgICAgLy9QcmV2ZW50IEludnVsbmVyYWJpbGl0eVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIG9wdGlvbiA9PT0gXCJvblNraWxsXCIgJiZcbiAgICAgICAgICAgIGVuZW15U3RhdHVzLm9uU3RhdGUuc29tZSh4ID0+IHgudHlwZSA9PT0gXCJkaXNhYmxlRHJJdlwiKSAmJlxuICAgICAgICAgICAgaWdub3JlID09PSBmYWxzZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgeC5idXR0b24gPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL01hcmtpbmdcbiAgICAgICAgICBpZiAocGF5bG9hZC5tYXJraW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBsZXQgc2tpbGxOYW1lID0gc2tpbGwubmFtZTtcbiAgICAgICAgICAgIGxldCBtYXJraW5nID1cbiAgICAgICAgICAgICAgZW5lbXlTdGF0dXMub25SZWNlaXZlLnNvbWUoeCA9PiB4Lm5hbWUgPT09IHNraWxsTmFtZSkgfHxcbiAgICAgICAgICAgICAgZW5lbXlTdGF0dXMub25TdGF0ZS5zb21lKHggPT4geC5uYW1lID09PSBza2lsbE5hbWUpO1xuICAgICAgICAgICAgaWYgKG1hcmtpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgeC5idXR0b24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHBheWxvYWQuYWltID09PSBcImFsbGVuZW15XCIgfHxcbiAgICAgIHBheWxvYWQuYWltID09PSBcInJhbmRvbWVuZW15XCIgfHxcbiAgICAgIHBheWxvYWQuYWltID09PSBcImFsbGVuZW15YWxsYWxseVwiXG4gICAgKSB7XG4gICAgICBhcHAuc3RhdGUuYnV0dG9uLmVuZW15LmZvckVhY2goeCA9PiB7XG4gICAgICAgIC8vRGVmaW5lXG4gICAgICAgIGxldCBza2lsbCA9IGFwcC5zb3VyY2UuYWxseVtwYXlsb2FkLmhlcm9JbmRleF0uc2tpbGxbcGF5bG9hZC5za2lsbF07XG4gICAgICAgIGxldCBlbmVteVN0YXR1cyA9IGFwcC5zb3VyY2UuZW5lbXlbeC5pbmRleF0uc3RhdHVzO1xuXG4gICAgICAgIC8vSW52dWxuZXJhYmlsaXR5XG4gICAgICAgIGxldCBzdGF0ZSA9IGVuZW15U3RhdHVzLm9uU3RhdGU7XG4gICAgICAgIGxldCBpbnZ1bG5lcmFibGUgPSBpbnZ1bG5lcmFibGVNYW5hZ2VtZW50KHN0YXRlLCBza2lsbCk7XG5cbiAgICAgICAgLy9EaXNhYmxlXG4gICAgICAgIHguYnV0dG9uID0geC5kaXNhYmxlZCB8fCBpbnZ1bG5lcmFibGUgPyB0cnVlIDogIXguYnV0dG9uO1xuXG4gICAgICAgIC8vUHJldmVudCBJbnZ1bG5lcmFiaWxpdHlcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG9wdGlvbiA9PT0gXCJvblNraWxsXCIgJiZcbiAgICAgICAgICBlbmVteVN0YXR1cy5vblN0YXRlLnNvbWUoeCA9PiB4LnR5cGUgPT09IFwiZGlzYWJsZURySXZcIilcbiAgICAgICAgKSB7XG4gICAgICAgICAgeC5idXR0b24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChwYXlsb2FkLmFpbSA9PT0gXCJhbGx5XCIgfHwgcGF5bG9hZC5haW0gPT09IFwiYWxsYWxseVwiKSB7XG4gICAgICBhcHAuc3RhdGUuYnV0dG9uLmFsbHkuZm9yRWFjaChcbiAgICAgICAgeCA9PiAoeC5idXR0b24gPSB4LmRpc2FibGVkID8gdHJ1ZSA6ICF4LmJ1dHRvbilcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChwYXlsb2FkLmFpbSA9PT0gXCJvdGhlcmFsbHlcIikge1xuICAgICAgYXBwLnN0YXRlLmJ1dHRvbi5hbGx5LmZvckVhY2goeCA9PiB7XG4gICAgICAgIGxldCBuYW1lID0gYXBwLnN0YXRlLmJ1dHRvbi5hbGx5W3BheWxvYWQuaGVyb0luZGV4XS5uYW1lO1xuICAgICAgICBpZiAoeC5uYW1lICE9PSBuYW1lKSB7XG4gICAgICAgICAgeC5idXR0b24gPSB4LmRpc2FibGVkID8gdHJ1ZSA6ICF4LmJ1dHRvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChwYXlsb2FkLmFpbSA9PT0gXCJzZWxmXCIpIHtcbiAgICAgIGxldCBhbGx5ID0gYXBwLnN0YXRlLmJ1dHRvbi5hbGx5W3BheWxvYWQuaGVyb0luZGV4XTtcbiAgICAgIGFsbHkuYnV0dG9uID0gYWxseS5kaXNhYmxlZCA/IHRydWUgOiAhYWxseS5idXR0b247XG4gICAgfVxuICB9XG5cbiAgLy9Ta2lsbCBCdXR0b25cbiAgaWYgKG9wdGlvbiA9PT0gXCJvblRhcmdldFwiKSB7XG4gICAgY29uc29sZS5sb2coXCJvblNraWxsXCIpO1xuICAgIGFwcC5zdGF0ZS5idXR0b24uYWxseS5mb3JFYWNoKHggPT4ge1xuICAgICAgaWYgKHgub25Ta2lsbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgeC5za2lsbC5mb3JFYWNoKHMgPT4ge1xuICAgICAgICAgIHMuYnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB4Lm5hbWUgPT09IHBheWxvYWQub2ZmZW5zZSAmJlxuICAgICAgICAgICAgcy5uYW1lID09PVxuICAgICAgICAgICAgICBhcHAuc291cmNlLmFsbHlbcGF5bG9hZC5oZXJvSW5kZXhdLnNraWxsW3BheWxvYWQuc2tpbGxdLm5hbWVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHMuYnV0dG9uID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAob3B0aW9uID09PSBcIm9uQ2FuY2VsXCIpIHtcbiAgICBjb25zb2xlLmxvZyhcIm9uQ2FuY2VsXCIpO1xuICAgIGFwcC5zdGF0ZS5idXR0b24uYWxseS5mb3JFYWNoKHggPT4ge1xuICAgICAgaWYgKHgub25Ta2lsbCA9PT0gZmFsc2UgfHwgeC5uYW1lID09PSBwYXlsb2FkLm9mZmVuc2UpIHtcbiAgICAgICAgeC5za2lsbC5mb3JFYWNoKHMgPT4ge1xuICAgICAgICAgIHMuYnV0dG9uID0gcy5kaXNhYmxlZCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB4Lm5hbWUgPT09IHBheWxvYWQub2ZmZW5zZSAmJlxuICAgICAgICAgICAgcy5uYW1lID09PVxuICAgICAgICAgICAgICBhcHAuc291cmNlLmFsbHlbcGF5bG9hZC5oZXJvSW5kZXhdLnNraWxsW3BheWxvYWQuc2tpbGxdLm5hbWVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHMuYnV0dG9uID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIGlmIChvcHRpb24gPT09IFwib25UYXJnZXRcIikge1xuICAgIGNvbnNvbGUubG9nKFwib25UYXJnZXRcIik7XG4gICAgYXBwLnN0YXRlLmJ1dHRvbi5hbGx5LmZvckVhY2goeCA9PiB7XG4gICAgICBsZXQgaW5kZXggPSBhcHAucGFja2V0LmZpbmRJbmRleChzID0+IHMub2ZmZW5zZSA9PT0geC5uYW1lKTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgeC5za2lsbC5mb3JFYWNoKHMgPT4ge1xuICAgICAgICAgIHMuYnV0dG9uID0gcy5kaXNhYmxlZCA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob3B0aW9uID09PSBcIm9uU2VsZlwiKSB7XG4gICAgY29uc29sZS5sb2coXCJvblNlbGZcIik7XG4gICAgYXBwLnN0YXRlLmJ1dHRvbi5hbGx5W3BheWxvYWQuaGVyb0luZGV4XS5za2lsbC5mb3JFYWNoKHMgPT4ge1xuICAgICAgcy5idXR0b24gPSBzLmRpc2FibGVkID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0pO1xuICB9XG5cbiAgLy9FbmVyZ3kgTWFuYWdlbWVudFxuICBpZiAob3B0aW9uICE9PSBcIm9uU2tpbGxcIikge1xuICAgIGFwcC5zdGF0ZS5idXR0b24uYWxseS5mb3JFYWNoKCh4LCB4aSkgPT4ge1xuICAgICAgaWYgKHgub25Ta2lsbCA9PT0gZmFsc2UgJiYgeC5uYW1lICE9PSBwYXlsb2FkLm9mZmVuc2UpIHtcbiAgICAgICAgY29uc29sZS5sb2coeC5uYW1lKTtcbiAgICAgICAgY29uc29sZS5sb2cob3B0aW9uKTtcbiAgICAgICAgeC5za2lsbC5mb3JFYWNoKChzLCBzaSkgPT4ge1xuICAgICAgICAgIGxldCBlbmVyZ3kgPSBlbmVyZ3lNYW5hZ2VtZW50KHsgaGVyb0luZGV4OiB4aSwgc2tpbGw6IHNpIH0sIFwiY2hlY2tcIik7XG4gICAgICAgICAgcy5idXR0b24gPSBzLmRpc2FibGVkIHx8IGVuZXJneSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB4Lm5hbWUgPT09IHBheWxvYWQub2ZmZW5zZSAmJlxuICAgICAgICAgICAgcy5uYW1lID09PVxuICAgICAgICAgICAgICBhcHAuc291cmNlLmFsbHlbcGF5bG9hZC5oZXJvSW5kZXhdLnNraWxsW3BheWxvYWQuc2tpbGxdLm5hbWVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHMuYnV0dG9uID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICAob3B0aW9uID09PSBcIm9uU2VsZlwiIHx8IG9wdGlvbiA9PT0gXCJvbkNhbmNlbFwiKSAmJlxuICAgICAgICB4Lm5hbWUgPT09IHBheWxvYWQub2ZmZW5zZVxuICAgICAgKSB7XG4gICAgICAgIHguc2tpbGwuZm9yRWFjaCgocywgc2kpID0+IHtcbiAgICAgICAgICBsZXQgZW5lcmd5ID0gZW5lcmd5TWFuYWdlbWVudCh7IGhlcm9JbmRleDogeGksIHNraWxsOiBzaSB9LCBcImNoZWNrXCIpO1xuICAgICAgICAgIHMuYnV0dG9uID0gcy5kaXNhYmxlZCB8fCBlbmVyZ3kgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0dW5NYW5hZ2VtZW50KG9uU3RhdGUsIHNraWxsKSB7XG4gIGxldCBzdHVuID0gb25TdGF0ZS5tYXAoeCA9PiB7XG4gICAgaWYgKHgudHlwZSA9PT0gXCJzdHVuXCIpIHtcbiAgICAgIGxldCBpZ25vcmUgPSBpZ25vcmVNYW5hZ2VtZW50KG9uU3RhdGUsIHgpO1xuICAgICAgbGV0IGludGVyc2VjdCA9IF8uaW50ZXJzZWN0aW9uKHguY2xhc3Nlcywgc2tpbGwuY2xhc3Nlcyk7XG5cbiAgICAgIGxldCBldmFsdWF0ZTtcblxuICAgICAgaWYgKHguaW5mbyA9PT0gXCJpbmNsdXNpdmVcIikge1xuICAgICAgICBldmFsdWF0ZSA9IGludGVyc2VjdC5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICh4LmluZm8gPT09IFwiZGVjbHVzaXZlXCIpIHtcbiAgICAgICAgZXZhbHVhdGUgPSBpbnRlcnNlY3QubGVuZ3RoID09PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZhbHVhdGUgJiYgIWlnbm9yZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmIChzdHVuLmZpbHRlcih4ID0+IHggPT09IHRydWUpLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52dWxuZXJhYmxlTWFuYWdlbWVudChvblN0YXRlLCBza2lsbCkge1xuICBsZXQgaW52dWxuZXJhYmxlID0gb25TdGF0ZS5tYXAoeCA9PiB7XG4gICAgaWYgKHgudHlwZSA9PT0gXCJpbnZ1bG5lcmFibGVcIikge1xuICAgICAgbGV0IGlnbm9yZUludnVsID0gc2tpbGwuaWdub3JlSW52dWw7XG4gICAgICBsZXQgaW50ZXJzZWN0ID0gXy5pbnRlcnNlY3Rpb24oeC5jbGFzc2VzLCBza2lsbC5jbGFzc2VzKTsgICAgICBcblxuICAgICAgbGV0IGV2YWx1YXRlO1xuXG4gICAgICBpZiAoeC5pbmZvID09PSBcImluY2x1c2l2ZVwiKSB7XG4gICAgICAgIGV2YWx1YXRlID0gaW50ZXJzZWN0Lmxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKHguaW5mbyA9PT0gXCJkZWNsdXNpdmVcIikge1xuICAgICAgICBldmFsdWF0ZSA9IGludGVyc2VjdC5sZW5ndGggPT09IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmFsdWF0ZSAmJiAhaWdub3JlSW52dWwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoaW52dWxuZXJhYmxlLmZpbHRlcih4ID0+IHggPT09IHRydWUpLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaWdub3JlTWFuYWdlbWVudChvblN0YXRlLCBza2lsbCkge1xuICBsZXQgaWdub3JlID0gb25TdGF0ZS5tYXAoeCA9PiB7XG4gICAgaWYgKHgudHlwZSA9PT0gXCJpZ25vcmVcIikge1xuICAgICAgbGV0IGludGVyc2VjdCA9IF8uaW50ZXJzZWN0aW9uKHguY2xhc3Nlcywgc2tpbGwuY2xhc3Nlcyk7XG5cbiAgICAgIGxldCBldmFsdWF0ZTtcblxuICAgICAgaWYgKHguaW5mbyA9PT0gXCJpbmNsdXNpdmVcIikge1xuICAgICAgICBldmFsdWF0ZSA9IGludGVyc2VjdC5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICh4LmluZm8gPT09IFwiZGVjbHVzaXZlXCIpIHtcbiAgICAgICAgZXZhbHVhdGUgPSBpbnRlcnNlY3QubGVuZ3RoID09PSAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZhbHVhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoaWdub3JlLmZpbHRlcih4ID0+IHggPT09IHRydWUpLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsImZ1bmN0aW9uIHZ1ZUJpbmQocGF5bG9hZCkge1xuICBsZXQgdXNlcm5hbWUgPSBnZXRDb29raWUoXCJ1c2VybmFtZVwiKTtcbiAgY29uc29sZS5sb2cocGF5bG9hZCk7XG4gIGxldCBhbGx5ID0gcGF5bG9hZC50ZWFtLnRlYW1FdmVuID09PSB1c2VybmFtZSA/IFwidGVhbUV2ZW5cIiA6IFwidGVhbU9kZFwiO1xuICBsZXQgZW5lbXkgPSBwYXlsb2FkLnRlYW0udGVhbUV2ZW4gPT09IHVzZXJuYW1lID8gXCJ0ZWFtT2RkXCIgOiBcInRlYW1FdmVuXCI7XG4gIGxldCB0dXJuVmFsID0gYWxseSA9PT0gXCJ0ZWFtRXZlblwiID8gMCA6IDE7XG4gIGxldCBteVR1cm4gPSBwYXlsb2FkLnR1cm4gJSAyID09PSB0dXJuVmFsID8gdHJ1ZSA6IGZhbHNlO1xuXG4gIGlmIChwYXlsb2FkLnRlYW0udGVhbUV2ZW4gIT09IHVzZXJuYW1lICYmIHBheWxvYWQudGVhbS50ZWFtT2RkICE9PSB1c2VybmFtZSkge1xuICAgIGNvbnNvbGUubG9nKFwic3BlY3RhdGVcIik7XG4gICAgYXBwLm1vZGUgPSBcInNwZWN0YXRlXCI7XG4gICAgbXlUdXJuID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuO1xuICB9XG5cbiAgaWYgKG15VHVybiA9PT0gdHJ1ZSkge1xuICAgIGFwcC4kcmVmcy5zb3VuZFN0YXJ0VHVybi5wbGF5KCk7XG4gIH1cblxuICAvL1RpbWVcbiAgbGV0IHRpbWVEaWZmID0gKERhdGUubm93KCkgLSBwYXlsb2FkLnRpbWVzdGFtcCkgLyAxMDAwO1xuICBsZXQgdGltZUNhbGMgPSBNYXRoLmZsb29yKDQ1IC0gdGltZURpZmYpO1xuICBsZXQgcmVtYWluaW5nID0gMTAwICogKHRpbWVDYWxjIC8gNDUpO1xuICBjb25zb2xlLmxvZyhwYXlsb2FkLnRpbWVzdGFtcCwgdGltZURpZmYsIHRpbWVDYWxjLCByZW1haW5pbmcpO1xuXG4gIGlmIChyZW1haW5pbmcgPCAwKSB7XG4gICAgcmVtYWluaW5nID0gMDtcbiAgfVxuICBhcHAuc3RhdGUudGltZXIudHVybiA9IHJlbWFpbmluZztcblxuICAvLyBpZiAocGF5bG9hZC53aW5uZXIuc3RhdGUgPT09IHRydWUgJiYgcGF5bG9hZC53aW5uZXIubmFtZSA9PT0gdXNlcm5hbWUpIHtcbiAgLy8gfSBlbHNlIGlmIChcbiAgLy8gICBwYXlsb2FkLndpbm5lci5zdGF0ZSA9PT0gdHJ1ZSAmJlxuICAvLyAgIHBheWxvYWQud2lubmVyLm5hbWUgIT09IHVzZXJuYW1lXG4gIC8vICkge1xuICAvLyAgIGFwcC4kcmVmcy5zb3VuZExvc2UucGxheSgpO1xuICAvLyB9XG5cbiAgbGV0IHN0b3JlID0ge1xuICAgIGVuZXJneToge1xuICAgICAgYWxseTogcGF5bG9hZC5lbmVyZ3lbYWxseV0sXG4gICAgICBlbmVteTogcGF5bG9hZC5lbmVyZ3lbZW5lbXldXG4gICAgfSxcbiAgICBhbGx5OiBwYXlsb2FkW2FsbHldLm1hcCh4ID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLngsXG4gICAgICAgIHNraWxsOlxuICAgICAgICAgIGFwcC5tb2RlID09PSBcImdhbWVcIiA/IHguc2tpbGwgOiB4LnNraWxsLnNvcnQoKGEsIGIpID0+IGEuaWQgLSBiLmlkKSxcbiAgICAgICAgaW5kaWNhdG9yOiBzdGF0dXNWaWV3KHgubmFtZSwgeC5zdGF0dXMsIHR1cm5WYWwpXG4gICAgICB9O1xuICAgIH0pLFxuICAgIGVuZW15OiBwYXlsb2FkW2VuZW15XS5tYXAoeCA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi54LFxuICAgICAgICBza2lsbDogeC5za2lsbC5zb3J0KChhLCBiKSA9PiBhLmlkIC0gYi5pZCksXG4gICAgICAgIGluZGljYXRvcjogc3RhdHVzVmlldyh4Lm5hbWUsIHguc3RhdHVzLCB0dXJuVmFsKVxuICAgICAgfTtcbiAgICB9KSxcbiAgICB0dXJuOiBwYXlsb2FkLnR1cm4sXG4gICAgbXlUdXJuOiBteVR1cm4sXG4gICAgdHVyblZhbDogdHVyblZhbCxcbiAgICByb29tOiBwYXlsb2FkLnJvb20sXG4gICAgbWV0YToge1xuICAgICAgbXlOYW1lOiBwYXlsb2FkLnRlYW1bYWxseV0sXG4gICAgICB0aGVpck5hbWU6IHBheWxvYWQudGVhbVtlbmVteV1cbiAgICB9LFxuICAgIHRpbWVzdGFtcDogcGF5bG9hZC50aW1lc3RhbXBcbiAgfTtcbiAgc3RvcmUuZW5lcmd5LmFsbHkuciA9XG4gICAgc3RvcmUuZW5lcmd5LmFsbHkuYSArXG4gICAgc3RvcmUuZW5lcmd5LmFsbHkuaSArXG4gICAgc3RvcmUuZW5lcmd5LmFsbHkucyArXG4gICAgc3RvcmUuZW5lcmd5LmFsbHkudztcbiAgY29uc29sZS5sb2coc3RvcmUpO1xuICBsZXQgYnV0dG9uID0ge1xuICAgIGFsbHk6IHN0b3JlLmFsbHkubWFwKHggPT4ge1xuICAgICAgLy8gbGV0IGRpc2FibGVkID0geC5zdGF0dXMub25TdGF0ZS5maW5kSW5kZXgoeCA9PiB4LnR5cGUgPT09ICdzdHVuJykgPiAtMSB8fCB4LmhwIDw9IDAgPyB0cnVlIDogZmFsc2VcbiAgICAgIGxldCBkaXNhYmxlZCA9IHguaHAgPD0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgIC8vIGxldCBzdHVuID0geC5zdGF0dXMub25TdGF0ZS5zb21lKHggPT4geC50eXBlID09PSBcInN0dW5cIikgPyB0cnVlIDogZmFsc2U7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiB4Lm5hbWUsXG4gICAgICAgIGJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgb25Ta2lsbDogZmFsc2UsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgc2tpbGw6IHguc2tpbGwubWFwKHMgPT4ge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHMudHlwZSk7XG4gICAgICAgICAgbGV0IGVuZXJneSA9IGVuZXJneU1hbmFnZW1lbnQoXG4gICAgICAgICAgICB7IGVuZXJneTogc3RvcmUuZW5lcmd5LmFsbHksIHNraWxsQmluZDogcy5lbmVyZ3kgfSxcbiAgICAgICAgICAgIFwiY2hlY2tcIlxuICAgICAgICAgICk7XG4gICAgICAgICAgbGV0IHN0dW4gPSBzdHVuTWFuYWdlbWVudCh4LnN0YXR1cy5vblN0YXRlLCBzKTtcbiAgICAgICAgICAvLyBsZXQgZGlzYWJsZURyVnIgPVxuICAgICAgICAgIC8vICAgcy50eXBlID09PSBcImludnVsbmVyYWJsZVwiICYmXG4gICAgICAgICAgLy8gICB4LnN0YXR1cy5vblN0YXRlLnNvbWUoeCA9PiB4LnR5cGUgPT09IFwiZGlzYWJsZURySXZcIilcbiAgICAgICAgICAvLyAgICAgPyB0cnVlXG4gICAgICAgICAgLy8gICAgIDogZmFsc2U7XG4gICAgICAgICAgbGV0IGRpc2FibGVkID1cbiAgICAgICAgICAgIHN0dW4gfHxcbiAgICAgICAgICAgIHMucmVxdWlyZWQgfHxcbiAgICAgICAgICAgIHMuc3RhdGUgPT09IFwiY29vbGRvd25cIiB8fFxuICAgICAgICAgICAgbXlUdXJuID09PSBmYWxzZSB8fFxuICAgICAgICAgICAgeC5ocCA8PSAwXG4gICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBzLm5hbWUsXG4gICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgICBidXR0b246IGRpc2FibGVkIHx8IGVuZXJneSA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0pLFxuICAgIGVuZW15OiBzdG9yZS5lbmVteS5tYXAoKHgsIGkpID0+IHtcbiAgICAgIC8vIGxldCBkaXNhYmxlZCA9XG4gICAgICAvLyAgIHguc3RhdHVzLm9uU3RhdGUuc29tZSh4ID0+IHgudHlwZSA9PT0gXCJpbnZ1bG5lcmFibGVcIikgfHwgeC5ocCA8PSAwXG4gICAgICAvLyAgICAgPyB0cnVlXG4gICAgICAvLyAgICAgOiBmYWxzZTtcbiAgICAgIGxldCBkaXNhYmxlZCA9IHguaHAgPD0gMCA/IHRydWUgOiBmYWxzZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHgubmFtZSxcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgYnV0dG9uOiB0cnVlXG4gICAgICB9O1xuICAgIH0pXG4gIH07XG5cbiAgYXBwLnNvdXJjZSA9IHN0b3JlO1xuICBhcHAuc3RhdGUuYnV0dG9uID0gYnV0dG9uO1xuICBhcHAuc3RhdGUud2lubmVyID0gcGF5bG9hZC53aW5uZXI7XG4gIGFwcC5zdGF0ZS5leGNoYW5nZS5tb2RhbCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzdGF0dXNWaWV3KG5hbWUsIHBheWxvYWQsIHR1cm5WYWwpIHtcbiAgY29uc29sZS5sb2cobmFtZS5zbGljZSgtMSksIHBheWxvYWQpO1xuICBsZXQgc3RhdHVzID0gXy5jb25jYXQoXG4gICAgcGF5bG9hZC5vbkF0dGFjayxcbiAgICBwYXlsb2FkLm9uUmVjZWl2ZSxcbiAgICBwYXlsb2FkLm9uU3RhdGUsXG4gICAgcGF5bG9hZC5vblNlbGZcbiAgKTtcbiAgY29uc29sZS5sb2coXCJpbnZpc2libGVcIiwgdHVyblZhbCwgbmFtZS5zbGljZSgtMSkpO1xuICBzdGF0dXMgPSBzdGF0dXMuZmlsdGVyKFxuICAgIHggPT5cbiAgICAgIHguaXNJbnZpc2libGUgPT09IGZhbHNlIHx8XG4gICAgICAoeC5pc0ludmlzaWJsZSAhPT0gZmFsc2UgJiYgTnVtYmVyKHgubmFtZUlkLnNsaWNlKC0xKSkgPT09IHR1cm5WYWwpXG4gICk7XG4gIC8vIGlmICh0dXJuVmFsID09PSBOdW1iZXIobmFtZS5zbGljZSgtMSkpKSB7XG4gIC8vICAgc3RhdHVzID0gc3RhdHVzLmZpbHRlcihcbiAgLy8gICAgIHggPT4geC5pc0ludmlzaWJsZSA9PT0gZmFsc2UgfHwgeC5pc0ludmlzaWJsZSAhPT0gZmFsc2UgJiYgTnVtYmVyKHgubmFtZUlkLnNsaWNlKC0xKSkgPT09IHR1cm5WYWxcbiAgLy8gICApO1xuICAvLyB9IGVsc2Uge1xuICAvLyAgIHN0YXR1cyA9IHN0YXR1cy5maWx0ZXIoXG4gIC8vICAgICB4ID0+IHguaXNJbnZpc2libGUgPT09IGZhbHNlIHx8IHguaXNJbnZpc2libGUgIT09IGZhbHNlICYmIE51bWJlcih4Lm5hbWVJZC5zbGljZSgtMSkpID09PSB0dXJuVmFsXG4gIC8vICAgKTtcbiAgLy8gfVxuICBsZXQgZ3JvdXBCeU5hbWVJZCA9IF8uZ3JvdXBCeShzdGF0dXMsIFwibmFtZUlkXCIpO1xuICBsZXQgdmFsdWVzQnlOYW1lSWQgPSBfLnZhbHVlcyhncm91cEJ5TmFtZUlkKTtcbiAgbGV0IGdyb3VwQnlTa2lsbEluZGV4ID0gdmFsdWVzQnlOYW1lSWQubWFwKHggPT4gXy5ncm91cEJ5KHgsIFwic2tpbGxJbmRleFwiKSk7XG4gIGxldCB2YWx1ZXNCeVNraWxsSW5kZXggPSBfLnZhbHVlcyhncm91cEJ5U2tpbGxJbmRleCk7XG4gIGxldCBjb25jYXRWYWx1ZXMgPSBbXTtcbiAgdmFsdWVzQnlTa2lsbEluZGV4LmZvckVhY2goeCA9PiB7XG4gICAgY29uY2F0VmFsdWVzID0gY29uY2F0VmFsdWVzLmNvbmNhdChfLnZhbHVlcyh4KSk7XG4gIH0pO1xuICBsZXQgZmluYWwgPSBjb25jYXRWYWx1ZXMubWFwKHggPT4ge1xuICAgIGxldCBpbmZvID0geFswXTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogaW5mby5uYW1lLFxuICAgICAgbmFtZUlkOiBpbmZvLm5hbWVJZCxcbiAgICAgIHNraWxsSW5kZXg6IGluZm8uc2tpbGxJbmRleCxcbiAgICAgIGFjdGl2ZTogaW5mby5hY3RpdmUsXG4gICAgICB2YWw6IHhcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIGZpbmFsO1xufVxuIiwiZnVuY3Rpb24gaW5pdGlhdGUoKSB7XG4gIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdChcIi9cIik7XG4gIGxldCByb29tID0gdXJsW3VybC5sZW5ndGggLSAxXTtcbiAgaWYgKHJvb20gIT09IFwiXCIpIHtcbiAgICBzb2NrZXQuZW1pdChcImluaXRpYXRlXCIsIHtcbiAgICAgIHJvb206IHJvb21cbiAgICB9KTtcbiAgICBjaGF0LmVtaXQoXCJnYW1lSW5pdGlhdGVcIiwge1xuICAgICAgcm9vbTogcm9vbVxuICAgIH0pO1xuICAgIGNoYXQuZW1pdChcImxvYmJ5SW5pdGlhdGVcIik7XG4gIH0gZWxzZSB7XG4gICAgLy8gd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoJy8nKTtcbiAgfVxufVxuXG5pbml0aWF0ZSgpO1xuXG5zZXRJbnRlcnZhbCgoKSA9PiB7XG4gIGlmIChhcHAuc291cmNlLnR1cm4gPT0gdW5kZWZpbmVkIHx8IGFwcC5zdGF0ZS53aW5uZXIuc3RhdGUgIT09IGZhbHNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChhcHAuc3RhdGUudGltZXIudHVybiA+IDApIHtcbiAgICBsZXQgdGltZXIgPSBhcHAuc3RhdGUudGltZXIudHVybiAtIDIuMjtcbiAgICBpZiAodGltZXIgPCAwKSB7XG4gICAgICB0aW1lciA9IDA7XG4gICAgfVxuICAgIGFwcC5zdGF0ZS50aW1lci50dXJuID0gdGltZXI7XG4gIH0gZWxzZSBpZiAoYXBwLnN0YXRlLnRpbWVyLnR1cm4gPD0gMCAmJiBhcHAuc291cmNlLm15VHVybiA9PT0gdHJ1ZSkge1xuICAgIGxldCB0aW1lRGlmZiA9IChEYXRlLm5vdygpIC0gYXBwLnNvdXJjZS50aW1lc3RhbXApIC8gMTAwMDtcbiAgICBsZXQgdGltZUNhbGMgPSA0NSAtIHRpbWVEaWZmO1xuICAgIGxldCByZW1haW5pbmcgPSAxMDAgKiAodGltZUNhbGMgLyA0NSk7XG4gICAgLy8gY29uc29sZS5sb2coYXBwLnNvdXJjZS50aW1lc3RhbXAsIHRpbWVEaWZmLCB0aW1lQ2FsYywgcmVtYWluaW5nKTtcblxuICAgIGlmIChcbiAgICAgIHJlbWFpbmluZyA8PSAwICYmXG4gICAgICBhcHAuc3RhdGUudGltZXIudHVybiA8PSAwICYmXG4gICAgICBhcHAuc291cmNlLm15VHVybiA9PT0gdHJ1ZVxuICAgICkge1xuICAgICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIGVuZXJneToge1xuICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgaTogMCxcbiAgICAgICAgICBzOiAwLFxuICAgICAgICAgIHc6IDBcbiAgICAgICAgfSxcbiAgICAgICAgcGFja2V0OiBbXVxuICAgICAgfTtcbiAgICAgIGFwcC5vbkRvbmUocGF5bG9hZCk7XG4gICAgICBhcHAuc291cmNlLm15VHVybiA9IGZhbHNlO1xuICAgIH1cbiAgfVxufSwgMTAwMCk7XG5cbndpbmRvdy5vbmZvY3VzID0gZnVuY3Rpb24oKSB7XG4gIGRvY3VtZW50LnRpdGxlID0gXCJBbmltZSBSdW1ibGVcIjtcbn07XG5cbmZ1bmN0aW9uIHNjcm9sbENoYXQoKSB7XG4gIHZhciBjb250YWluZXIgPSBhcHAuJGVsLnF1ZXJ5U2VsZWN0b3IoXCIjY2hhdFwiKTtcbiAgY29udGFpbmVyLnNjcm9sbFRvcCA9IGNvbnRhaW5lci5zY3JvbGxIZWlnaHQ7XG59XG4iLCJzb2NrZXQub24oXCJhcHBseVwiLCBwYXlsb2FkID0+IHtcbiAgZG9jdW1lbnQudGl0bGUgPSBcIighKSBBbmltZSBSdW1ibGVcIjtcbiAgdnVlQmluZChwYXlsb2FkKTtcbn0pO1xuXG5zb2NrZXQub24oXCJub01hdGNoXCIsIHBheWxvYWQgPT4ge1xuICBjb25zb2xlLmxvZyhcIm5vbmVcIik7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKFwiL1wiKTtcbn0pO1xuXG5jaGF0Lm9uKFwiY2hhdFwiLCBwYXlsb2FkID0+IHtcbiAgaWYgKHBheWxvYWQuY2hhbm5lbCA9PT0gXCJpbmdhbWVcIikge1xuICAgIGFwcC5jaGF0LnB1c2gocGF5bG9hZC5tZXNzYWdlKTtcbiAgICBpZiAoYXBwLmNoYXRDaGFubmVsICE9PSBcImluZ2FtZVwiKSB7XG4gICAgICBhcHAuY2hhdE5vdGlmLmluZ2FtZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcm9sbENoYXQoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGF5bG9hZC5jaGFubmVsID09PSBcImxvYmJ5XCIpIHtcbiAgICBhcHAubG9iYnljaGF0LnB1c2gocGF5bG9hZC5tZXNzYWdlKTtcblxuICAgIGlmIChhcHAuY2hhdENoYW5uZWwgIT09IFwibG9iYnlcIikge1xuICAgICAgYXBwLmNoYXROb3RpZi5sb2JieSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcm9sbENoYXQoKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5jaGF0Lm9uKFwiZ2FtZUluaXRpYXRlXCIsIHBheWxvYWQgPT4ge1xuICBhcHAuY2hhdCA9IHBheWxvYWQ7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHNjcm9sbENoYXQoKTtcbiAgfSwgMTAwKTtcbn0pO1xuY2hhdC5vbihcImxvYmJ5SW5pdGlhdGVcIiwgcGF5bG9hZCA9PiB7XG4gIGFwcC5sb2JieWNoYXQgPSBwYXlsb2FkO1xufSk7XG4iLCJmdW5jdGlvbiBnZXRQYXJhbWV0ZXJOYW1lKG5hbWUsIHVybCkge1xuICBpZiAoIXVybCkgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXFxcXCQmXCIpO1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKFwiWz8mXVwiICsgbmFtZSArIFwiKD0oW14mI10qKXwmfCN8JClcIiksXG4gICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKCFyZXN1bHRzKSByZXR1cm4gbnVsbDtcbiAgaWYgKCFyZXN1bHRzWzJdKSByZXR1cm4gXCJcIjtcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpO1xufVxuXG5jb25zdCBzZXRDb29raWUgPSAobmFtZSwgdmFsdWUsIGRheXMgPSA3LCBwYXRoID0gXCIvXCIpID0+IHtcbiAgY29uc3QgZXhwaXJlcyA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBkYXlzICogODY0ZTUpLnRvR01UU3RyaW5nKCk7XG4gIGRvY3VtZW50LmNvb2tpZSA9XG4gICAgbmFtZSArXG4gICAgXCI9XCIgK1xuICAgIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgK1xuICAgIFwiOyBleHBpcmVzPVwiICtcbiAgICBleHBpcmVzICtcbiAgICBcIjsgcGF0aD1cIiArXG4gICAgcGF0aDtcbn07XG5cbmNvbnN0IGdldENvb2tpZSA9IG5hbWUgPT4ge1xuICByZXR1cm4gZG9jdW1lbnQuY29va2llLnNwbGl0KFwiOyBcIikucmVkdWNlKChyLCB2KSA9PiB7XG4gICAgY29uc3QgcGFydHMgPSB2LnNwbGl0KFwiPVwiKTtcbiAgICByZXR1cm4gcGFydHNbMF0gPT09IG5hbWUgPyBkZWNvZGVVUklDb21wb25lbnQocGFydHNbMV0pIDogcjtcbiAgfSwgXCJcIik7XG59O1xuXG5jb25zdCBkZWxldGVDb29raWUgPSAobmFtZSwgcGF0aCkgPT4ge1xuICBzZXRDb29raWUobmFtZSwgXCJcIiwgLTEsIHBhdGgpO1xufTtcbiJdfQ==
